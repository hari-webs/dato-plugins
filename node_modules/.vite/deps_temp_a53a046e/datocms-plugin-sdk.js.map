{
  "version": 3,
  "sources": ["../../penpal/lib/constants.js", "../../penpal/lib/errorCodes.js", "../../penpal/lib/createDestructor.js", "../../penpal/lib/errorSerialization.js", "../../penpal/lib/connectCallReceiver.js", "../../penpal/lib/generateId.js", "../../penpal/lib/connectCallSender.js", "../../penpal/lib/createLogger.js", "../../penpal/lib/connectToParent.js", "../../datocms-plugin-sdk/src/connect.ts", "../../datocms-plugin-sdk/src/utils.ts", "../../datocms-plugin-sdk/src/hooks/renderAssetSource.ts", "../../datocms-plugin-sdk/src/hooks/renderConfigScreen.ts", "../../datocms-plugin-sdk/src/hooks/renderFieldExtension.ts", "../../datocms-plugin-sdk/src/hooks/renderItemCollectionOutlet.ts", "../../datocms-plugin-sdk/src/hooks/renderItemFormOutlet.ts", "../../datocms-plugin-sdk/src/hooks/renderItemFormSidebar.ts", "../../datocms-plugin-sdk/src/hooks/renderItemFormSidebarPanel.ts", "../../datocms-plugin-sdk/src/hooks/renderManualFieldExtensionConfigScreen.ts", "../../datocms-plugin-sdk/src/hooks/renderModal.ts", "../../datocms-plugin-sdk/src/hooks/renderPage.ts", "../../datocms-plugin-sdk/src/hooks/renderUploadSidebar.ts", "../../datocms-plugin-sdk/src/hooks/renderUploadSidebarPanel.ts", "../../datocms-plugin-sdk/src/guardUtils.ts", "../../datocms-plugin-sdk/src/icon.ts", "../../datocms-plugin-sdk/src/hooks/assetSources.ts", "../../datocms-plugin-sdk/src/hooks/buildItemPresentationInfo.ts", "../../datocms-plugin-sdk/src/hooks/contentAreaSidebarItems.ts", "../../datocms-plugin-sdk/src/hooks/customBlockStylesForStructuredTextField.ts", "../../datocms-plugin-sdk/src/hooks/customMarksForStructuredTextField.ts", "../../datocms-plugin-sdk/src/hooks/initialLocationQueryForItemSelector.ts", "../../datocms-plugin-sdk/src/hooks/itemCollectionOutlets.ts", "../../datocms-plugin-sdk/src/hooks/itemFormOutlets.ts", "../../datocms-plugin-sdk/src/hooks/itemFormSidebarPanels.ts", "../../datocms-plugin-sdk/src/hooks/itemFormSidebars.ts", "../../datocms-plugin-sdk/src/hooks/mainNavigationTabs.ts", "../../datocms-plugin-sdk/src/hooks/manualFieldExtensions.ts", "../../datocms-plugin-sdk/src/hooks/overrideFieldExtensions.ts", "../../datocms-plugin-sdk/src/hooks/settingsAreaSidebarItemGroups.ts", "../../datocms-plugin-sdk/src/hooks/uploadSidebarPanels.ts", "../../datocms-plugin-sdk/src/hooks/uploadSidebars.ts", "../../datocms-plugin-sdk/src/hooks/validateManualFieldExtensionParameters.ts", "../../datocms-plugin-sdk/src/manifest.ts", "../../datocms-plugin-sdk/src/shared.ts"],
  "sourcesContent": ["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DATA_CLONE_ERROR = exports.MESSAGE = exports.REJECTED = exports.FULFILLED = exports.REPLY = exports.CALL = exports.HANDSHAKE_REPLY = exports.HANDSHAKE = void 0;\nconst HANDSHAKE = 'handshake';\nexports.HANDSHAKE = HANDSHAKE;\nconst HANDSHAKE_REPLY = 'handshake-reply';\nexports.HANDSHAKE_REPLY = HANDSHAKE_REPLY;\nconst CALL = 'call';\nexports.CALL = CALL;\nconst REPLY = 'reply';\nexports.REPLY = REPLY;\nconst FULFILLED = 'fulfilled';\nexports.FULFILLED = FULFILLED;\nconst REJECTED = 'rejected';\nexports.REJECTED = REJECTED;\nconst MESSAGE = 'message';\nexports.MESSAGE = MESSAGE;\nconst DATA_CLONE_ERROR = 'DataCloneError';\nexports.DATA_CLONE_ERROR = DATA_CLONE_ERROR;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ERR_NO_IFRAME_SRC = exports.ERR_NOT_IN_IFRAME = exports.ERR_CONNECTION_TIMEOUT = exports.ERR_CONNECTION_DESTROYED = void 0;\nconst ERR_CONNECTION_DESTROYED = 'ConnectionDestroyed';\nexports.ERR_CONNECTION_DESTROYED = ERR_CONNECTION_DESTROYED;\nconst ERR_CONNECTION_TIMEOUT = 'ConnectionTimeout';\nexports.ERR_CONNECTION_TIMEOUT = ERR_CONNECTION_TIMEOUT;\nconst ERR_NOT_IN_IFRAME = 'NotInIframe';\nexports.ERR_NOT_IN_IFRAME = ERR_NOT_IN_IFRAME;\nconst ERR_NO_IFRAME_SRC = 'NoIframeSrc';\nexports.ERR_NO_IFRAME_SRC = ERR_NO_IFRAME_SRC;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _default = () => {\n  const callbacks = [];\n  let destroyed = false;\n  return {\n    destroy() {\n      destroyed = true;\n      callbacks.forEach(callback => {\n        callback();\n      });\n    },\n\n    onDestroy(callback) {\n      destroyed ? callback() : callbacks.push(callback);\n    }\n\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deserializeError = exports.serializeError = void 0;\n\n/**\n * Converts an error object into a plain object.\n * @param {Error} Error object.\n * @returns {Object}\n */\nconst serializeError = (_ref) => {\n  let name = _ref.name,\n      message = _ref.message,\n      stack = _ref.stack;\n  return {\n    name,\n    message,\n    stack\n  };\n};\n/**\n * Converts a plain object into an error object.\n * @param {Object} Object with error properties.\n * @returns {Error}\n */\n\n\nexports.serializeError = serializeError;\n\nconst deserializeError = obj => {\n  const deserializedError = new Error();\n  Object.keys(obj).forEach(key => deserializedError[key] = obj[key]);\n  return deserializedError;\n};\n\nexports.deserializeError = deserializeError;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _errorSerialization = require(\"./errorSerialization\");\n\n/**\n * Listens for \"call\" messages coming from the remote, executes the corresponding method, and\n * responds with the return value.\n * @param {Object} info Information about the local and remote windows.\n * @param {Object} methods The keys are the names of the methods that can be called by the remote\n * while the values are the method functions.\n * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n * connection.\n * @returns {Function} A function that may be called to disconnect the receiver.\n */\nvar _default = (info, methods, log) => {\n  const localName = info.localName,\n        local = info.local,\n        remote = info.remote,\n        originForSending = info.originForSending,\n        originForReceiving = info.originForReceiving;\n  let destroyed = false;\n  log(`${localName}: Connecting call receiver`);\n\n  const handleMessageEvent = event => {\n    if (event.source !== remote || event.data.penpal !== _constants.CALL) {\n      return;\n    }\n\n    if (event.origin !== originForReceiving) {\n      log(`${localName} received message from origin ${event.origin} which did not match expected origin ${originForReceiving}`);\n      return;\n    }\n\n    const _event$data = event.data,\n          methodName = _event$data.methodName,\n          args = _event$data.args,\n          id = _event$data.id;\n    log(`${localName}: Received ${methodName}() call`);\n\n    const createPromiseHandler = resolution => {\n      return returnValue => {\n        log(`${localName}: Sending ${methodName}() reply`);\n\n        if (destroyed) {\n          // It's possible to throw an error here, but it would need to be thrown asynchronously\n          // and would only be catchable using window.onerror. This is because the consumer\n          // is merely returning a value from their method and not calling any function\n          // that they could wrap in a try-catch. Even if the consumer were to catch the error,\n          // the value of doing so is questionable. Instead, we'll just log a message.\n          log(`${localName}: Unable to send ${methodName}() reply due to destroyed connection`);\n          return;\n        }\n\n        const message = {\n          penpal: _constants.REPLY,\n          id,\n          resolution,\n          returnValue\n        };\n\n        if (resolution === _constants.REJECTED && returnValue instanceof Error) {\n          message.returnValue = (0, _errorSerialization.serializeError)(returnValue);\n          message.returnValueIsError = true;\n        }\n\n        try {\n          remote.postMessage(message, originForSending);\n        } catch (err) {\n          // If a consumer attempts to send an object that's not cloneable (e.g., window),\n          // we want to ensure the receiver's promise gets rejected.\n          if (err.name === _constants.DATA_CLONE_ERROR) {\n            remote.postMessage({\n              penpal: _constants.REPLY,\n              id,\n              resolution: _constants.REJECTED,\n              returnValue: (0, _errorSerialization.serializeError)(err),\n              returnValueIsError: true\n            }, originForSending);\n          }\n\n          throw err;\n        }\n      };\n    };\n\n    new Promise(resolve => resolve(methods[methodName].apply(methods, args))).then(createPromiseHandler(_constants.FULFILLED), createPromiseHandler(_constants.REJECTED));\n  };\n\n  local.addEventListener(_constants.MESSAGE, handleMessageEvent);\n  return () => {\n    destroyed = true;\n    local.removeEventListener(_constants.MESSAGE, handleMessageEvent);\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nlet id = 0;\n/**\n * @return {number} A unique ID (not universally unique)\n */\n\nvar _default = () => ++id;\n\nexports.default = _default;\nmodule.exports = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _errorCodes = require(\"./errorCodes\");\n\nvar _generateId = _interopRequireDefault(require(\"./generateId\"));\n\nvar _errorSerialization = require(\"./errorSerialization\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Augments an object with methods that match those defined by the remote. When these methods are\n * called, a \"call\" message will be sent to the remote, the remote's corresponding method will be\n * executed, and the method's return value will be returned via a message.\n * @param {Object} callSender Sender object that should be augmented with methods.\n * @param {Object} info Information about the local and remote windows.\n * @param {Array} methodNames Names of methods available to be called on the remote.\n * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n * connection.\n * @returns {Object} The call sender object with methods that may be called.\n */\nvar _default = (callSender, info, methodNames, destroyConnection, log) => {\n  const localName = info.localName,\n        local = info.local,\n        remote = info.remote,\n        originForSending = info.originForSending,\n        originForReceiving = info.originForReceiving;\n  let destroyed = false;\n  log(`${localName}: Connecting call sender`);\n\n  const createMethodProxy = methodName => {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      log(`${localName}: Sending ${methodName}() call`); // This handles the case where the iframe has been removed from the DOM\n      // (and therefore its window closed), the consumer has not yet\n      // called destroy(), and the user calls a method exposed by\n      // the remote. We detect the iframe has been removed and force\n      // a destroy() immediately so that the consumer sees the error saying\n      // the connection has been destroyed. We wrap this check in a try catch\n      // because Edge throws an \"Object expected\" error when accessing\n      // contentWindow.closed on a contentWindow from an iframe that's been\n      // removed from the DOM.\n\n      let iframeRemoved;\n\n      try {\n        if (remote.closed) {\n          iframeRemoved = true;\n        }\n      } catch (e) {\n        iframeRemoved = true;\n      }\n\n      if (iframeRemoved) {\n        destroyConnection();\n      }\n\n      if (destroyed) {\n        const error = new Error(`Unable to send ${methodName}() call due ` + `to destroyed connection`);\n        error.code = _errorCodes.ERR_CONNECTION_DESTROYED;\n        throw error;\n      }\n\n      return new Promise((resolve, reject) => {\n        const id = (0, _generateId.default)();\n\n        const handleMessageEvent = event => {\n          if (event.source !== remote || event.data.penpal !== _constants.REPLY || event.data.id !== id) {\n            return;\n          }\n\n          if (event.origin !== originForReceiving) {\n            log(`${localName} received message from origin ${event.origin} which did not match expected origin ${originForReceiving}`);\n            return;\n          }\n\n          log(`${localName}: Received ${methodName}() reply`);\n          local.removeEventListener(_constants.MESSAGE, handleMessageEvent);\n          let returnValue = event.data.returnValue;\n\n          if (event.data.returnValueIsError) {\n            returnValue = (0, _errorSerialization.deserializeError)(returnValue);\n          }\n\n          (event.data.resolution === _constants.FULFILLED ? resolve : reject)(returnValue);\n        };\n\n        local.addEventListener(_constants.MESSAGE, handleMessageEvent);\n        remote.postMessage({\n          penpal: _constants.CALL,\n          id,\n          methodName,\n          args\n        }, originForSending);\n      });\n    };\n  };\n\n  methodNames.reduce((api, methodName) => {\n    api[methodName] = createMethodProxy(methodName);\n    return api;\n  }, callSender);\n  return () => {\n    destroyed = true;\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _default = debug => {\n  return function () {\n    if (debug) {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      console.log('[Penpal]', ...args); // eslint-disable-line no-console\n    }\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _errorCodes = require(\"./errorCodes\");\n\nvar _createDestructor2 = _interopRequireDefault(require(\"./createDestructor\"));\n\nvar _connectCallReceiver = _interopRequireDefault(require(\"./connectCallReceiver\"));\n\nvar _connectCallSender = _interopRequireDefault(require(\"./connectCallSender\"));\n\nvar _createLogger = _interopRequireDefault(require(\"./createLogger\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @typedef {Object} Parent\n * @property {Promise} promise A promise which will be resolved once a connection has\n * been established.\n * @property {Function} destroy A method that, when called, will disconnect any\n * messaging channels. You may call this even before a connection has been established.\n */\n\n/**\n * Attempts to establish communication with the parent window.\n * @param {Object} options\n * @param {string} [options.parentOrigin=*] Valid parent origin used to restrict communication.\n * @param {Object} [options.methods={}] Methods that may be called by the parent window.\n * @param {Number} [options.timeout] The amount of time, in milliseconds, Penpal should wait\n * for the parent to respond before rejecting the connection promise.\n * @return {Parent}\n */\nvar _default = function _default() {\n  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$parentOrigin = _ref.parentOrigin,\n      parentOrigin = _ref$parentOrigin === void 0 ? '*' : _ref$parentOrigin,\n      _ref$methods = _ref.methods,\n      methods = _ref$methods === void 0 ? {} : _ref$methods,\n      timeout = _ref.timeout,\n      debug = _ref.debug;\n\n  const log = (0, _createLogger.default)(debug);\n\n  if (window === window.top) {\n    const error = new Error('connectToParent() must be called within an iframe');\n    error.code = _errorCodes.ERR_NOT_IN_IFRAME;\n    throw error;\n  }\n\n  const _createDestructor = (0, _createDestructor2.default)(),\n        destroy = _createDestructor.destroy,\n        onDestroy = _createDestructor.onDestroy;\n\n  const child = window;\n  const parent = child.parent;\n  const promise = new Promise((resolveConnectionPromise, reject) => {\n    let connectionTimeoutId;\n\n    if (timeout !== undefined) {\n      connectionTimeoutId = setTimeout(() => {\n        const error = new Error(`Connection to parent timed out after ${timeout}ms`);\n        error.code = _errorCodes.ERR_CONNECTION_TIMEOUT;\n        reject(error);\n        destroy();\n      }, timeout);\n    }\n\n    const handleMessageEvent = event => {\n      // Under niche scenarios, we get into this function after\n      // the iframe has been removed from the DOM. In Edge, this\n      // results in \"Object expected\" errors being thrown when we\n      // try to access properties on window (global properties).\n      // For this reason, we try to access a global up front (clearTimeout)\n      // and if it fails we can assume the iframe has been removed\n      // and we ignore the message event.\n      try {\n        clearTimeout();\n      } catch (e) {\n        return;\n      }\n\n      if (event.source !== parent || event.data.penpal !== _constants.HANDSHAKE_REPLY) {\n        return;\n      }\n\n      if (parentOrigin !== '*' && parentOrigin !== event.origin) {\n        log(`Child received handshake reply from origin ${event.origin} which did not match expected origin ${parentOrigin}`);\n        return;\n      }\n\n      log('Child: Received handshake reply');\n      child.removeEventListener(_constants.MESSAGE, handleMessageEvent);\n      const info = {\n        localName: 'Child',\n        local: child,\n        remote: parent,\n        originForSending: event.origin === 'null' ? '*' : event.origin,\n        originForReceiving: event.origin\n      };\n      const callSender = {};\n      const destroyCallReceiver = (0, _connectCallReceiver.default)(info, methods, log);\n      onDestroy(destroyCallReceiver);\n      const destroyCallSender = (0, _connectCallSender.default)(callSender, info, event.data.methodNames, destroy, log);\n      onDestroy(destroyCallSender);\n      clearTimeout(connectionTimeoutId);\n      resolveConnectionPromise(callSender);\n    };\n\n    child.addEventListener(_constants.MESSAGE, handleMessageEvent);\n    onDestroy(() => {\n      child.removeEventListener(_constants.MESSAGE, handleMessageEvent);\n      const error = new Error('Connection destroyed');\n      error.code = _errorCodes.ERR_CONNECTION_DESTROYED;\n      reject(error);\n    });\n    log('Child: Sending handshake');\n    parent.postMessage({\n      penpal: _constants.HANDSHAKE,\n      methodNames: Object.keys(methods)\n    }, parentOrigin);\n  });\n  return {\n    promise,\n    destroy\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;", "import connectToParent from 'penpal/lib/connectToParent';\nimport type { AssetSourcesHook } from './hooks/assetSources';\nimport type { BuildItemPresentationInfoHook } from './hooks/buildItemPresentationInfo';\nimport type { ContentAreaSidebarItemsHook } from './hooks/contentAreaSidebarItems';\nimport type { CustomBlockStylesForStructuredTextFieldHook } from './hooks/customBlockStylesForStructuredTextField';\nimport type { CustomMarksForStructuredTextFieldHook } from './hooks/customMarksForStructuredTextField';\nimport type { ExecuteFieldDropdownActionHook } from './hooks/executeFieldDropdownAction';\nimport type { ExecuteItemFormDropdownActionHook } from './hooks/executeItemFormDropdownAction';\nimport type { ExecuteItemsDropdownActionHook } from './hooks/executeItemsDropdownAction';\nimport type { ExecuteSchemaItemTypeDropdownActionHook } from './hooks/executeSchemaItemTypeDropdownAction';\nimport type { ExecuteUploadsDropdownActionHook } from './hooks/executeUploadsDropdownAction';\nimport type { FieldDropdownActionsHook } from './hooks/fieldDropdownActions';\nimport type { InitialLocationQueryForItemSelectorHook } from './hooks/initialLocationQueryForItemSelector';\nimport type { ItemCollectionOutletsHook } from './hooks/itemCollectionOutlets';\nimport type { ItemFormDropdownActionsHook } from './hooks/itemFormDropdownActions';\nimport type { ItemFormOutletsHook } from './hooks/itemFormOutlets';\nimport type { ItemFormSidebarPanelsHook } from './hooks/itemFormSidebarPanels';\nimport type { ItemFormSidebarsHook } from './hooks/itemFormSidebars';\nimport type { ItemsDropdownActionsHook } from './hooks/itemsDropdownActions';\nimport type { MainNavigationTabsHook } from './hooks/mainNavigationTabs';\nimport type { ManualFieldExtensionsHook } from './hooks/manualFieldExtensions';\nimport type { OnBeforeItemUpsertHook } from './hooks/onBeforeItemUpsert';\nimport type { OnBeforeItemsDestroyHook } from './hooks/onBeforeItemsDestroy';\nimport type { OnBeforeItemsPublishHook } from './hooks/onBeforeItemsPublish';\nimport type { OnBeforeItemsUnpublishHook } from './hooks/onBeforeItemsUnpublish';\nimport type { OnBootHook } from './hooks/onBoot';\nimport type { OverrideFieldExtensionsHook } from './hooks/overrideFieldExtensions';\nimport {\n  RenderAssetSourceHook,\n  renderAssetSourceBootstrapper,\n} from './hooks/renderAssetSource';\nimport {\n  RenderConfigScreenHook,\n  renderConfigScreenBootstrapper,\n} from './hooks/renderConfigScreen';\nimport {\n  RenderFieldExtensionHook,\n  renderFieldExtensionBootstrapper,\n} from './hooks/renderFieldExtension';\nimport {\n  RenderItemCollectionOutletHook,\n  renderItemCollectionOutletBootstrapper,\n} from './hooks/renderItemCollectionOutlet';\nimport {\n  RenderItemFormOutletHook,\n  renderItemFormOutletBootstrapper,\n} from './hooks/renderItemFormOutlet';\nimport {\n  RenderItemFormSidebarHook,\n  renderItemFormSidebarBootstrapper,\n} from './hooks/renderItemFormSidebar';\nimport {\n  RenderItemFormSidebarPanelHook,\n  renderItemFormSidebarPanelBootstrapper,\n} from './hooks/renderItemFormSidebarPanel';\nimport {\n  RenderManualFieldExtensionConfigScreenHook,\n  renderManualFieldExtensionConfigScreenBootstrapper,\n} from './hooks/renderManualFieldExtensionConfigScreen';\nimport { RenderModalHook, renderModalBootstrapper } from './hooks/renderModal';\nimport { RenderPageHook, renderPageBootstrapper } from './hooks/renderPage';\nimport {\n  RenderUploadSidebarHook,\n  renderUploadSidebarBootstrapper,\n} from './hooks/renderUploadSidebar';\nimport {\n  RenderUploadSidebarPanelHook,\n  renderUploadSidebarPanelBootstrapper,\n} from './hooks/renderUploadSidebarPanel';\nimport type { SchemaItemTypeDropdownActionsHook } from './hooks/schemaItemTypeDropdownActions';\nimport type { SettingsAreaSidebarItemGroupsHook } from './hooks/settingsAreaSidebarItemGroups';\nimport { UploadSidebarPanelsHook } from './hooks/uploadSidebarPanels';\nimport { UploadSidebarsHook } from './hooks/uploadSidebars';\nimport type { UploadsDropdownActionsHook } from './hooks/uploadsDropdownActions';\nimport type { ValidateManualFieldExtensionParametersHook } from './hooks/validateManualFieldExtensionParameters';\nimport {\n  Bootstrapper,\n  ExtractRenderHooks,\n  fromOneFieldIntoMultipleAndResultsById,\n  omit,\n} from './utils';\n\n/** The full options you can pass to the `connect` function */\nexport type FullConnectParameters = AssetSourcesHook &\n  BuildItemPresentationInfoHook &\n  ContentAreaSidebarItemsHook &\n  CustomBlockStylesForStructuredTextFieldHook &\n  CustomMarksForStructuredTextFieldHook &\n  ExecuteFieldDropdownActionHook &\n  ExecuteItemFormDropdownActionHook &\n  ExecuteItemsDropdownActionHook &\n  ExecuteSchemaItemTypeDropdownActionHook &\n  ExecuteUploadsDropdownActionHook &\n  FieldDropdownActionsHook &\n  InitialLocationQueryForItemSelectorHook &\n  ItemCollectionOutletsHook &\n  ItemFormDropdownActionsHook &\n  ItemFormOutletsHook &\n  ItemFormSidebarPanelsHook &\n  ItemFormSidebarsHook &\n  ItemsDropdownActionsHook &\n  MainNavigationTabsHook &\n  ManualFieldExtensionsHook &\n  OnBeforeItemsDestroyHook &\n  OnBeforeItemsPublishHook &\n  OnBeforeItemsUnpublishHook &\n  OnBeforeItemUpsertHook &\n  OnBootHook &\n  OverrideFieldExtensionsHook &\n  RenderAssetSourceHook &\n  RenderConfigScreenHook &\n  RenderFieldExtensionHook &\n  RenderItemCollectionOutletHook &\n  RenderItemFormOutletHook &\n  RenderItemFormSidebarHook &\n  RenderItemFormSidebarPanelHook &\n  RenderManualFieldExtensionConfigScreenHook &\n  RenderModalHook &\n  RenderPageHook &\n  RenderUploadSidebarHook &\n  RenderUploadSidebarPanelHook &\n  SchemaItemTypeDropdownActionsHook &\n  SettingsAreaSidebarItemGroupsHook &\n  UploadsDropdownActionsHook &\n  UploadSidebarPanelsHook &\n  UploadSidebarsHook &\n  ValidateManualFieldExtensionParametersHook;\n\nexport async function connect(\n  rawConfiguration: Partial<FullConnectParameters> = {},\n): Promise<void> {\n  let onChangeListener: ((newSettings: any) => void) | null = null;\n\n  let callMethodMergingBootCtxExecutor:\n    | ((\n        methodName: string,\n        methodArgs: unknown[],\n        extraCtxProperties: Record<string, unknown>,\n        extraCtxMethodKeys: string[],\n        methodCallId: string,\n      ) => void)\n    | null = null;\n\n  const configuration = {\n    ...rawConfiguration,\n    overrideFieldExtensions: fromOneFieldIntoMultipleAndResultsById(\n      rawConfiguration.overrideFieldExtensions,\n    ),\n    customMarksForStructuredTextField: fromOneFieldIntoMultipleAndResultsById(\n      rawConfiguration.customMarksForStructuredTextField,\n    ),\n    customBlockStylesForStructuredTextField:\n      fromOneFieldIntoMultipleAndResultsById(\n        rawConfiguration.customBlockStylesForStructuredTextField,\n      ),\n  };\n\n  const penpalConnection = connectToParent({\n    methods: {\n      sdkVersion: () => '0.3.0',\n      implementedHooks: () =>\n        Object.fromEntries(\n          Object.keys(rawConfiguration).map((hook) => {\n            return [hook, true];\n          }),\n        ),\n      // What hooks should we expose via penpal as direct callable methods by CMS?\n      // * all renderXXX hooks will be called via onChange() -> bootstrapper, so not needed\n      // * all non-render hooks ending with ctx will be called via callMethodMergingBootCtx(), so not needed\n      // * only the non-render hooks NOT ending with ctx need to be directly called by the CMS!\n      // In the following lines we're exposing more than needed (all non-render hooks).. but it's OK.\n      ...Object.fromEntries(\n        Object.entries(configuration).filter(\n          ([key]) => !key.startsWith('render'),\n        ),\n      ),\n      onChange(newSettings: unknown) {\n        if (onChangeListener) {\n          onChangeListener(newSettings);\n        }\n      },\n      callMethodMergingBootCtx(\n        methodName: string,\n        methodArgs: unknown[],\n        extraCtxProperties: Record<string, unknown>,\n        extraCtxMethodKeys: string[],\n        methodCallId: string,\n      ) {\n        if (!callMethodMergingBootCtxExecutor) {\n          return null;\n        }\n        return callMethodMergingBootCtxExecutor(\n          methodName,\n          methodArgs,\n          extraCtxProperties,\n          extraCtxMethodKeys,\n          methodCallId,\n        );\n      },\n    },\n  });\n\n  const methods = await penpalConnection.promise;\n  const initialProperties = await methods.getSettings();\n\n  if (initialProperties.mode === 'onBoot') {\n    let currentProperties = initialProperties;\n\n    onChangeListener = (newProperties) => {\n      currentProperties = newProperties;\n    };\n\n    callMethodMergingBootCtxExecutor = (\n      methodName: string,\n      methodArgs: unknown[],\n      extraCtxProperties: Record<string, unknown>,\n      extraCtxMethodKeys: string[],\n      methodCallId: string,\n    ) => {\n      if (!(methodName in configuration)) {\n        return undefined;\n      }\n\n      return (configuration as any)[methodName](...methodArgs, {\n        ...omit(methods, ['getSettings', 'setHeight']),\n        ...omit(currentProperties, ['mode', 'bodyPadding']),\n        ...Object.fromEntries(\n          extraCtxMethodKeys.map((methodName) => [\n            methodName,\n            function createAdditionalMethodProxy(...args: any[]) {\n              return (methods as any).callAdditionalCtxMethod(\n                methodCallId,\n                methodName,\n                args,\n              );\n            },\n          ]),\n        ),\n        ...extraCtxProperties,\n      });\n    };\n\n    if (configuration.onBoot) {\n      configuration.onBoot({\n        ...methods,\n        ...currentProperties,\n      });\n    }\n  }\n\n  type EnsureAllBootstrappers = {\n    [K in keyof ExtractRenderHooks<FullConnectParameters>]: Bootstrapper<K>;\n  };\n\n  const availableBootstrappers: EnsureAllBootstrappers = {\n    renderAssetSource: renderAssetSourceBootstrapper,\n    renderConfigScreen: renderConfigScreenBootstrapper,\n    renderFieldExtension: renderFieldExtensionBootstrapper,\n    renderItemCollectionOutlet: renderItemCollectionOutletBootstrapper,\n    renderItemFormOutlet: renderItemFormOutletBootstrapper,\n    renderItemFormSidebar: renderItemFormSidebarBootstrapper,\n    renderItemFormSidebarPanel: renderItemFormSidebarPanelBootstrapper,\n    renderManualFieldExtensionConfigScreen:\n      renderManualFieldExtensionConfigScreenBootstrapper,\n    renderModal: renderModalBootstrapper,\n    renderPage: renderPageBootstrapper,\n    renderUploadSidebar: renderUploadSidebarBootstrapper,\n    renderUploadSidebarPanel: renderUploadSidebarPanelBootstrapper,\n  };\n\n  for (const bootstrapper of Object.values(availableBootstrappers)) {\n    const result = bootstrapper(configuration, methods, initialProperties);\n\n    if (result) {\n      onChangeListener = result;\n      break;\n    }\n  }\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { FullConnectParameters } from './connect';\nimport { Ctx } from './ctx/base';\nimport { SizingUtilities } from './ctx/commonExtras/sizing';\nimport {\n  ImposedSizePluginFrameCtx,\n  SelfResizingPluginFrameCtx,\n} from './ctx/pluginFrame';\n\ntype Field = SchemaTypes.Field;\ntype ItemType = SchemaTypes.ItemType;\n\nexport type AwaitedReturnType<T extends (...args: any) => any> = Awaited<\n  ReturnType<T>\n>;\n\ntype ModeForPluginFrameCtx<T> = T extends ImposedSizePluginFrameCtx<\n  infer Mode,\n  any,\n  any\n>\n  ? Mode\n  : never;\n\nexport type MaybePromise<T> = T | Promise<T>;\n\nexport function pick<T extends object, K extends keyof T>(\n  obj: T,\n  keys: readonly K[],\n): Pick<T, K> {\n  const result = {} as Pick<T, K>;\n  for (const key of keys) {\n    if (key in obj) {\n      result[key] = obj[key];\n    }\n  }\n  return result;\n}\n\nexport function omit<T extends object, K extends keyof T>(\n  obj: T,\n  keys: readonly K[],\n): Omit<T, K> {\n  const result = { ...obj } as T;\n  for (const key of keys) {\n    delete result[key];\n  }\n  return result as Omit<T, K>;\n}\n\nexport function fromOneFieldIntoMultipleAndResultsById<Result>(\n  fn:\n    | ((\n        field: Field,\n        ctx: Ctx<any, any> & {\n          itemType: ItemType;\n        },\n      ) => Result)\n    | undefined,\n) {\n  return (\n    fields: Field[],\n    ctx: Ctx<any, any>,\n  ): Record<string, Result> | undefined => {\n    if (!fn) {\n      return undefined;\n    }\n\n    const result: Record<string, Result> = {};\n\n    for (const field of fields) {\n      const itemType = ctx.itemTypes[\n        field.relationships.item_type.data.id\n      ] as ItemType;\n      result[field.id] = fn(field, { ...ctx, itemType });\n    }\n\n    return result;\n  };\n}\n\nexport type Methods = {\n  getSettings: () => Promise<Properties>;\n};\n\nexport type Properties<Mode extends string = string> = { mode: Mode };\n\ntype OnChangeListenerFn = (newSettings: any) => void;\n\nexport type ExtractRenderHooks<T extends Record<string, unknown>> = {\n  [K in keyof T as K extends `render${string}` ? K : never]: T[K];\n};\n\nexport type Bootstrapper<\n  H extends keyof ExtractRenderHooks<FullConnectParameters>,\n> = {\n  (\n    connectConfiguration: Partial<ExtractRenderHooks<FullConnectParameters>>,\n    methods: Methods,\n    initialProperties: Properties,\n  ): undefined | OnChangeListenerFn;\n  mode: H;\n};\n\nexport function containedRenderModeBootstrapper<\n  Ctx extends SelfResizingPluginFrameCtx<any, {}, {}>,\n>(\n  mode: ModeForPluginFrameCtx<Ctx>,\n  callConfigurationMethod: (\n    connectConfiguration: Partial<ExtractRenderHooks<FullConnectParameters>>,\n    ctx: Ctx,\n  ) => void,\n): Bootstrapper<Ctx['mode']> {\n  const bootstrapper: Bootstrapper<Ctx['mode']> = (\n    connectConfiguration,\n    methods,\n    initialProperties,\n  ) => {\n    if (initialProperties.mode !== mode) {\n      return undefined;\n    }\n\n    const sizingUtilities = buildSizingUtilities(methods);\n\n    const render = (properties: Record<string, unknown>) => {\n      callConfigurationMethod(connectConfiguration, {\n        ...methods,\n        ...properties,\n        ...sizingUtilities,\n      } as unknown as Ctx);\n    };\n\n    render(initialProperties);\n\n    return render;\n  };\n\n  bootstrapper.mode = mode;\n\n  return bootstrapper;\n}\n\nexport function fullScreenRenderModeBootstrapper<\n  Ctx extends ImposedSizePluginFrameCtx<any, {}, {}>,\n>(\n  mode: ModeForPluginFrameCtx<Ctx>,\n  callConfigurationMethod: (\n    connectConfiguration: Partial<ExtractRenderHooks<FullConnectParameters>>,\n    ctx: Ctx,\n  ) => void,\n): Bootstrapper<Ctx['mode']> {\n  const bootstrapper: Bootstrapper<Ctx['mode']> = (\n    connectConfiguration,\n    methods,\n    initialProperties,\n  ) => {\n    if (initialProperties.mode !== mode) {\n      return undefined;\n    }\n\n    const render = (properties: Record<string, unknown>) => {\n      callConfigurationMethod(connectConfiguration, {\n        ...methods,\n        ...properties,\n      } as unknown as Ctx);\n    };\n\n    render(initialProperties);\n\n    return render;\n  };\n\n  bootstrapper.mode = mode;\n\n  return bootstrapper;\n}\n\nfunction getMaxScrollHeight() {\n  const elements = document.querySelectorAll('body *');\n  let maxVal = 0;\n  for (let i = 0; i < elements.length; i++) {\n    maxVal = Math.max(elements[i].getBoundingClientRect().bottom, maxVal);\n  }\n  return maxVal;\n}\n\nconst buildSizingUtilities = (\n  methods: SelfResizingPluginFrameCtx<any, any, any>,\n): SizingUtilities => {\n  let oldHeight: null | number = null;\n\n  const updateHeight = (height?: number) => {\n    const realHeight =\n      height === undefined\n        ? Math.max(\n            document.body.scrollHeight,\n            document.body.offsetHeight,\n            document.documentElement.getBoundingClientRect().height,\n            getMaxScrollHeight(),\n          )\n        : height;\n\n    if (realHeight !== oldHeight) {\n      methods.setHeight(realHeight);\n      oldHeight = realHeight;\n    }\n  };\n\n  let resizeObserver: ResizeObserver | null = null;\n  let mutationObserver: MutationObserver | null = null;\n  const onMutation = () => updateHeight();\n\n  const startAutoResizer = () => {\n    updateHeight();\n\n    if (!resizeObserver) {\n      resizeObserver = new ResizeObserver(onMutation);\n      resizeObserver.observe(document.documentElement);\n    }\n\n    if (!mutationObserver) {\n      mutationObserver = new MutationObserver(onMutation);\n\n      mutationObserver.observe(window.document.body, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        characterData: true,\n      });\n    }\n  };\n\n  const stopAutoResizer = () => {\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      resizeObserver = null;\n    }\n\n    if (mutationObserver) {\n      mutationObserver.disconnect();\n      mutationObserver = null;\n    }\n  };\n\n  const isAutoResizerActive = () => Boolean(resizeObserver);\n\n  return {\n    updateHeight,\n    startAutoResizer,\n    stopAutoResizer,\n    isAutoResizerActive,\n  };\n};\n", "import { SelfResizingPluginFrameCtx } from '../ctx/pluginFrame';\nimport { containedRenderModeBootstrapper } from '../utils';\n\nexport type RenderAssetSourceHook = {\n  /**\n   * This function will be called when the user selects one of the plugin's\n   * asset sources to upload a new media file.\n   *\n   * @tag assetSources\n   */\n  renderAssetSource: (assetSourceId: string, ctx: RenderAssetSourceCtx) => void;\n};\n\nexport type RenderAssetSourceCtx = SelfResizingPluginFrameCtx<\n  'renderAssetSource',\n  {\n    /** The ID of the assetSource that needs to be rendered */\n    assetSourceId: string;\n  },\n  {\n    /**\n     * Function to be called when the user selects the asset: it will trigger the\n     * creation of a new `Upload` that will be added in the Media Area.\n     *\n     * @example\n     *\n     * ```js\n     * await ctx.select({\n     *   resource: {\n     *     url: 'https://images.unsplash.com/photo-1416339306562-f3d12fefd36f',\n     *     filename: 'man-drinking-coffee.jpg',\n     *   },\n     *   copyright: 'Royalty free (Unsplash)',\n     *   author: 'Jeff Sheldon',\n     *   notes: 'A man drinking a coffee',\n     *   tags: ['man', 'coffee'],\n     * });\n     * ```\n     */\n    select: (newUpload: NewUpload) => void;\n  }\n>;\n\nexport type NewUploadResourceAsUrl = {\n  /**\n   * URL for the resource. The URL must respond with a\n   * `Access-Control-Allow-Origin` header — for instance `*`, which will allow\n   * all hosts — allowing the image to be read by DatoCMS\n   */\n  url: string;\n  /** Any additional headers to pass when making the request to the URL */\n  headers?: Record<string, string>;\n  /**\n   * Optional filename to be used to generate the final DatoCMS URL. If not\n   * passed, the URL will be used\n   */\n  filename?: string;\n};\n\nexport type NewUploadResourceAsBase64 = {\n  /**\n   * Base64 encoded data URI for the resource.\n   *\n   * Format:\n   *\n   * `data:[<mime type>][;charset=<charset>];base64,<encoded data>`\n   */\n  base64: string;\n  /** Filename to be used to generate the final DatoCMS URL */\n  filename: string;\n};\n\nexport type NewUpload = {\n  /** The actual resource that will be uploaded */\n  resource: NewUploadResourceAsUrl | NewUploadResourceAsBase64;\n  /** Copyright to apply to the asset */\n  copyright?: string;\n  /** Author to apply to the asset */\n  author?: string;\n  /** Notes to apply to the asset */\n  notes?: string;\n  /** Tags to apply to the asset */\n  tags?: string[];\n  /**\n   * An hash containing, for each locale of the project, the default metadata to\n   * apply to the asset\n   */\n  default_field_metadata?: {\n    [k: string]: {\n      /** Alternate text for the asset */\n      alt: string | null;\n      /** Title for the asset */\n      title: string | null;\n      /** Object with arbitrary metadata */\n      custom_data: {\n        [k: string]: unknown;\n      };\n      /** Focal point (only for image assets) */\n      focal_point?: {\n        /** Horizontal position expressed as float between 0 and 1 */\n        x: number;\n        /** Vertical position expressed as float between 0 and 1 */\n        y: number;\n      } | null;\n    };\n  };\n};\n\nexport const renderAssetSourceBootstrapper =\n  containedRenderModeBootstrapper<RenderAssetSourceCtx>(\n    'renderAssetSource',\n    (configuration, ctx) => {\n      if (!configuration.renderAssetSource) {\n        return;\n      }\n\n      configuration.renderAssetSource(ctx.assetSourceId, ctx);\n    },\n  );\n", "import { SelfResizingPluginFrameCtx } from '../ctx/pluginFrame';\nimport { containedRenderModeBootstrapper } from '../utils';\n\nexport type RenderConfigScreenHook = {\n  /**\n   * This function will be called when the plugin needs to render the plugin's\n   * configuration form\n   *\n   * @tag configScreen\n   */\n  renderConfigScreen: (ctx: RenderConfigScreenCtx) => void;\n};\n\nexport type RenderConfigScreenCtx =\n  SelfResizingPluginFrameCtx<'renderConfigScreen'>;\n\nexport const renderConfigScreenBootstrapper =\n  containedRenderModeBootstrapper<RenderConfigScreenCtx>(\n    'renderConfigScreen',\n    (configuration, ctx) => {\n      if (!configuration.renderConfigScreen) {\n        return;\n      }\n\n      configuration.renderConfigScreen(ctx);\n    },\n  );\n", "import { FieldAdditionalProperties } from '../ctx/commonExtras/field';\nimport {\n  ItemFormAdditionalMethods,\n  ItemFormAdditionalProperties,\n} from '../ctx/commonExtras/itemForm';\n\nimport { SelfResizingPluginFrameCtx } from '../ctx/pluginFrame';\nimport { containedRenderModeBootstrapper } from '../utils';\n\nexport type RenderFieldExtensionHook = {\n  /**\n   * This function will be called when the plugin needs to render a field\n   * extension (see the `manualFieldExtensions` and `overrideFieldExtensions`\n   * functions)\n   *\n   * @tag forcedFieldExtensions\n   */\n  renderFieldExtension: (\n    fieldExtensionId: string,\n    ctx: RenderFieldExtensionCtx,\n  ) => void;\n};\n\nexport type RenderFieldExtensionCtx = SelfResizingPluginFrameCtx<\n  'renderFieldExtension',\n  ItemFormAdditionalProperties &\n    FieldAdditionalProperties & {\n      /** The ID of the field extension that needs to be rendered */\n      fieldExtensionId: string;\n      /** The arbitrary `parameters` of the field extension */\n      parameters: Record<string, unknown>;\n    },\n  ItemFormAdditionalMethods\n>;\n\nexport const renderFieldExtensionBootstrapper =\n  containedRenderModeBootstrapper<RenderFieldExtensionCtx>(\n    'renderFieldExtension',\n    (configuration, ctx) => {\n      if (!configuration.renderFieldExtension) {\n        return;\n      }\n\n      configuration.renderFieldExtension(ctx.fieldExtensionId, ctx);\n    },\n  );\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { SelfResizingPluginFrameCtx } from '../ctx/pluginFrame';\nimport { containedRenderModeBootstrapper } from '../utils';\n\ntype ItemType = SchemaTypes.ItemType;\n\nexport type RenderItemCollectionOutletHook = {\n  /**\n   * This function will be called when the plugin needs to render an outlet\n   * defined by the `itemCollectionOutlets()` hook.\n   *\n   * @tag outlets\n   */\n  renderItemCollectionOutlet: (\n    itemCollectionOutletId: string,\n    ctx: RenderItemCollectionOutletCtx,\n  ) => void;\n};\n\nexport type RenderItemCollectionOutletCtx = SelfResizingPluginFrameCtx<\n  'renderItemCollectionOutlet',\n  {\n    /** The ID of the outlet that needs to be rendered */\n    itemCollectionOutletId: string;\n    /** The model for which the outlet is being rendered */\n    itemType: ItemType;\n  }\n>;\n\nexport const renderItemCollectionOutletBootstrapper =\n  containedRenderModeBootstrapper<RenderItemCollectionOutletCtx>(\n    'renderItemCollectionOutlet',\n    (configuration, ctx) => {\n      if (!configuration.renderItemCollectionOutlet) {\n        return;\n      }\n\n      configuration.renderItemCollectionOutlet(ctx.itemCollectionOutletId, ctx);\n    },\n  );\n", "import {\n  ItemFormAdditionalMethods,\n  ItemFormAdditionalProperties,\n} from '../ctx/commonExtras/itemForm';\nimport { SelfResizingPluginFrameCtx } from '../ctx/pluginFrame';\nimport { containedRenderModeBootstrapper } from '../utils';\n\nexport type RenderItemFormOutletHook = {\n  /**\n   * This function will be called when the plugin needs to render an outlet\n   * defined by the `itemFormOutlets()` hook.\n   *\n   * @tag outlets\n   */\n  renderItemFormOutlet: (\n    itemFormOutletId: string,\n    ctx: RenderItemFormOutletCtx,\n  ) => void;\n};\n\nexport type RenderItemFormOutletCtx = SelfResizingPluginFrameCtx<\n  'renderItemFormOutlet',\n  ItemFormAdditionalProperties & {\n    /** The ID of the outlet that needs to be rendered */\n    itemFormOutletId: string;\n  },\n  ItemFormAdditionalMethods\n>;\n\nexport const renderItemFormOutletBootstrapper =\n  containedRenderModeBootstrapper<RenderItemFormOutletCtx>(\n    'renderItemFormOutlet',\n    (configuration, ctx) => {\n      if (!configuration.renderItemFormOutlet) {\n        return;\n      }\n\n      configuration.renderItemFormOutlet(ctx.itemFormOutletId, ctx);\n    },\n  );\n", "import {\n  ItemFormAdditionalMethods,\n  ItemFormAdditionalProperties,\n} from '../ctx/commonExtras/itemForm';\nimport { ImposedSizePluginFrameCtx } from '../ctx/pluginFrame';\nimport { fullScreenRenderModeBootstrapper } from '../utils';\n\nexport type RenderItemFormSidebarHook = {\n  /**\n   * This function will be called when the plugin needs to render a sidebar (see\n   * the `itemFormSidebars` hook)\n   *\n   * @tag sidebarPanels\n   */\n  renderItemFormSidebar: (\n    sidebarId: string,\n    ctx: RenderItemFormSidebarCtx,\n  ) => void;\n};\n\nexport type RenderItemFormSidebarCtx = ImposedSizePluginFrameCtx<\n  'renderItemFormSidebar',\n  ItemFormAdditionalProperties & {\n    /** The ID of the sidebar that needs to be rendered */\n    sidebarId: string;\n    /**\n     * The arbitrary `parameters` of the declared in the `itemFormSidebars`\n     * function\n     */\n    parameters: Record<string, unknown>;\n  },\n  ItemFormAdditionalMethods\n>;\n\nexport const renderItemFormSidebarBootstrapper =\n  fullScreenRenderModeBootstrapper<RenderItemFormSidebarCtx>(\n    'renderItemFormSidebar',\n    (configuration, ctx) => {\n      if (!configuration.renderItemFormSidebar) {\n        return;\n      }\n\n      configuration.renderItemFormSidebar(ctx.sidebarId, ctx);\n    },\n  );\n", "import {\n  ItemFormAdditionalMethods,\n  ItemFormAdditionalProperties,\n} from '../ctx/commonExtras/itemForm';\nimport { SelfResizingPluginFrameCtx } from '../ctx/pluginFrame';\nimport { containedRenderModeBootstrapper } from '../utils';\n\nexport type RenderItemFormSidebarPanelHook = {\n  /**\n   * This function will be called when the plugin needs to render a sidebar panel\n   * (see the `itemFormSidebarPanels` hook)\n   *\n   * @tag sidebarPanels\n   */\n  renderItemFormSidebarPanel: (\n    sidebarPaneId: string,\n    ctx: RenderItemFormSidebarPanelCtx,\n  ) => void;\n};\n\nexport type RenderItemFormSidebarPanelCtx = SelfResizingPluginFrameCtx<\n  'renderItemFormSidebarPanel',\n  ItemFormAdditionalProperties & {\n    /** The ID of the sidebar panel that needs to be rendered */\n    sidebarPaneId: string;\n\n    /**\n     * The arbitrary `parameters` of the panel declared in the\n     * `itemFormSidebarPanels` function\n     */\n    parameters: Record<string, unknown>;\n  },\n  ItemFormAdditionalMethods\n>;\n\nexport const renderItemFormSidebarPanelBootstrapper =\n  containedRenderModeBootstrapper<RenderItemFormSidebarPanelCtx>(\n    'renderItemFormSidebarPanel',\n    (configuration, ctx) => {\n      if (!configuration.renderItemFormSidebarPanel) {\n        return;\n      }\n\n      configuration.renderItemFormSidebarPanel(ctx.sidebarPaneId, ctx);\n    },\n  );\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { SelfResizingPluginFrameCtx } from '../ctx/pluginFrame';\nimport { containedRenderModeBootstrapper } from '../utils';\n\ntype Field = SchemaTypes.Field;\ntype ItemType = SchemaTypes.ItemType;\n\nexport type RenderManualFieldExtensionConfigScreenHook = {\n  renderManualFieldExtensionConfigScreen: (\n    fieldExtensionId: string,\n    ctx: RenderManualFieldExtensionConfigScreenCtx,\n  ) => void;\n};\n\nexport type RenderManualFieldExtensionConfigScreenCtx =\n  SelfResizingPluginFrameCtx<\n    'renderManualFieldExtensionConfigScreen',\n    {\n      /**\n       * The ID of the field extension for which we need to render the parameters\n       * form\n       */\n      fieldExtensionId: string;\n      /**\n       * The current value of the parameters (you can change the value with the\n       * `setParameters` hook)\n       */\n      parameters: Record<string, unknown>;\n      /**\n       * The current validation errors for the parameters (you can set them\n       * implementing the `validateManualFieldExtensionParameters` hook)\n       */\n      errors: Record<string, unknown>;\n\n      /** The field entity that is being edited in the form */\n      pendingField: PendingField;\n\n      /** The model for the field being edited */\n      itemType: ItemType;\n    },\n    {\n      /**\n       * Sets a new value for the parameters\n       *\n       * @example\n       *\n       * ```js\n       * await ctx.setParameters({ color: '#ff0000' });\n       * ```\n       */\n      setParameters: (params: Record<string, unknown>) => Promise<void>;\n    }\n  >;\n\nexport type PendingField = {\n  id?: string;\n  type: 'field';\n  attributes: {\n    api_key: Field['attributes']['api_key'];\n    appearance: Field['attributes']['appearance'];\n    default_value: Field['attributes']['default_value'];\n    field_type: Field['attributes']['field_type'];\n    hint: Field['attributes']['hint'];\n    label: Field['attributes']['label'];\n    localized: Field['attributes']['localized'];\n    validators: Field['attributes']['validators'];\n  };\n};\n\nexport const renderManualFieldExtensionConfigScreenBootstrapper =\n  containedRenderModeBootstrapper<RenderManualFieldExtensionConfigScreenCtx>(\n    'renderManualFieldExtensionConfigScreen',\n    (configuration, ctx) => {\n      if (!configuration.renderManualFieldExtensionConfigScreen) {\n        return;\n      }\n\n      configuration.renderManualFieldExtensionConfigScreen(\n        ctx.fieldExtensionId,\n        ctx,\n      );\n    },\n  );\n", "import { SelfResizingPluginFrameCtx } from '../ctx/pluginFrame';\nimport { containedRenderModeBootstrapper } from '../utils';\n\nexport type RenderModalHook = {\n  /**\n   * This function will be called when the plugin requested to open a modal (see\n   * the `openModal` hook)\n   *\n   * @tag modals\n   */\n  renderModal: (modalId: string, ctx: RenderModalCtx) => void;\n};\nexport type RenderModalCtx = SelfResizingPluginFrameCtx<\n  'renderModal',\n  {\n    /** The ID of the modal that needs to be rendered */\n    modalId: string;\n    /**\n     * The arbitrary `parameters` of the modal declared in the `openModal`\n     * function\n     */\n    parameters: Record<string, unknown>;\n  },\n  {\n    /**\n     * A function to be called by the plugin to close the modal. The `openModal`\n     * call will be resolved with the passed return value\n     *\n     * @example\n     *\n     * ```js\n     * const returnValue = prompt(\n     *   'Please specify the value to return to the caller:',\n     *   'success',\n     * );\n     *\n     * await ctx.resolve(returnValue);\n     * ```\n     */\n    resolve: (returnValue: unknown) => Promise<void>;\n  }\n>;\n\nexport const renderModalBootstrapper =\n  containedRenderModeBootstrapper<RenderModalCtx>(\n    'renderModal',\n    (configuration, ctx) => {\n      if (!configuration.renderModal) {\n        return;\n      }\n\n      configuration.renderModal(ctx.modalId, ctx);\n    },\n  );\n", "import { ImposedSizePluginFrameCtx } from '../ctx/pluginFrame';\nimport { fullScreenRenderModeBootstrapper } from '../utils';\n\nexport type RenderPageHook = {\n  /**\n   * This function will be called when the plugin needs to render a specific\n   * page (see the `mainNavigationTabs`, `settingsAreaSidebarItemGroups` and\n   * `contentAreaSidebarItems` functions)\n   *\n   * @tag pages\n   */\n  renderPage: (pageId: string, ctx: RenderPageCtx) => void;\n};\n\nexport type RenderPageCtx = ImposedSizePluginFrameCtx<\n  'renderPage',\n  {\n    /** The ID of the page that needs to be rendered */\n    pageId: string;\n\n    /** Current page location */\n    location: {\n      pathname: string;\n      search: string;\n      hash: string;\n    };\n  }\n>;\n\nexport const renderPageBootstrapper =\n  fullScreenRenderModeBootstrapper<RenderPageCtx>(\n    'renderPage',\n    (configuration, ctx) => {\n      if (!configuration.renderPage) {\n        return;\n      }\n\n      configuration.renderPage(ctx.pageId, ctx);\n    },\n  );\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { ImposedSizePluginFrameCtx } from '../ctx/pluginFrame';\nimport { fullScreenRenderModeBootstrapper } from '../utils';\n\ntype Upload = SchemaTypes.Upload;\n\nexport type RenderUploadSidebarHook = {\n  /**\n   * This function will be called when the plugin needs to render a sidebar (see\n   * the `uploadSidebars` hook)\n   *\n   * @tag sidebarPanels\n   */\n  renderUploadSidebar: (sidebarId: string, ctx: RenderUploadSidebarCtx) => void;\n};\n\nexport type RenderUploadSidebarCtx = ImposedSizePluginFrameCtx<\n  'renderUploadSidebar',\n  {\n    /** The ID of the sidebar that needs to be rendered */\n    sidebarId: string;\n\n    /**\n     * The arbitrary `parameters` of the declared in the `uploadSidebars`\n     * function\n     */\n    parameters: Record<string, unknown>;\n\n    /** The active asset */\n    upload: Upload;\n  }\n>;\n\nexport const renderUploadSidebarBootstrapper =\n  fullScreenRenderModeBootstrapper<RenderUploadSidebarCtx>(\n    'renderUploadSidebar',\n    (configuration, ctx) => {\n      if (!configuration.renderUploadSidebar) {\n        return;\n      }\n\n      configuration.renderUploadSidebar(ctx.sidebarId, ctx);\n    },\n  );\n", "import { SchemaTypes } from '@datocms/cma-client';\nimport { SelfResizingPluginFrameCtx } from '../ctx/pluginFrame';\nimport { containedRenderModeBootstrapper } from '../utils';\n\ntype Upload = SchemaTypes.Upload;\n\nexport type RenderUploadSidebarPanelHook = {\n  /**\n   * This function will be called when the plugin needs to render a sidebar panel\n   * (see the `uploadSidebarPanels` hook)\n   *\n   * @tag sidebarPanels\n   */\n  renderUploadSidebarPanel: (\n    sidebarPaneId: string,\n    ctx: RenderUploadSidebarPanelCtx,\n  ) => void;\n};\n\nexport type RenderUploadSidebarPanelCtx = SelfResizingPluginFrameCtx<\n  'renderUploadSidebarPanel',\n  {\n    /** The ID of the sidebar panel that needs to be rendered */\n    sidebarPaneId: string;\n\n    /**\n     * The arbitrary `parameters` of the panel declared in the\n     * `uploadSidebarPanels` function\n     */\n    parameters: Record<string, unknown>;\n\n    /** The active asset */\n    upload: Upload;\n  }\n>;\n\nexport const renderUploadSidebarPanelBootstrapper =\n  containedRenderModeBootstrapper<RenderUploadSidebarPanelCtx>(\n    'renderUploadSidebarPanel',\n    (configuration, ctx) => {\n      if (!configuration.renderUploadSidebarPanel) {\n        return;\n      }\n\n      configuration.renderUploadSidebarPanel(ctx.sidebarPaneId, ctx);\n    },\n  );\n", "export function isNullish(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\nexport function isBoolean(value: unknown): value is boolean {\n  return typeof value === 'boolean';\n}\n\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === 'number';\n}\n\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport function isArray<T>(\n  value: unknown,\n  checkItem: (item: unknown) => item is T,\n): value is T[] {\n  return Array.isArray(value) && value.every(checkItem);\n}\n\nexport function isPlacement(value: unknown) {\n  return (\n    isArray(value, isString) &&\n    value.length === 2 &&\n    ['before', 'after'].includes(value[0])\n  );\n}\n", "import { isRecord, isString } from './guardUtils.js';\n\nexport type Icon = AwesomeFontIconIdentifier | SvgDefinition;\n\n/**\n * Defines a custom SVG icon for use in DatoCMS plugins.\n *\n * To create an SVG definition from an existing SVG file:\n * 1. Grab the `viewBox` attribute from your SVG element (e.g., \"0 0 24 24\")\n * 2. Grab everything between the `<svg>` tags as the content (all the paths, circles, etc.)\n *\n * @example\n * ```typescript\n * // From this SVG:\n * // <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n * //   <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n * // </svg>\n *\n * const starIcon: SvgDefinition = {\n *   type: 'svg',\n *   viewBox: '0 0 24 24',\n *   content: '<path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>'\n * };\n * ```\n */\nexport type SvgDefinition = {\n  /** Always set to 'svg' to indicate this is a custom SVG icon */\n  type: 'svg';\n\n  /**\n   * The viewBox attribute from your SVG element (e.g., \"0 0 24 24\").\n   * This defines the coordinate system and aspect ratio of the SVG.\n   */\n  viewBox: string;\n\n  /**\n   * The inner content of your SVG element — everything between the opening and closing <svg> tags.\n   * This includes all paths, circles, rectangles, and other SVG elements that make up your icon.\n   */\n  content: string;\n};\n\nexport function isIcon(value: unknown): value is Icon {\n  return (\n    isString(value) ||\n    (isRecord(value) &&\n      value.type === 'svg' &&\n      isString(value.viewBox) &&\n      isString(value.content))\n  );\n}\n\n/**\n * Font Awesome icon identifier for use in DatoCMS plugins.\n *\n * Use Font Awesome icons for consistent visual styling across the admin interface.\n * This is the recommended approach for most plugin icons, with custom SVGs reserved\n * primarily for brand/company logos where Font Awesome doesn't have an appropriate match.\n */\nexport type AwesomeFontIconIdentifier =\n  | '0'\n  | '00'\n  | '1'\n  | '100'\n  | '2'\n  | '3'\n  | '360-degrees'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'abacus'\n  | 'accent-grave'\n  | 'acorn'\n  | 'ad'\n  | 'add'\n  | 'address-book'\n  | 'address-card'\n  | 'adjust'\n  | 'air-conditioner'\n  | 'air-freshener'\n  | 'airplay'\n  | 'alarm-clock'\n  | 'alarm-exclamation'\n  | 'alarm-plus'\n  | 'alarm-snooze'\n  | 'album-circle-plus'\n  | 'album-circle-user'\n  | 'album-collection-circle-plus'\n  | 'album-collection-circle-user'\n  | 'album-collection'\n  | 'album'\n  | 'alicorn'\n  | 'alien-8bit'\n  | 'alien-monster'\n  | 'alien'\n  | 'align-center'\n  | 'align-justify'\n  | 'align-left'\n  | 'align-right'\n  | 'align-slash'\n  | 'allergies'\n  | 'alt'\n  | 'ambulance'\n  | 'american-sign-language-interpreting'\n  | 'amp-guitar'\n  | 'ampersand'\n  | 'analytics'\n  | 'anchor-circle-check'\n  | 'anchor-circle-exclamation'\n  | 'anchor-circle-xmark'\n  | 'anchor-lock'\n  | 'anchor'\n  | 'angel'\n  | 'angle-90'\n  | 'angle-double-down'\n  | 'angle-double-left'\n  | 'angle-double-right'\n  | 'angle-double-up'\n  | 'angle-down'\n  | 'angle-left'\n  | 'angle-right'\n  | 'angle-up'\n  | 'angle'\n  | 'angles-down'\n  | 'angles-left'\n  | 'angles-right'\n  | 'angles-up'\n  | 'angry'\n  | 'ankh'\n  | 'apartment'\n  | 'aperture'\n  | 'apostrophe'\n  | 'apple-alt'\n  | 'apple-core'\n  | 'apple-crate'\n  | 'apple-whole'\n  | 'archive'\n  | 'archway'\n  | 'area-chart'\n  | 'arrow-alt-circle-down'\n  | 'arrow-alt-circle-left'\n  | 'arrow-alt-circle-right'\n  | 'arrow-alt-circle-up'\n  | 'arrow-alt-down'\n  | 'arrow-alt-from-bottom'\n  | 'arrow-alt-from-left'\n  | 'arrow-alt-from-right'\n  | 'arrow-alt-from-top'\n  | 'arrow-alt-left'\n  | 'arrow-alt-right'\n  | 'arrow-alt-square-down'\n  | 'arrow-alt-square-left'\n  | 'arrow-alt-square-right'\n  | 'arrow-alt-square-up'\n  | 'arrow-alt-to-bottom'\n  | 'arrow-alt-to-left'\n  | 'arrow-alt-to-right'\n  | 'arrow-alt-to-top'\n  | 'arrow-alt-up'\n  | 'arrow-circle-down'\n  | 'arrow-circle-left'\n  | 'arrow-circle-right'\n  | 'arrow-circle-up'\n  | 'arrow-down-1-9'\n  | 'arrow-down-9-1'\n  | 'arrow-down-a-z'\n  | 'arrow-down-arrow-up'\n  | 'arrow-down-big-small'\n  | 'arrow-down-from-dotted-line'\n  | 'arrow-down-from-line'\n  | 'arrow-down-left-and-arrow-up-right-to-center'\n  | 'arrow-down-left'\n  | 'arrow-down-long'\n  | 'arrow-down-right'\n  | 'arrow-down-short-wide'\n  | 'arrow-down-small-big'\n  | 'arrow-down-square-triangle'\n  | 'arrow-down-to-arc'\n  | 'arrow-down-to-bracket'\n  | 'arrow-down-to-dotted-line'\n  | 'arrow-down-to-line'\n  | 'arrow-down-to-square'\n  | 'arrow-down-triangle-square'\n  | 'arrow-down-up-across-line'\n  | 'arrow-down-up-lock'\n  | 'arrow-down-wide-short'\n  | 'arrow-down-z-a'\n  | 'arrow-down'\n  | 'arrow-from-bottom'\n  | 'arrow-from-left'\n  | 'arrow-from-right'\n  | 'arrow-from-top'\n  | 'arrow-left-from-line'\n  | 'arrow-left-long-to-line'\n  | 'arrow-left-long'\n  | 'arrow-left-rotate'\n  | 'arrow-left-to-line'\n  | 'arrow-left'\n  | 'arrow-pointer'\n  | 'arrow-progress'\n  | 'arrow-right-arrow-left'\n  | 'arrow-right-from-arc'\n  | 'arrow-right-from-bracket'\n  | 'arrow-right-from-file'\n  | 'arrow-right-from-line'\n  | 'arrow-right-long-to-line'\n  | 'arrow-right-long'\n  | 'arrow-right-rotate'\n  | 'arrow-right-to-arc'\n  | 'arrow-right-to-bracket'\n  | 'arrow-right-to-city'\n  | 'arrow-right-to-file'\n  | 'arrow-right-to-line'\n  | 'arrow-right'\n  | 'arrow-rotate-back'\n  | 'arrow-rotate-backward'\n  | 'arrow-rotate-forward'\n  | 'arrow-rotate-left'\n  | 'arrow-rotate-right'\n  | 'arrow-square-down'\n  | 'arrow-square-left'\n  | 'arrow-square-right'\n  | 'arrow-square-up'\n  | 'arrow-to-bottom'\n  | 'arrow-to-left'\n  | 'arrow-to-right'\n  | 'arrow-to-top'\n  | 'arrow-trend-down'\n  | 'arrow-trend-up'\n  | 'arrow-turn-down-left'\n  | 'arrow-turn-down-right'\n  | 'arrow-turn-down'\n  | 'arrow-turn-right'\n  | 'arrow-turn-up'\n  | 'arrow-up-1-9'\n  | 'arrow-up-9-1'\n  | 'arrow-up-a-z'\n  | 'arrow-up-arrow-down'\n  | 'arrow-up-big-small'\n  | 'arrow-up-from-arc'\n  | 'arrow-up-from-bracket'\n  | 'arrow-up-from-dotted-line'\n  | 'arrow-up-from-ground-water'\n  | 'arrow-up-from-line'\n  | 'arrow-up-from-square'\n  | 'arrow-up-from-water-pump'\n  | 'arrow-up-left-from-circle'\n  | 'arrow-up-left'\n  | 'arrow-up-long'\n  | 'arrow-up-right-and-arrow-down-left-from-center'\n  | 'arrow-up-right-dots'\n  | 'arrow-up-right-from-square'\n  | 'arrow-up-right'\n  | 'arrow-up-short-wide'\n  | 'arrow-up-small-big'\n  | 'arrow-up-square-triangle'\n  | 'arrow-up-to-dotted-line'\n  | 'arrow-up-to-line'\n  | 'arrow-up-triangle-square'\n  | 'arrow-up-wide-short'\n  | 'arrow-up-z-a'\n  | 'arrow-up'\n  | 'arrows-alt-h'\n  | 'arrows-alt-v'\n  | 'arrows-alt'\n  | 'arrows-cross'\n  | 'arrows-down-to-line'\n  | 'arrows-down-to-people'\n  | 'arrows-from-dotted-line'\n  | 'arrows-from-line'\n  | 'arrows-h'\n  | 'arrows-left-right-to-line'\n  | 'arrows-left-right'\n  | 'arrows-maximize'\n  | 'arrows-minimize'\n  | 'arrows-repeat-1'\n  | 'arrows-repeat'\n  | 'arrows-retweet'\n  | 'arrows-rotate'\n  | 'arrows-spin'\n  | 'arrows-split-up-and-left'\n  | 'arrows-to-circle'\n  | 'arrows-to-dot'\n  | 'arrows-to-dotted-line'\n  | 'arrows-to-eye'\n  | 'arrows-to-line'\n  | 'arrows-turn-right'\n  | 'arrows-turn-to-dots'\n  | 'arrows-up-down-left-right'\n  | 'arrows-up-down'\n  | 'arrows-up-to-line'\n  | 'arrows-v'\n  | 'arrows'\n  | 'asl-interpreting'\n  | 'assistive-listening-systems'\n  | 'asterisk'\n  | 'at'\n  | 'atlas'\n  | 'atom-alt'\n  | 'atom-simple'\n  | 'atom'\n  | 'audio-description-slash'\n  | 'audio-description'\n  | 'austral-sign'\n  | 'automobile'\n  | 'avocado'\n  | 'award-simple'\n  | 'award'\n  | 'axe-battle'\n  | 'axe'\n  | 'b'\n  | 'baby-carriage'\n  | 'baby'\n  | 'backpack'\n  | 'backspace'\n  | 'backward-fast'\n  | 'backward-step'\n  | 'backward'\n  | 'bacon'\n  | 'bacteria'\n  | 'bacterium'\n  | 'badge-check'\n  | 'badge-dollar'\n  | 'badge-percent'\n  | 'badge-sheriff'\n  | 'badge'\n  | 'badger-honey'\n  | 'badminton'\n  | 'bag-seedling'\n  | 'bag-shopping'\n  | 'bagel'\n  | 'bags-shopping'\n  | 'baguette'\n  | 'bahai'\n  | 'baht-sign'\n  | 'balance-scale-left'\n  | 'balance-scale-right'\n  | 'balance-scale'\n  | 'ball-pile'\n  | 'balloon'\n  | 'balloons'\n  | 'ballot-check'\n  | 'ballot'\n  | 'ban-bug'\n  | 'ban-parking'\n  | 'ban-smoking'\n  | 'ban'\n  | 'banana'\n  | 'band-aid'\n  | 'bandage'\n  | 'bangladeshi-taka-sign'\n  | 'banjo'\n  | 'bank'\n  | 'bar-chart'\n  | 'barcode-alt'\n  | 'barcode-read'\n  | 'barcode-scan'\n  | 'barcode'\n  | 'barn-silo'\n  | 'bars-filter'\n  | 'bars-progress'\n  | 'bars-sort'\n  | 'bars-staggered'\n  | 'bars'\n  | 'baseball-ball'\n  | 'baseball-bat-ball'\n  | 'baseball'\n  | 'basket-shopping-simple'\n  | 'basket-shopping'\n  | 'basketball-ball'\n  | 'basketball-hoop'\n  | 'basketball'\n  | 'bat'\n  | 'bath'\n  | 'bathtub'\n  | 'battery-0'\n  | 'battery-1'\n  | 'battery-2'\n  | 'battery-3'\n  | 'battery-4'\n  | 'battery-5'\n  | 'battery-bolt'\n  | 'battery-car'\n  | 'battery-empty'\n  | 'battery-exclamation'\n  | 'battery-full'\n  | 'battery-half'\n  | 'battery-low'\n  | 'battery-quarter'\n  | 'battery-slash'\n  | 'battery-three-quarters'\n  | 'battery'\n  | 'bed-alt'\n  | 'bed-bunk'\n  | 'bed-empty'\n  | 'bed-front'\n  | 'bed-pulse'\n  | 'bed'\n  | 'bee'\n  | 'beer-foam'\n  | 'beer-mug-empty'\n  | 'beer-mug'\n  | 'beer'\n  | 'bell-concierge'\n  | 'bell-exclamation'\n  | 'bell-on'\n  | 'bell-plus'\n  | 'bell-school-slash'\n  | 'bell-school'\n  | 'bell-slash'\n  | 'bell'\n  | 'bells'\n  | 'bench-tree'\n  | 'betamax'\n  | 'bezier-curve'\n  | 'bible'\n  | 'bicycle'\n  | 'biking-mountain'\n  | 'biking'\n  | 'billboard'\n  | 'bin-bottles-recycle'\n  | 'bin-bottles'\n  | 'bin-recycle'\n  | 'binary-circle-check'\n  | 'binary-lock'\n  | 'binary-slash'\n  | 'binary'\n  | 'binoculars'\n  | 'biohazard'\n  | 'bird'\n  | 'birthday-cake'\n  | 'bitcoin-sign'\n  | 'blackboard'\n  | 'blanket-fire'\n  | 'blanket'\n  | 'blender-phone'\n  | 'blender'\n  | 'blind'\n  | 'blinds-open'\n  | 'blinds-raised'\n  | 'blinds'\n  | 'block-brick-fire'\n  | 'block-brick'\n  | 'block-question'\n  | 'block-quote'\n  | 'block'\n  | 'blog'\n  | 'blueberries'\n  | 'bluetooth'\n  | 'bold'\n  | 'bolt-auto'\n  | 'bolt-lightning'\n  | 'bolt-slash'\n  | 'bolt'\n  | 'bomb'\n  | 'bone-break'\n  | 'bone'\n  | 'bong'\n  | 'book-alt'\n  | 'book-arrow-right'\n  | 'book-arrow-up'\n  | 'book-atlas'\n  | 'book-bible'\n  | 'book-blank'\n  | 'book-bookmark'\n  | 'book-circle-arrow-right'\n  | 'book-circle-arrow-up'\n  | 'book-circle'\n  | 'book-copy'\n  | 'book-dead'\n  | 'book-font'\n  | 'book-heart'\n  | 'book-journal-whills'\n  | 'book-law'\n  | 'book-medical'\n  | 'book-open-alt'\n  | 'book-open-cover'\n  | 'book-open-reader'\n  | 'book-open'\n  | 'book-quran'\n  | 'book-reader'\n  | 'book-section'\n  | 'book-skull'\n  | 'book-sparkles'\n  | 'book-spells'\n  | 'book-tanakh'\n  | 'book-user'\n  | 'book'\n  | 'bookmark-circle'\n  | 'bookmark-slash'\n  | 'bookmark'\n  | 'books-medical'\n  | 'books'\n  | 'boombox'\n  | 'boot-heeled'\n  | 'boot'\n  | 'booth-curtain'\n  | 'border-all'\n  | 'border-bottom-right'\n  | 'border-bottom'\n  | 'border-center-h'\n  | 'border-center-v'\n  | 'border-inner'\n  | 'border-left'\n  | 'border-none'\n  | 'border-outer'\n  | 'border-right'\n  | 'border-style-alt'\n  | 'border-style'\n  | 'border-top-left'\n  | 'border-top'\n  | 'bore-hole'\n  | 'bottle-droplet'\n  | 'bottle-water'\n  | 'bow-arrow'\n  | 'bowl-chopsticks-noodles'\n  | 'bowl-chopsticks'\n  | 'bowl-food'\n  | 'bowl-hot'\n  | 'bowl-rice'\n  | 'bowl-salad'\n  | 'bowl-scoop'\n  | 'bowl-scoops'\n  | 'bowl-shaved-ice'\n  | 'bowl-soft-serve'\n  | 'bowl-spoon'\n  | 'bowling-ball-pin'\n  | 'bowling-ball'\n  | 'bowling-pins'\n  | 'box-alt'\n  | 'box-archive'\n  | 'box-ballot'\n  | 'box-check'\n  | 'box-circle-check'\n  | 'box-dollar'\n  | 'box-fragile'\n  | 'box-full'\n  | 'box-heart'\n  | 'box-open-full'\n  | 'box-open'\n  | 'box-taped'\n  | 'box-tissue'\n  | 'box-up'\n  | 'box-usd'\n  | 'box'\n  | 'boxes-alt'\n  | 'boxes-packing'\n  | 'boxes-stacked'\n  | 'boxes'\n  | 'boxing-glove'\n  | 'bracket-curly-left'\n  | 'bracket-curly-right'\n  | 'bracket-curly'\n  | 'bracket-left'\n  | 'bracket-round-right'\n  | 'bracket-round'\n  | 'bracket-square-right'\n  | 'bracket-square'\n  | 'bracket'\n  | 'brackets-curly'\n  | 'brackets-round'\n  | 'brackets-square'\n  | 'brackets'\n  | 'braille'\n  | 'brain-arrow-curved-right'\n  | 'brain-circuit'\n  | 'brain'\n  | 'brake-warning'\n  | 'brazilian-real-sign'\n  | 'bread-loaf'\n  | 'bread-slice-butter'\n  | 'bread-slice'\n  | 'bridge-circle-check'\n  | 'bridge-circle-exclamation'\n  | 'bridge-circle-xmark'\n  | 'bridge-lock'\n  | 'bridge-suspension'\n  | 'bridge-water'\n  | 'bridge'\n  | 'briefcase-arrow-right'\n  | 'briefcase-blank'\n  | 'briefcase-clock'\n  | 'briefcase-medical'\n  | 'briefcase'\n  | 'brightness-low'\n  | 'brightness'\n  | 'bring-forward'\n  | 'bring-front'\n  | 'broadcast-tower'\n  | 'broccoli'\n  | 'broom-ball'\n  | 'broom-wide'\n  | 'broom'\n  | 'browser'\n  | 'browsers'\n  | 'brush'\n  | 'bucket'\n  | 'bug-slash'\n  | 'bug'\n  | 'bugs'\n  | 'building-circle-arrow-right'\n  | 'building-circle-check'\n  | 'building-circle-exclamation'\n  | 'building-circle-xmark'\n  | 'building-columns'\n  | 'building-flag'\n  | 'building-lock'\n  | 'building-ngo'\n  | 'building-shield'\n  | 'building-un'\n  | 'building-user'\n  | 'building-wheat'\n  | 'building'\n  | 'buildings'\n  | 'bullhorn'\n  | 'bullseye-arrow'\n  | 'bullseye-pointer'\n  | 'bullseye'\n  | 'buoy-mooring'\n  | 'buoy'\n  | 'burger-cheese'\n  | 'burger-fries'\n  | 'burger-glass'\n  | 'burger-lettuce'\n  | 'burger-soda'\n  | 'burger'\n  | 'burn'\n  | 'burrito'\n  | 'burst'\n  | 'bus-alt'\n  | 'bus-school'\n  | 'bus-simple'\n  | 'bus'\n  | 'business-front'\n  | 'business-time'\n  | 'butter'\n  | 'c'\n  | 'cab'\n  | 'cabin'\n  | 'cabinet-filing'\n  | 'cable-car'\n  | 'cactus'\n  | 'cake-candles'\n  | 'cake-slice'\n  | 'cake'\n  | 'calculator-alt'\n  | 'calculator-simple'\n  | 'calculator'\n  | 'calendar-alt'\n  | 'calendar-arrow-down'\n  | 'calendar-arrow-up'\n  | 'calendar-check'\n  | 'calendar-circle-exclamation'\n  | 'calendar-circle-minus'\n  | 'calendar-circle-plus'\n  | 'calendar-circle-user'\n  | 'calendar-circle'\n  | 'calendar-clock'\n  | 'calendar-day'\n  | 'calendar-days'\n  | 'calendar-download'\n  | 'calendar-edit'\n  | 'calendar-exclamation'\n  | 'calendar-heart'\n  | 'calendar-image'\n  | 'calendar-lines-pen'\n  | 'calendar-lines'\n  | 'calendar-minus'\n  | 'calendar-note'\n  | 'calendar-pen'\n  | 'calendar-plus'\n  | 'calendar-range'\n  | 'calendar-star'\n  | 'calendar-time'\n  | 'calendar-times'\n  | 'calendar-upload'\n  | 'calendar-users'\n  | 'calendar-week'\n  | 'calendar-xmark'\n  | 'calendar'\n  | 'calendars'\n  | 'camcorder'\n  | 'camera-alt'\n  | 'camera-cctv'\n  | 'camera-circle'\n  | 'camera-home'\n  | 'camera-movie'\n  | 'camera-polaroid'\n  | 'camera-retro'\n  | 'camera-rotate'\n  | 'camera-security'\n  | 'camera-slash'\n  | 'camera-viewfinder'\n  | 'camera-web-slash'\n  | 'camera-web'\n  | 'camera'\n  | 'campfire'\n  | 'campground'\n  | 'can-food'\n  | 'cancel'\n  | 'candle-holder'\n  | 'candy-bar'\n  | 'candy-cane'\n  | 'candy-corn'\n  | 'candy'\n  | 'cannabis'\n  | 'capsules'\n  | 'car-alt'\n  | 'car-battery'\n  | 'car-bolt'\n  | 'car-building'\n  | 'car-bump'\n  | 'car-burst'\n  | 'car-bus'\n  | 'car-circle-bolt'\n  | 'car-crash'\n  | 'car-garage'\n  | 'car-mechanic'\n  | 'car-mirrors'\n  | 'car-on'\n  | 'car-rear'\n  | 'car-side-bolt'\n  | 'car-side'\n  | 'car-tilt'\n  | 'car-tunnel'\n  | 'car-wash'\n  | 'car-wrench'\n  | 'car'\n  | 'caravan-alt'\n  | 'caravan-simple'\n  | 'caravan'\n  | 'card-club'\n  | 'card-diamond'\n  | 'card-heart'\n  | 'card-spade'\n  | 'cards-blank'\n  | 'cards'\n  | 'caret-circle-down'\n  | 'caret-circle-left'\n  | 'caret-circle-right'\n  | 'caret-circle-up'\n  | 'caret-down'\n  | 'caret-left'\n  | 'caret-right'\n  | 'caret-square-down'\n  | 'caret-square-left'\n  | 'caret-square-right'\n  | 'caret-square-up'\n  | 'caret-up'\n  | 'carriage-baby'\n  | 'carrot'\n  | 'cars'\n  | 'cart-arrow-down'\n  | 'cart-arrow-up'\n  | 'cart-circle-arrow-down'\n  | 'cart-circle-arrow-up'\n  | 'cart-circle-check'\n  | 'cart-circle-exclamation'\n  | 'cart-circle-plus'\n  | 'cart-circle-xmark'\n  | 'cart-flatbed-boxes'\n  | 'cart-flatbed-empty'\n  | 'cart-flatbed-suitcase'\n  | 'cart-flatbed'\n  | 'cart-minus'\n  | 'cart-plus'\n  | 'cart-shopping-fast'\n  | 'cart-shopping'\n  | 'cart-xmark'\n  | 'cash-register'\n  | 'cassette-betamax'\n  | 'cassette-tape'\n  | 'cassette-vhs'\n  | 'castle'\n  | 'cat-space'\n  | 'cat'\n  | 'cauldron'\n  | 'cctv'\n  | 'cedi-sign'\n  | 'cent-sign'\n  | 'certificate'\n  | 'chain-broken'\n  | 'chain-horizontal-slash'\n  | 'chain-horizontal'\n  | 'chain-slash'\n  | 'chain'\n  | 'chair-office'\n  | 'chair'\n  | 'chalkboard-teacher'\n  | 'chalkboard-user'\n  | 'chalkboard'\n  | 'champagne-glass'\n  | 'champagne-glasses'\n  | 'charging-station'\n  | 'chart-area'\n  | 'chart-bar'\n  | 'chart-bullet'\n  | 'chart-candlestick'\n  | 'chart-column'\n  | 'chart-gantt'\n  | 'chart-line-down'\n  | 'chart-line-up-down'\n  | 'chart-line-up'\n  | 'chart-line'\n  | 'chart-mixed-up-circle-currency'\n  | 'chart-mixed-up-circle-dollar'\n  | 'chart-mixed'\n  | 'chart-network'\n  | 'chart-pie-alt'\n  | 'chart-pie-simple-circle-currency'\n  | 'chart-pie-simple-circle-dollar'\n  | 'chart-pie-simple'\n  | 'chart-pie'\n  | 'chart-pyramid'\n  | 'chart-radar'\n  | 'chart-scatter-3d'\n  | 'chart-scatter-bubble'\n  | 'chart-scatter'\n  | 'chart-simple-horizontal'\n  | 'chart-simple'\n  | 'chart-tree-map'\n  | 'chart-user'\n  | 'chart-waterfall'\n  | 'check-circle'\n  | 'check-double'\n  | 'check-square'\n  | 'check-to-slot'\n  | 'check'\n  | 'cheese-swiss'\n  | 'cheese'\n  | 'cheeseburger'\n  | 'cherries'\n  | 'chess-bishop-alt'\n  | 'chess-bishop-piece'\n  | 'chess-bishop'\n  | 'chess-board'\n  | 'chess-clock-alt'\n  | 'chess-clock-flip'\n  | 'chess-clock'\n  | 'chess-king-alt'\n  | 'chess-king-piece'\n  | 'chess-king'\n  | 'chess-knight-alt'\n  | 'chess-knight-piece'\n  | 'chess-knight'\n  | 'chess-pawn-alt'\n  | 'chess-pawn-piece'\n  | 'chess-pawn'\n  | 'chess-queen-alt'\n  | 'chess-queen-piece'\n  | 'chess-queen'\n  | 'chess-rook-alt'\n  | 'chess-rook-piece'\n  | 'chess-rook'\n  | 'chess'\n  | 'chestnut'\n  | 'chevron-circle-down'\n  | 'chevron-circle-left'\n  | 'chevron-circle-right'\n  | 'chevron-circle-up'\n  | 'chevron-double-down'\n  | 'chevron-double-left'\n  | 'chevron-double-right'\n  | 'chevron-double-up'\n  | 'chevron-down'\n  | 'chevron-left'\n  | 'chevron-right'\n  | 'chevron-square-down'\n  | 'chevron-square-left'\n  | 'chevron-square-right'\n  | 'chevron-square-up'\n  | 'chevron-up'\n  | 'chevrons-down'\n  | 'chevrons-left'\n  | 'chevrons-right'\n  | 'chevrons-up'\n  | 'chf-sign'\n  | 'child-combatant'\n  | 'child-dress'\n  | 'child-reaching'\n  | 'child-rifle'\n  | 'child'\n  | 'children'\n  | 'chimney'\n  | 'chocolate-bar'\n  | 'chopsticks'\n  | 'church'\n  | 'circle-0'\n  | 'circle-1'\n  | 'circle-2'\n  | 'circle-3'\n  | 'circle-4'\n  | 'circle-5'\n  | 'circle-6'\n  | 'circle-7'\n  | 'circle-8'\n  | 'circle-9'\n  | 'circle-a'\n  | 'circle-ampersand'\n  | 'circle-arrow-down-left'\n  | 'circle-arrow-down-right'\n  | 'circle-arrow-down'\n  | 'circle-arrow-left'\n  | 'circle-arrow-right'\n  | 'circle-arrow-up-left'\n  | 'circle-arrow-up-right'\n  | 'circle-arrow-up'\n  | 'circle-b'\n  | 'circle-bolt'\n  | 'circle-book-open'\n  | 'circle-bookmark'\n  | 'circle-c'\n  | 'circle-calendar'\n  | 'circle-camera'\n  | 'circle-caret-down'\n  | 'circle-caret-left'\n  | 'circle-caret-right'\n  | 'circle-caret-up'\n  | 'circle-check'\n  | 'circle-chevron-down'\n  | 'circle-chevron-left'\n  | 'circle-chevron-right'\n  | 'circle-chevron-up'\n  | 'circle-d'\n  | 'circle-dashed'\n  | 'circle-divide'\n  | 'circle-dollar-to-slot'\n  | 'circle-dollar'\n  | 'circle-dot'\n  | 'circle-down-left'\n  | 'circle-down-right'\n  | 'circle-down'\n  | 'circle-e'\n  | 'circle-ellipsis-vertical'\n  | 'circle-ellipsis'\n  | 'circle-envelope'\n  | 'circle-euro'\n  | 'circle-exclamation-check'\n  | 'circle-exclamation'\n  | 'circle-f'\n  | 'circle-g'\n  | 'circle-h'\n  | 'circle-half-stroke'\n  | 'circle-half'\n  | 'circle-heart'\n  | 'circle-i'\n  | 'circle-info'\n  | 'circle-j'\n  | 'circle-k'\n  | 'circle-l'\n  | 'circle-left'\n  | 'circle-location-arrow'\n  | 'circle-m'\n  | 'circle-microphone-lines'\n  | 'circle-microphone'\n  | 'circle-minus'\n  | 'circle-n'\n  | 'circle-nodes'\n  | 'circle-notch'\n  | 'circle-o'\n  | 'circle-p'\n  | 'circle-parking'\n  | 'circle-pause'\n  | 'circle-phone-flip'\n  | 'circle-phone-hangup'\n  | 'circle-phone'\n  | 'circle-play'\n  | 'circle-plus'\n  | 'circle-q'\n  | 'circle-quarter-stroke'\n  | 'circle-quarter'\n  | 'circle-quarters'\n  | 'circle-question'\n  | 'circle-r'\n  | 'circle-radiation'\n  | 'circle-right'\n  | 'circle-s'\n  | 'circle-small'\n  | 'circle-sort-down'\n  | 'circle-sort-up'\n  | 'circle-sort'\n  | 'circle-star'\n  | 'circle-sterling'\n  | 'circle-stop'\n  | 'circle-t'\n  | 'circle-three-quarters-stroke'\n  | 'circle-three-quarters'\n  | 'circle-trash'\n  | 'circle-u'\n  | 'circle-up-left'\n  | 'circle-up-right'\n  | 'circle-up'\n  | 'circle-user'\n  | 'circle-v'\n  | 'circle-video'\n  | 'circle-w'\n  | 'circle-waveform-lines'\n  | 'circle-x'\n  | 'circle-xmark'\n  | 'circle-y'\n  | 'circle-yen'\n  | 'circle-z'\n  | 'circle'\n  | 'circles-overlap'\n  | 'citrus-slice'\n  | 'citrus'\n  | 'city'\n  | 'clapperboard-play'\n  | 'clapperboard'\n  | 'clarinet'\n  | 'claw-marks'\n  | 'clinic-medical'\n  | 'clipboard-check'\n  | 'clipboard-list-check'\n  | 'clipboard-list'\n  | 'clipboard-medical'\n  | 'clipboard-prescription'\n  | 'clipboard-question'\n  | 'clipboard-user'\n  | 'clipboard'\n  | 'clock-desk'\n  | 'clock-eight-thirty'\n  | 'clock-eight'\n  | 'clock-eleven-thirty'\n  | 'clock-eleven'\n  | 'clock-five-thirty'\n  | 'clock-five'\n  | 'clock-four-thirty'\n  | 'clock-four'\n  | 'clock-nine-thirty'\n  | 'clock-nine'\n  | 'clock-one-thirty'\n  | 'clock-one'\n  | 'clock-rotate-left'\n  | 'clock-seven-thirty'\n  | 'clock-seven'\n  | 'clock-six-thirty'\n  | 'clock-six'\n  | 'clock-ten-thirty'\n  | 'clock-ten'\n  | 'clock-three-thirty'\n  | 'clock-three'\n  | 'clock-twelve-thirty'\n  | 'clock-twelve'\n  | 'clock-two-thirty'\n  | 'clock-two'\n  | 'clock'\n  | 'clone'\n  | 'close'\n  | 'closed-captioning-slash'\n  | 'closed-captioning'\n  | 'clothes-hanger'\n  | 'cloud-arrow-down'\n  | 'cloud-arrow-up'\n  | 'cloud-binary'\n  | 'cloud-bolt-moon'\n  | 'cloud-bolt-sun'\n  | 'cloud-bolt'\n  | 'cloud-check'\n  | 'cloud-download-alt'\n  | 'cloud-download'\n  | 'cloud-drizzle'\n  | 'cloud-exclamation'\n  | 'cloud-fog'\n  | 'cloud-hail-mixed'\n  | 'cloud-hail'\n  | 'cloud-meatball'\n  | 'cloud-minus'\n  | 'cloud-moon-rain'\n  | 'cloud-moon'\n  | 'cloud-music'\n  | 'cloud-plus'\n  | 'cloud-question'\n  | 'cloud-rain'\n  | 'cloud-rainbow'\n  | 'cloud-showers-heavy'\n  | 'cloud-showers-water'\n  | 'cloud-showers'\n  | 'cloud-slash'\n  | 'cloud-sleet'\n  | 'cloud-snow'\n  | 'cloud-sun-rain'\n  | 'cloud-sun'\n  | 'cloud-upload-alt'\n  | 'cloud-upload'\n  | 'cloud-word'\n  | 'cloud-xmark'\n  | 'cloud'\n  | 'clouds-moon'\n  | 'clouds-sun'\n  | 'clouds'\n  | 'clover'\n  | 'club'\n  | 'cny'\n  | 'cocktail'\n  | 'coconut'\n  | 'code-branch'\n  | 'code-commit'\n  | 'code-compare'\n  | 'code-fork'\n  | 'code-merge'\n  | 'code-pull-request-closed'\n  | 'code-pull-request-draft'\n  | 'code-pull-request'\n  | 'code-simple'\n  | 'code'\n  | 'coffee-bean'\n  | 'coffee-beans'\n  | 'coffee-pot'\n  | 'coffee-togo'\n  | 'coffee'\n  | 'coffin-cross'\n  | 'coffin'\n  | 'cog'\n  | 'cogs'\n  | 'coin-blank'\n  | 'coin-front'\n  | 'coin-vertical'\n  | 'coin'\n  | 'coins'\n  | 'colon-sign'\n  | 'colon'\n  | 'columns-3'\n  | 'columns'\n  | 'comet'\n  | 'comma'\n  | 'command'\n  | 'comment-alt-arrow-down'\n  | 'comment-alt-arrow-up'\n  | 'comment-alt-captions'\n  | 'comment-alt-check'\n  | 'comment-alt-dollar'\n  | 'comment-alt-dots'\n  | 'comment-alt-edit'\n  | 'comment-alt-exclamation'\n  | 'comment-alt-image'\n  | 'comment-alt-lines'\n  | 'comment-alt-medical'\n  | 'comment-alt-minus'\n  | 'comment-alt-music'\n  | 'comment-alt-plus'\n  | 'comment-alt-quote'\n  | 'comment-alt-slash'\n  | 'comment-alt-smile'\n  | 'comment-alt-text'\n  | 'comment-alt-times'\n  | 'comment-alt'\n  | 'comment-arrow-down'\n  | 'comment-arrow-up-right'\n  | 'comment-arrow-up'\n  | 'comment-captions'\n  | 'comment-check'\n  | 'comment-code'\n  | 'comment-dollar'\n  | 'comment-dots'\n  | 'comment-edit'\n  | 'comment-exclamation'\n  | 'comment-heart'\n  | 'comment-image'\n  | 'comment-lines'\n  | 'comment-medical'\n  | 'comment-middle-alt'\n  | 'comment-middle-top-alt'\n  | 'comment-middle-top'\n  | 'comment-middle'\n  | 'comment-minus'\n  | 'comment-music'\n  | 'comment-pen'\n  | 'comment-plus'\n  | 'comment-question'\n  | 'comment-quote'\n  | 'comment-slash'\n  | 'comment-smile'\n  | 'comment-sms'\n  | 'comment-text'\n  | 'comment-times'\n  | 'comment-xmark'\n  | 'comment'\n  | 'commenting'\n  | 'comments-alt-dollar'\n  | 'comments-alt'\n  | 'comments-dollar'\n  | 'comments-question-check'\n  | 'comments-question'\n  | 'comments'\n  | 'compact-disc'\n  | 'compass-drafting'\n  | 'compass-slash'\n  | 'compass'\n  | 'compress-alt'\n  | 'compress-arrows-alt'\n  | 'compress-arrows'\n  | 'compress-wide'\n  | 'compress'\n  | 'computer-classic'\n  | 'computer-mouse-scrollwheel'\n  | 'computer-mouse'\n  | 'computer-speaker'\n  | 'computer'\n  | 'concierge-bell'\n  | 'construction'\n  | 'contact-book'\n  | 'contact-card'\n  | 'container-storage'\n  | 'conveyor-belt-alt'\n  | 'conveyor-belt-arm'\n  | 'conveyor-belt-boxes'\n  | 'conveyor-belt-empty'\n  | 'conveyor-belt'\n  | 'cookie-bite'\n  | 'cookie'\n  | 'copy'\n  | 'copyright'\n  | 'corn'\n  | 'corner'\n  | 'couch-small'\n  | 'couch'\n  | 'cow'\n  | 'cowbell-circle-plus'\n  | 'cowbell-more'\n  | 'cowbell'\n  | 'crab'\n  | 'crate-apple'\n  | 'crate-empty'\n  | 'credit-card-alt'\n  | 'credit-card-blank'\n  | 'credit-card-front'\n  | 'credit-card'\n  | 'creemee'\n  | 'cricket-bat-ball'\n  | 'cricket'\n  | 'croissant'\n  | 'crop-alt'\n  | 'crop-simple'\n  | 'crop'\n  | 'cross'\n  | 'crosshairs-simple'\n  | 'crosshairs'\n  | 'crow'\n  | 'crown'\n  | 'crutch'\n  | 'crutches'\n  | 'cruzeiro-sign'\n  | 'crystal-ball'\n  | 'cube'\n  | 'cubes-stacked'\n  | 'cubes'\n  | 'cucumber'\n  | 'cup-straw-swoosh'\n  | 'cup-straw'\n  | 'cup-togo'\n  | 'cupcake'\n  | 'curling-stone'\n  | 'curling'\n  | 'custard'\n  | 'cut'\n  | 'cutlery'\n  | 'd'\n  | 'dagger'\n  | 'dash'\n  | 'dashboard'\n  | 'database'\n  | 'deaf'\n  | 'deafness'\n  | 'debug'\n  | 'dedent'\n  | 'deer-rudolph'\n  | 'deer'\n  | 'delete-left'\n  | 'delete-right'\n  | 'democrat'\n  | 'desktop-alt'\n  | 'desktop-arrow-down'\n  | 'desktop-code'\n  | 'desktop-medical'\n  | 'desktop-slash'\n  | 'desktop'\n  | 'dewpoint'\n  | 'dharmachakra'\n  | 'diagnoses'\n  | 'diagram-cells'\n  | 'diagram-lean-canvas'\n  | 'diagram-nested'\n  | 'diagram-next'\n  | 'diagram-predecessor'\n  | 'diagram-previous'\n  | 'diagram-project'\n  | 'diagram-sankey'\n  | 'diagram-subtask'\n  | 'diagram-successor'\n  | 'diagram-venn'\n  | 'dial-high'\n  | 'dial-low'\n  | 'dial-max'\n  | 'dial-med-high'\n  | 'dial-med-low'\n  | 'dial-med'\n  | 'dial-min'\n  | 'dial-off'\n  | 'dial'\n  | 'diamond-exclamation'\n  | 'diamond-half-stroke'\n  | 'diamond-half'\n  | 'diamond-turn-right'\n  | 'diamond'\n  | 'dice-d10'\n  | 'dice-d12'\n  | 'dice-d20'\n  | 'dice-d4'\n  | 'dice-d6'\n  | 'dice-d8'\n  | 'dice-five'\n  | 'dice-four'\n  | 'dice-one'\n  | 'dice-six'\n  | 'dice-three'\n  | 'dice-two'\n  | 'dice'\n  | 'digging'\n  | 'digital-tachograph'\n  | 'dinosaur'\n  | 'diploma'\n  | 'directions'\n  | 'disc-drive'\n  | 'disease'\n  | 'display-arrow-down'\n  | 'display-chart-up-circle-currency'\n  | 'display-chart-up-circle-dollar'\n  | 'display-chart-up'\n  | 'display-code'\n  | 'display-medical'\n  | 'display-slash'\n  | 'display'\n  | 'distribute-spacing-horizontal'\n  | 'distribute-spacing-vertical'\n  | 'ditto'\n  | 'divide'\n  | 'dizzy'\n  | 'dna'\n  | 'do-not-enter'\n  | 'dog-leashed'\n  | 'dog'\n  | 'dollar-circle'\n  | 'dollar-sign'\n  | 'dollar-square'\n  | 'dollar'\n  | 'dolly-box'\n  | 'dolly-empty'\n  | 'dolly-flatbed-alt'\n  | 'dolly-flatbed-empty'\n  | 'dolly-flatbed'\n  | 'dolly'\n  | 'dolphin'\n  | 'donate'\n  | 'dong-sign'\n  | 'donut'\n  | 'door-closed'\n  | 'door-open'\n  | 'dot-circle'\n  | 'doughnut'\n  | 'dove'\n  | 'down-from-dotted-line'\n  | 'down-from-line'\n  | 'down-left-and-up-right-to-center'\n  | 'down-left'\n  | 'down-long'\n  | 'down-right'\n  | 'down-to-bracket'\n  | 'down-to-dotted-line'\n  | 'down-to-line'\n  | 'down'\n  | 'download'\n  | 'drafting-compass'\n  | 'dragon'\n  | 'draw-circle'\n  | 'draw-polygon'\n  | 'draw-square'\n  | 'dreidel'\n  | 'drivers-license'\n  | 'drone-alt'\n  | 'drone-front'\n  | 'drone'\n  | 'droplet-degree'\n  | 'droplet-percent'\n  | 'droplet-slash'\n  | 'droplet'\n  | 'drum-steelpan'\n  | 'drum'\n  | 'drumstick-bite'\n  | 'drumstick'\n  | 'dryer-alt'\n  | 'dryer-heat'\n  | 'dryer'\n  | 'duck'\n  | 'dumbbell'\n  | 'dumpster-fire'\n  | 'dumpster'\n  | 'dungeon'\n  | 'e'\n  | 'ear-deaf'\n  | 'ear-listen'\n  | 'ear-muffs'\n  | 'ear'\n  | 'earth-africa'\n  | 'earth-america'\n  | 'earth-americas'\n  | 'earth-asia'\n  | 'earth-europe'\n  | 'earth-oceania'\n  | 'earth'\n  | 'eclipse-alt'\n  | 'eclipse'\n  | 'edit'\n  | 'egg-fried'\n  | 'egg'\n  | 'eggplant'\n  | 'eject'\n  | 'elephant'\n  | 'elevator'\n  | 'ellipsis-h-alt'\n  | 'ellipsis-h'\n  | 'ellipsis-stroke-vertical'\n  | 'ellipsis-stroke'\n  | 'ellipsis-v-alt'\n  | 'ellipsis-v'\n  | 'ellipsis-vertical'\n  | 'ellipsis'\n  | 'empty-set'\n  | 'engine-exclamation'\n  | 'engine-warning'\n  | 'engine'\n  | 'envelope-badge'\n  | 'envelope-circle-check'\n  | 'envelope-circle'\n  | 'envelope-dot'\n  | 'envelope-open-dollar'\n  | 'envelope-open-text'\n  | 'envelope-open'\n  | 'envelope-square'\n  | 'envelope'\n  | 'envelopes-bulk'\n  | 'envelopes'\n  | 'equals'\n  | 'eraser'\n  | 'escalator'\n  | 'ethernet'\n  | 'eur'\n  | 'euro-sign'\n  | 'euro'\n  | 'exchange-alt'\n  | 'exchange'\n  | 'exclamation-circle'\n  | 'exclamation-square'\n  | 'exclamation-triangle'\n  | 'exclamation'\n  | 'expand-alt'\n  | 'expand-arrows-alt'\n  | 'expand-arrows'\n  | 'expand-wide'\n  | 'expand'\n  | 'exploding-head'\n  | 'explosion'\n  | 'external-link-alt'\n  | 'external-link-square-alt'\n  | 'external-link-square'\n  | 'external-link'\n  | 'eye-dropper-empty'\n  | 'eye-dropper-full'\n  | 'eye-dropper-half'\n  | 'eye-dropper'\n  | 'eye-evil'\n  | 'eye-low-vision'\n  | 'eye-slash'\n  | 'eye'\n  | 'eyedropper'\n  | 'eyes'\n  | 'f'\n  | 'face-angry-horns'\n  | 'face-angry'\n  | 'face-anguished'\n  | 'face-anxious-sweat'\n  | 'face-astonished'\n  | 'face-awesome'\n  | 'face-beam-hand-over-mouth'\n  | 'face-clouds'\n  | 'face-confounded'\n  | 'face-confused'\n  | 'face-cowboy-hat'\n  | 'face-diagonal-mouth'\n  | 'face-disappointed'\n  | 'face-disguise'\n  | 'face-dizzy'\n  | 'face-dotted'\n  | 'face-downcast-sweat'\n  | 'face-drooling'\n  | 'face-exhaling'\n  | 'face-explode'\n  | 'face-expressionless'\n  | 'face-eyes-xmarks'\n  | 'face-fearful'\n  | 'face-flushed'\n  | 'face-frown-open'\n  | 'face-frown-slight'\n  | 'face-frown'\n  | 'face-glasses'\n  | 'face-grimace'\n  | 'face-grin-beam-sweat'\n  | 'face-grin-beam'\n  | 'face-grin-hearts'\n  | 'face-grin-squint-tears'\n  | 'face-grin-squint'\n  | 'face-grin-stars'\n  | 'face-grin-tears'\n  | 'face-grin-tongue-squint'\n  | 'face-grin-tongue-wink'\n  | 'face-grin-tongue'\n  | 'face-grin-wide'\n  | 'face-grin-wink'\n  | 'face-grin'\n  | 'face-hand-over-mouth'\n  | 'face-hand-peeking'\n  | 'face-hand-yawn'\n  | 'face-head-bandage'\n  | 'face-holding-back-tears'\n  | 'face-hushed'\n  | 'face-icicles'\n  | 'face-kiss-beam'\n  | 'face-kiss-closed-eyes'\n  | 'face-kiss-wink-heart'\n  | 'face-kiss'\n  | 'face-laugh-beam'\n  | 'face-laugh-squint'\n  | 'face-laugh-wink'\n  | 'face-laugh'\n  | 'face-lying'\n  | 'face-mask'\n  | 'face-meh-blank'\n  | 'face-meh'\n  | 'face-melting'\n  | 'face-monocle'\n  | 'face-nauseated'\n  | 'face-nose-steam'\n  | 'face-party'\n  | 'face-pensive'\n  | 'face-persevering'\n  | 'face-pleading'\n  | 'face-pouting'\n  | 'face-raised-eyebrow'\n  | 'face-relieved'\n  | 'face-rolling-eyes'\n  | 'face-sad-cry'\n  | 'face-sad-sweat'\n  | 'face-sad-tear'\n  | 'face-saluting'\n  | 'face-scream'\n  | 'face-shush'\n  | 'face-sleeping'\n  | 'face-sleepy'\n  | 'face-smile-beam'\n  | 'face-smile-halo'\n  | 'face-smile-hearts'\n  | 'face-smile-horns'\n  | 'face-smile-plus'\n  | 'face-smile-relaxed'\n  | 'face-smile-tear'\n  | 'face-smile-tongue'\n  | 'face-smile-upside-down'\n  | 'face-smile-wink'\n  | 'face-smile'\n  | 'face-smiling-hands'\n  | 'face-smirking'\n  | 'face-spiral-eyes'\n  | 'face-sunglasses'\n  | 'face-surprise'\n  | 'face-swear'\n  | 'face-thermometer'\n  | 'face-thinking'\n  | 'face-tired'\n  | 'face-tissue'\n  | 'face-tongue-money'\n  | 'face-tongue-sweat'\n  | 'face-unamused'\n  | 'face-viewfinder'\n  | 'face-vomit'\n  | 'face-weary'\n  | 'face-woozy'\n  | 'face-worried'\n  | 'face-zany'\n  | 'face-zipper'\n  | 'falafel'\n  | 'family-dress'\n  | 'family-pants'\n  | 'family'\n  | 'fan-table'\n  | 'fan'\n  | 'farm'\n  | 'fast-backward'\n  | 'fast-forward'\n  | 'faucet-drip'\n  | 'faucet'\n  | 'fax'\n  | 'feather-alt'\n  | 'feather-pointed'\n  | 'feather'\n  | 'feed'\n  | 'female'\n  | 'fence'\n  | 'ferris-wheel'\n  | 'ferry'\n  | 'field-hockey-stick-ball'\n  | 'field-hockey'\n  | 'fighter-jet'\n  | 'file-alt'\n  | 'file-archive'\n  | 'file-arrow-down'\n  | 'file-arrow-up'\n  | 'file-audio'\n  | 'file-award'\n  | 'file-binary'\n  | 'file-caret-down'\n  | 'file-caret-up'\n  | 'file-certificate'\n  | 'file-chart-column'\n  | 'file-chart-line'\n  | 'file-chart-pie'\n  | 'file-check'\n  | 'file-circle-check'\n  | 'file-circle-exclamation'\n  | 'file-circle-info'\n  | 'file-circle-minus'\n  | 'file-circle-plus'\n  | 'file-circle-question'\n  | 'file-circle-xmark'\n  | 'file-clipboard'\n  | 'file-code'\n  | 'file-contract'\n  | 'file-csv'\n  | 'file-dashed-line'\n  | 'file-doc'\n  | 'file-download'\n  | 'file-edit'\n  | 'file-excel'\n  | 'file-exclamation'\n  | 'file-export'\n  | 'file-heart'\n  | 'file-image'\n  | 'file-import'\n  | 'file-invoice-dollar'\n  | 'file-invoice'\n  | 'file-lines'\n  | 'file-lock'\n  | 'file-magnifying-glass'\n  | 'file-medical-alt'\n  | 'file-medical'\n  | 'file-minus'\n  | 'file-music'\n  | 'file-pdf'\n  | 'file-pen'\n  | 'file-plus-minus'\n  | 'file-plus'\n  | 'file-powerpoint'\n  | 'file-prescription'\n  | 'file-search'\n  | 'file-shield'\n  | 'file-signature'\n  | 'file-slash'\n  | 'file-spreadsheet'\n  | 'file-text'\n  | 'file-times'\n  | 'file-upload'\n  | 'file-user'\n  | 'file-video'\n  | 'file-waveform'\n  | 'file-word'\n  | 'file-xmark'\n  | 'file-zip'\n  | 'file-zipper'\n  | 'file'\n  | 'files-medical'\n  | 'files'\n  | 'fill-drip'\n  | 'fill'\n  | 'film-alt'\n  | 'film-canister'\n  | 'film-cannister'\n  | 'film-simple'\n  | 'film-slash'\n  | 'film'\n  | 'films'\n  | 'filter-circle-dollar'\n  | 'filter-circle-xmark'\n  | 'filter-list'\n  | 'filter-slash'\n  | 'filter'\n  | 'filters'\n  | 'fingerprint'\n  | 'fire-alt'\n  | 'fire-burner'\n  | 'fire-extinguisher'\n  | 'fire-flame-curved'\n  | 'fire-flame-simple'\n  | 'fire-flame'\n  | 'fire-hydrant'\n  | 'fire-smoke'\n  | 'fire'\n  | 'fireplace'\n  | 'firewall'\n  | 'first-aid'\n  | 'fish-bones'\n  | 'fish-cooked'\n  | 'fish-fins'\n  | 'fish'\n  | 'fishing-rod'\n  | 'fist-raised'\n  | 'flag-alt'\n  | 'flag-checkered'\n  | 'flag-pennant'\n  | 'flag-swallowtail'\n  | 'flag-usa'\n  | 'flag'\n  | 'flame'\n  | 'flashlight'\n  | 'flask-gear'\n  | 'flask-poison'\n  | 'flask-potion'\n  | 'flask-round-poison'\n  | 'flask-round-potion'\n  | 'flask-vial'\n  | 'flask'\n  | 'flatbread-stuffed'\n  | 'flatbread'\n  | 'floppy-disk-circle-arrow-right'\n  | 'floppy-disk-circle-xmark'\n  | 'floppy-disk-pen'\n  | 'floppy-disk-times'\n  | 'floppy-disk'\n  | 'floppy-disks'\n  | 'florin-sign'\n  | 'flower-daffodil'\n  | 'flower-tulip'\n  | 'flower'\n  | 'flushed'\n  | 'flute'\n  | 'flux-capacitor'\n  | 'flying-disc'\n  | 'fog'\n  | 'folder-arrow-down'\n  | 'folder-arrow-up'\n  | 'folder-blank'\n  | 'folder-bookmark'\n  | 'folder-closed'\n  | 'folder-cog'\n  | 'folder-download'\n  | 'folder-gear'\n  | 'folder-grid'\n  | 'folder-heart'\n  | 'folder-image'\n  | 'folder-magnifying-glass'\n  | 'folder-medical'\n  | 'folder-minus'\n  | 'folder-music'\n  | 'folder-open'\n  | 'folder-plus'\n  | 'folder-search'\n  | 'folder-times'\n  | 'folder-tree'\n  | 'folder-upload'\n  | 'folder-user'\n  | 'folder-xmark'\n  | 'folder'\n  | 'folders'\n  | 'fondue-pot'\n  | 'font-awesome-flag'\n  | 'font-awesome-logo-full'\n  | 'font-awesome'\n  | 'font-case'\n  | 'font'\n  | 'football-ball'\n  | 'football-helmet'\n  | 'football'\n  | 'fork-knife'\n  | 'fork'\n  | 'forklift'\n  | 'fort'\n  | 'forward-fast'\n  | 'forward-step'\n  | 'forward'\n  | 'fragile'\n  | 'frame'\n  | 'franc-sign'\n  | 'french-fries'\n  | 'frog'\n  | 'frosty-head'\n  | 'frown-open'\n  | 'frown'\n  | 'function'\n  | 'funnel-dollar'\n  | 'futbol-ball'\n  | 'futbol'\n  | 'g'\n  | 'galaxy'\n  | 'gallery-thumbnails'\n  | 'game-board-alt'\n  | 'game-board-simple'\n  | 'game-board'\n  | 'game-console-handheld-crank'\n  | 'game-console-handheld'\n  | 'gamepad-alt'\n  | 'gamepad-modern'\n  | 'gamepad'\n  | 'garage-car'\n  | 'garage-open'\n  | 'garage'\n  | 'garlic'\n  | 'gas-pump-slash'\n  | 'gas-pump'\n  | 'gauge-circle-bolt'\n  | 'gauge-circle-minus'\n  | 'gauge-circle-plus'\n  | 'gauge-high'\n  | 'gauge-low'\n  | 'gauge-max'\n  | 'gauge-med'\n  | 'gauge-min'\n  | 'gauge-simple-high'\n  | 'gauge-simple-low'\n  | 'gauge-simple-max'\n  | 'gauge-simple-med'\n  | 'gauge-simple-min'\n  | 'gauge-simple'\n  | 'gauge'\n  | 'gave-dandy'\n  | 'gavel'\n  | 'gbp'\n  | 'gear-code'\n  | 'gear-complex-code'\n  | 'gear-complex'\n  | 'gear'\n  | 'gears'\n  | 'gem'\n  | 'genderless'\n  | 'ghost'\n  | 'gif'\n  | 'gift-card'\n  | 'gift'\n  | 'gifts'\n  | 'gingerbread-man'\n  | 'glass-champagne'\n  | 'glass-cheers'\n  | 'glass-citrus'\n  | 'glass-empty'\n  | 'glass-half-empty'\n  | 'glass-half-full'\n  | 'glass-half'\n  | 'glass-martini-alt'\n  | 'glass-martini'\n  | 'glass-water-droplet'\n  | 'glass-water'\n  | 'glass-whiskey-rocks'\n  | 'glass-whiskey'\n  | 'glass'\n  | 'glasses-alt'\n  | 'glasses-round'\n  | 'glasses'\n  | 'globe-africa'\n  | 'globe-americas'\n  | 'globe-asia'\n  | 'globe-europe'\n  | 'globe-oceania'\n  | 'globe-snow'\n  | 'globe-stand'\n  | 'globe'\n  | 'glove-boxing'\n  | 'goal-net'\n  | 'golf-ball-tee'\n  | 'golf-ball'\n  | 'golf-club'\n  | 'golf-flag-hole'\n  | 'gopuram'\n  | 'graduation-cap'\n  | 'gramophone'\n  | 'grapes'\n  | 'grate-droplet'\n  | 'grate'\n  | 'greater-than-equal'\n  | 'greater-than'\n  | 'grid-2-plus'\n  | 'grid-2'\n  | 'grid-3'\n  | 'grid-4'\n  | 'grid-5'\n  | 'grid-dividers'\n  | 'grid-horizontal'\n  | 'grid-round-2-plus'\n  | 'grid-round-2'\n  | 'grid-round-4'\n  | 'grid-round-5'\n  | 'grid-round'\n  | 'grid'\n  | 'grill-fire'\n  | 'grill-hot'\n  | 'grill'\n  | 'grimace'\n  | 'grin-alt'\n  | 'grin-beam-sweat'\n  | 'grin-beam'\n  | 'grin-hearts'\n  | 'grin-squint-tears'\n  | 'grin-squint'\n  | 'grin-stars'\n  | 'grin-tears'\n  | 'grin-tongue-squint'\n  | 'grin-tongue-wink'\n  | 'grin-tongue'\n  | 'grin-wink'\n  | 'grin'\n  | 'grip-dots-vertical'\n  | 'grip-dots'\n  | 'grip-horizontal'\n  | 'grip-lines-vertical'\n  | 'grip-lines'\n  | 'grip-vertical'\n  | 'grip'\n  | 'group-arrows-rotate'\n  | 'guarani-sign'\n  | 'guitar-electric'\n  | 'guitar'\n  | 'guitars'\n  | 'gun-slash'\n  | 'gun-squirt'\n  | 'gun'\n  | 'h-square'\n  | 'h'\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h6'\n  | 'hamburger'\n  | 'hammer-crash'\n  | 'hammer-war'\n  | 'hammer'\n  | 'hamsa'\n  | 'hand-back-fist'\n  | 'hand-back-point-down'\n  | 'hand-back-point-left'\n  | 'hand-back-point-ribbon'\n  | 'hand-back-point-right'\n  | 'hand-back-point-up'\n  | 'hand-dots'\n  | 'hand-fingers-crossed'\n  | 'hand-fist'\n  | 'hand-heart'\n  | 'hand-holding-box'\n  | 'hand-holding-dollar'\n  | 'hand-holding-droplet'\n  | 'hand-holding-hand'\n  | 'hand-holding-heart'\n  | 'hand-holding-magic'\n  | 'hand-holding-medical'\n  | 'hand-holding-seedling'\n  | 'hand-holding-skull'\n  | 'hand-holding-usd'\n  | 'hand-holding-water'\n  | 'hand-holding'\n  | 'hand-horns'\n  | 'hand-lizard'\n  | 'hand-love'\n  | 'hand-middle-finger'\n  | 'hand-paper'\n  | 'hand-peace'\n  | 'hand-point-down'\n  | 'hand-point-left'\n  | 'hand-point-ribbon'\n  | 'hand-point-right'\n  | 'hand-point-up'\n  | 'hand-pointer'\n  | 'hand-receiving'\n  | 'hand-rock'\n  | 'hand-scissors'\n  | 'hand-sparkles'\n  | 'hand-spock'\n  | 'hand-wave'\n  | 'hand'\n  | 'handcuffs'\n  | 'hands-american-sign-language-interpreting'\n  | 'hands-asl-interpreting'\n  | 'hands-bound'\n  | 'hands-bubbles'\n  | 'hands-clapping'\n  | 'hands-heart'\n  | 'hands-helping'\n  | 'hands-holding-child'\n  | 'hands-holding-circle'\n  | 'hands-holding-diamond'\n  | 'hands-holding-dollar'\n  | 'hands-holding-heart'\n  | 'hands-holding'\n  | 'hands-praying'\n  | 'hands-usd'\n  | 'hands-wash'\n  | 'hands'\n  | 'handshake-alt-slash'\n  | 'handshake-alt'\n  | 'handshake-angle'\n  | 'handshake-simple-slash'\n  | 'handshake-simple'\n  | 'handshake-slash'\n  | 'handshake'\n  | 'hanukiah'\n  | 'hard-drive'\n  | 'hard-hat'\n  | 'hard-of-hearing'\n  | 'hashtag-lock'\n  | 'hashtag'\n  | 'hat-beach'\n  | 'hat-chef'\n  | 'hat-cowboy-side'\n  | 'hat-cowboy'\n  | 'hat-hard'\n  | 'hat-santa'\n  | 'hat-winter'\n  | 'hat-witch'\n  | 'hat-wizard'\n  | 'haykal'\n  | 'hdd'\n  | 'head-side-brain'\n  | 'head-side-cough-slash'\n  | 'head-side-cough'\n  | 'head-side-goggles'\n  | 'head-side-headphones'\n  | 'head-side-heart'\n  | 'head-side-mask'\n  | 'head-side-medical'\n  | 'head-side-virus'\n  | 'head-side'\n  | 'head-vr'\n  | 'header'\n  | 'heading'\n  | 'headphones-alt'\n  | 'headphones-simple'\n  | 'headphones'\n  | 'headset'\n  | 'heart-broken'\n  | 'heart-circle-bolt'\n  | 'heart-circle-check'\n  | 'heart-circle-exclamation'\n  | 'heart-circle-minus'\n  | 'heart-circle-plus'\n  | 'heart-circle-xmark'\n  | 'heart-circle'\n  | 'heart-crack'\n  | 'heart-half-alt'\n  | 'heart-half-stroke'\n  | 'heart-half'\n  | 'heart-music-camera-bolt'\n  | 'heart-pulse'\n  | 'heart-rate'\n  | 'heart-square'\n  | 'heart'\n  | 'heartbeat'\n  | 'heat'\n  | 'helicopter-symbol'\n  | 'helicopter'\n  | 'helmet-battle'\n  | 'helmet-safety'\n  | 'helmet-un'\n  | 'hexagon-check'\n  | 'hexagon-divide'\n  | 'hexagon-exclamation'\n  | 'hexagon-image'\n  | 'hexagon-minus'\n  | 'hexagon-plus'\n  | 'hexagon-vertical-nft-slanted'\n  | 'hexagon-vertical-nft'\n  | 'hexagon-xmark'\n  | 'hexagon'\n  | 'high-definition'\n  | 'highlighter-line'\n  | 'highlighter'\n  | 'hiking'\n  | 'hill-avalanche'\n  | 'hill-rockslide'\n  | 'hippo'\n  | 'history'\n  | 'hockey-mask'\n  | 'hockey-puck'\n  | 'hockey-stick-puck'\n  | 'hockey-sticks'\n  | 'holly-berry'\n  | 'home-alt'\n  | 'home-blank'\n  | 'home-heart'\n  | 'home-lg-alt'\n  | 'home-lg'\n  | 'home-user'\n  | 'home'\n  | 'honey-pot'\n  | 'hood-cloak'\n  | 'horizontal-rule'\n  | 'horse-head'\n  | 'horse-saddle'\n  | 'horse'\n  | 'hose-reel'\n  | 'hose'\n  | 'hospital-alt'\n  | 'hospital-symbol'\n  | 'hospital-user'\n  | 'hospital-wide'\n  | 'hospital'\n  | 'hospitals'\n  | 'hot-tub-person'\n  | 'hot-tub'\n  | 'hotdog'\n  | 'hotel'\n  | 'hourglass-1'\n  | 'hourglass-2'\n  | 'hourglass-3'\n  | 'hourglass-clock'\n  | 'hourglass-empty'\n  | 'hourglass-end'\n  | 'hourglass-half'\n  | 'hourglass-start'\n  | 'hourglass'\n  | 'house-blank'\n  | 'house-building'\n  | 'house-chimney-blank'\n  | 'house-chimney-crack'\n  | 'house-chimney-heart'\n  | 'house-chimney-medical'\n  | 'house-chimney-user'\n  | 'house-chimney-window'\n  | 'house-chimney'\n  | 'house-circle-check'\n  | 'house-circle-exclamation'\n  | 'house-circle-xmark'\n  | 'house-crack'\n  | 'house-damage'\n  | 'house-day'\n  | 'house-fire'\n  | 'house-flag'\n  | 'house-flood-water-circle-arrow-right'\n  | 'house-flood-water'\n  | 'house-flood'\n  | 'house-heart'\n  | 'house-laptop'\n  | 'house-leave'\n  | 'house-lock'\n  | 'house-medical-circle-check'\n  | 'house-medical-circle-exclamation'\n  | 'house-medical-circle-xmark'\n  | 'house-medical-flag'\n  | 'house-medical'\n  | 'house-night'\n  | 'house-person-arrive'\n  | 'house-person-depart'\n  | 'house-person-leave'\n  | 'house-person-return'\n  | 'house-return'\n  | 'house-signal'\n  | 'house-tree'\n  | 'house-tsunami'\n  | 'house-turret'\n  | 'house-user'\n  | 'house-water'\n  | 'house-window'\n  | 'house'\n  | 'hryvnia-sign'\n  | 'hryvnia'\n  | 'humidity'\n  | 'hundred-points'\n  | 'hurricane'\n  | 'hyphen'\n  | 'i-cursor'\n  | 'i'\n  | 'ice-cream'\n  | 'ice-skate'\n  | 'icicles'\n  | 'icons-alt'\n  | 'icons'\n  | 'id-badge'\n  | 'id-card-alt'\n  | 'id-card-clip'\n  | 'id-card'\n  | 'igloo'\n  | 'ils'\n  | 'image-landscape'\n  | 'image-polaroid-user'\n  | 'image-polaroid'\n  | 'image-portrait'\n  | 'image-slash'\n  | 'image-user'\n  | 'image'\n  | 'images-user'\n  | 'images'\n  | 'inbox-arrow-down'\n  | 'inbox-arrow-up'\n  | 'inbox-full'\n  | 'inbox-in'\n  | 'inbox-out'\n  | 'inbox'\n  | 'inboxes'\n  | 'indent'\n  | 'indian-rupee-sign'\n  | 'indian-rupee'\n  | 'industry-alt'\n  | 'industry-windows'\n  | 'industry'\n  | 'infinity'\n  | 'info-circle'\n  | 'info-square'\n  | 'info'\n  | 'inhaler'\n  | 'input-numeric'\n  | 'input-pipe'\n  | 'input-text'\n  | 'inr'\n  | 'institution'\n  | 'integral'\n  | 'interrobang'\n  | 'intersection'\n  | 'inventory'\n  | 'island-tree-palm'\n  | 'island-tropical'\n  | 'italic'\n  | 'j'\n  | 'jack-o-lantern'\n  | 'jar-wheat'\n  | 'jar'\n  | 'jedi'\n  | 'jet-fighter-up'\n  | 'jet-fighter'\n  | 'joint'\n  | 'journal-whills'\n  | 'joystick'\n  | 'jpy'\n  | 'jug-bottle'\n  | 'jug-detergent'\n  | 'jug'\n  | 'k'\n  | 'kaaba'\n  | 'kazoo'\n  | 'kerning'\n  | 'key-skeleton-left-right'\n  | 'key-skeleton'\n  | 'key'\n  | 'keyboard-brightness-low'\n  | 'keyboard-brightness'\n  | 'keyboard-down'\n  | 'keyboard-left'\n  | 'keyboard'\n  | 'keynote'\n  | 'khanda'\n  | 'kidneys'\n  | 'kip-sign'\n  | 'kiss-beam'\n  | 'kiss-wink-heart'\n  | 'kiss'\n  | 'kit-medical'\n  | 'kitchen-set'\n  | 'kite'\n  | 'kiwi-bird'\n  | 'kiwi-fruit'\n  | 'knife-kitchen'\n  | 'knife'\n  | 'krw'\n  | 'l'\n  | 'lacrosse-stick-ball'\n  | 'lacrosse-stick'\n  | 'ladder-water'\n  | 'lambda'\n  | 'lamp-desk'\n  | 'lamp-floor'\n  | 'lamp-street'\n  | 'lamp'\n  | 'land-mine-on'\n  | 'landmark-alt'\n  | 'landmark-dome'\n  | 'landmark-flag'\n  | 'landmark'\n  | 'landscape'\n  | 'language'\n  | 'laptop-arrow-down'\n  | 'laptop-binary'\n  | 'laptop-code'\n  | 'laptop-file'\n  | 'laptop-house'\n  | 'laptop-medical'\n  | 'laptop-mobile'\n  | 'laptop-slash'\n  | 'laptop'\n  | 'lari-sign'\n  | 'lasso-sparkles'\n  | 'lasso'\n  | 'laugh-beam'\n  | 'laugh-squint'\n  | 'laugh-wink'\n  | 'laugh'\n  | 'layer-group-minus'\n  | 'layer-group-plus'\n  | 'layer-group'\n  | 'layer-minus'\n  | 'layer-plus'\n  | 'leaf-heart'\n  | 'leaf-maple'\n  | 'leaf-oak'\n  | 'leaf'\n  | 'leafy-green'\n  | 'left-from-line'\n  | 'left-long-to-line'\n  | 'left-long'\n  | 'left-right'\n  | 'left-to-line'\n  | 'left'\n  | 'legal'\n  | 'lemon'\n  | 'less-than-equal'\n  | 'less-than'\n  | 'level-down-alt'\n  | 'level-down'\n  | 'level-up-alt'\n  | 'level-up'\n  | 'life-ring'\n  | 'light-ceiling'\n  | 'light-emergency-on'\n  | 'light-emergency'\n  | 'light-switch-off'\n  | 'light-switch-on'\n  | 'light-switch'\n  | 'lightbulb-cfl-on'\n  | 'lightbulb-cfl'\n  | 'lightbulb-dollar'\n  | 'lightbulb-exclamation-on'\n  | 'lightbulb-exclamation'\n  | 'lightbulb-gear'\n  | 'lightbulb-on'\n  | 'lightbulb-slash'\n  | 'lightbulb'\n  | 'lights-holiday'\n  | 'line-chart'\n  | 'line-columns'\n  | 'line-height'\n  | 'lines-leaning'\n  | 'link-horizontal-slash'\n  | 'link-horizontal'\n  | 'link-simple-slash'\n  | 'link-simple'\n  | 'link-slash'\n  | 'link'\n  | 'lips'\n  | 'lira-sign'\n  | 'list-1-2'\n  | 'list-alt'\n  | 'list-check'\n  | 'list-dots'\n  | 'list-dropdown'\n  | 'list-music'\n  | 'list-numeric'\n  | 'list-ol'\n  | 'list-radio'\n  | 'list-squares'\n  | 'list-timeline'\n  | 'list-tree'\n  | 'list-ul'\n  | 'list'\n  | 'litecoin-sign'\n  | 'loader'\n  | 'lobster'\n  | 'location-arrow'\n  | 'location-check'\n  | 'location-circle'\n  | 'location-crosshairs-slash'\n  | 'location-crosshairs'\n  | 'location-dot-slash'\n  | 'location-dot'\n  | 'location-exclamation'\n  | 'location-minus'\n  | 'location-pen'\n  | 'location-pin-lock'\n  | 'location-pin-slash'\n  | 'location-pin'\n  | 'location-plus'\n  | 'location-question'\n  | 'location-slash'\n  | 'location-smile'\n  | 'location-xmark'\n  | 'location'\n  | 'lock-a'\n  | 'lock-alt'\n  | 'lock-hashtag'\n  | 'lock-keyhole-open'\n  | 'lock-keyhole'\n  | 'lock-open-alt'\n  | 'lock-open'\n  | 'lock'\n  | 'locust'\n  | 'lollipop'\n  | 'lollypop'\n  | 'long-arrow-alt-down'\n  | 'long-arrow-alt-left'\n  | 'long-arrow-alt-right'\n  | 'long-arrow-alt-up'\n  | 'long-arrow-down'\n  | 'long-arrow-left'\n  | 'long-arrow-right'\n  | 'long-arrow-up'\n  | 'loveseat'\n  | 'low-vision'\n  | 'luchador-mask'\n  | 'luchador'\n  | 'luggage-cart'\n  | 'lungs-virus'\n  | 'lungs'\n  | 'm'\n  | 'mace'\n  | 'magic-wand-sparkles'\n  | 'magic'\n  | 'magnet'\n  | 'magnifying-glass-arrow-right'\n  | 'magnifying-glass-chart'\n  | 'magnifying-glass-dollar'\n  | 'magnifying-glass-location'\n  | 'magnifying-glass-minus'\n  | 'magnifying-glass-plus'\n  | 'magnifying-glass'\n  | 'mail-bulk'\n  | 'mail-forward'\n  | 'mail-reply-all'\n  | 'mail-reply'\n  | 'mailbox-flag-up'\n  | 'mailbox'\n  | 'maki-roll'\n  | 'makizushi'\n  | 'male'\n  | 'manat-sign'\n  | 'mandolin'\n  | 'mango'\n  | 'manhole'\n  | 'map-location-dot'\n  | 'map-location'\n  | 'map-marked-alt'\n  | 'map-marked'\n  | 'map-marker-alt-slash'\n  | 'map-marker-alt'\n  | 'map-marker-check'\n  | 'map-marker-edit'\n  | 'map-marker-exclamation'\n  | 'map-marker-minus'\n  | 'map-marker-plus'\n  | 'map-marker-question'\n  | 'map-marker-slash'\n  | 'map-marker-smile'\n  | 'map-marker-times'\n  | 'map-marker-xmark'\n  | 'map-marker'\n  | 'map-pin'\n  | 'map-signs'\n  | 'map'\n  | 'marker'\n  | 'mars-and-venus-burst'\n  | 'mars-and-venus'\n  | 'mars-double'\n  | 'mars-stroke-h'\n  | 'mars-stroke-right'\n  | 'mars-stroke-up'\n  | 'mars-stroke-v'\n  | 'mars-stroke'\n  | 'mars'\n  | 'martini-glass-citrus'\n  | 'martini-glass-empty'\n  | 'martini-glass'\n  | 'mask-face'\n  | 'mask-luchador'\n  | 'mask-snorkel'\n  | 'mask-ventilator'\n  | 'mask'\n  | 'masks-theater'\n  | 'mattress-pillow'\n  | 'maximize'\n  | 'meat'\n  | 'medal'\n  | 'medkit'\n  | 'megaphone'\n  | 'meh-blank'\n  | 'meh-rolling-eyes'\n  | 'meh'\n  | 'melon-slice'\n  | 'melon'\n  | 'memo-circle-check'\n  | 'memo-circle-info'\n  | 'memo-pad'\n  | 'memo'\n  | 'memory'\n  | 'menorah'\n  | 'mercury'\n  | 'merge'\n  | 'message-arrow-down'\n  | 'message-arrow-up-right'\n  | 'message-arrow-up'\n  | 'message-bot'\n  | 'message-captions'\n  | 'message-check'\n  | 'message-code'\n  | 'message-dollar'\n  | 'message-dots'\n  | 'message-edit'\n  | 'message-exclamation'\n  | 'message-heart'\n  | 'message-image'\n  | 'message-lines'\n  | 'message-medical'\n  | 'message-middle-top'\n  | 'message-middle'\n  | 'message-minus'\n  | 'message-music'\n  | 'message-pen'\n  | 'message-plus'\n  | 'message-question'\n  | 'message-quote'\n  | 'message-slash'\n  | 'message-smile'\n  | 'message-sms'\n  | 'message-text'\n  | 'message-times'\n  | 'message-xmark'\n  | 'message'\n  | 'messages-dollar'\n  | 'messages-question'\n  | 'messages'\n  | 'messaging'\n  | 'meteor'\n  | 'meter-bolt'\n  | 'meter-droplet'\n  | 'meter-fire'\n  | 'meter'\n  | 'microchip-ai'\n  | 'microchip'\n  | 'microphone-alt-slash'\n  | 'microphone-alt'\n  | 'microphone-circle-alt'\n  | 'microphone-circle'\n  | 'microphone-lines-slash'\n  | 'microphone-lines'\n  | 'microphone-slash'\n  | 'microphone-stand'\n  | 'microphone'\n  | 'microscope'\n  | 'microwave'\n  | 'mill-sign'\n  | 'mind-share'\n  | 'minimize'\n  | 'minus-circle'\n  | 'minus-hexagon'\n  | 'minus-large'\n  | 'minus-octagon'\n  | 'minus-square'\n  | 'minus'\n  | 'mistletoe'\n  | 'mitten'\n  | 'mobile-alt'\n  | 'mobile-android-alt'\n  | 'mobile-android'\n  | 'mobile-button'\n  | 'mobile-iphone'\n  | 'mobile-notch'\n  | 'mobile-phone'\n  | 'mobile-retro'\n  | 'mobile-screen-button'\n  | 'mobile-screen'\n  | 'mobile-signal-out'\n  | 'mobile-signal'\n  | 'mobile'\n  | 'money-bill-1-wave'\n  | 'money-bill-1'\n  | 'money-bill-alt'\n  | 'money-bill-simple-wave'\n  | 'money-bill-simple'\n  | 'money-bill-transfer'\n  | 'money-bill-trend-up'\n  | 'money-bill-wave-alt'\n  | 'money-bill-wave'\n  | 'money-bill-wheat'\n  | 'money-bill'\n  | 'money-bills-alt'\n  | 'money-bills-simple'\n  | 'money-bills'\n  | 'money-check-alt'\n  | 'money-check-dollar-pen'\n  | 'money-check-dollar'\n  | 'money-check-edit-alt'\n  | 'money-check-edit'\n  | 'money-check-pen'\n  | 'money-check'\n  | 'money-from-bracket'\n  | 'money-simple-from-bracket'\n  | 'monitor-heart-rate'\n  | 'monitor-waveform'\n  | 'monkey'\n  | 'monument'\n  | 'moon-cloud'\n  | 'moon-over-sun'\n  | 'moon-stars'\n  | 'moon'\n  | 'moped'\n  | 'mortar-board'\n  | 'mortar-pestle'\n  | 'mosque'\n  | 'mosquito-net'\n  | 'mosquito'\n  | 'motorcycle'\n  | 'mound'\n  | 'mountain-city'\n  | 'mountain-sun'\n  | 'mountain'\n  | 'mountains'\n  | 'mouse-alt'\n  | 'mouse-field'\n  | 'mouse-pointer'\n  | 'mouse'\n  | 'mp3-player'\n  | 'mug-hot'\n  | 'mug-marshmallows'\n  | 'mug-saucer'\n  | 'mug-tea-saucer'\n  | 'mug-tea'\n  | 'mug'\n  | 'multiply'\n  | 'museum'\n  | 'mushroom'\n  | 'music-alt-slash'\n  | 'music-alt'\n  | 'music-note-slash'\n  | 'music-note'\n  | 'music-slash'\n  | 'music'\n  | 'mustache'\n  | 'n'\n  | 'naira-sign'\n  | 'narwhal'\n  | 'navicon'\n  | 'nesting-dolls'\n  | 'network-wired'\n  | 'neuter'\n  | 'newspaper'\n  | 'nfc-lock'\n  | 'nfc-magnifying-glass'\n  | 'nfc-pen'\n  | 'nfc-signal'\n  | 'nfc-slash'\n  | 'nfc-symbol'\n  | 'nfc-trash'\n  | 'nfc'\n  | 'nigiri'\n  | 'nose'\n  | 'not-equal'\n  | 'notdef'\n  | 'note-medical'\n  | 'note-sticky'\n  | 'note'\n  | 'notebook'\n  | 'notes-medical'\n  | 'notes'\n  | 'o'\n  | 'object-exclude'\n  | 'object-group'\n  | 'object-intersect'\n  | 'object-subtract'\n  | 'object-ungroup'\n  | 'object-union'\n  | 'objects-align-bottom'\n  | 'objects-align-center-horizontal'\n  | 'objects-align-center-vertical'\n  | 'objects-align-left'\n  | 'objects-align-right'\n  | 'objects-align-top'\n  | 'objects-column'\n  | 'octagon-check'\n  | 'octagon-divide'\n  | 'octagon-exclamation'\n  | 'octagon-minus'\n  | 'octagon-plus'\n  | 'octagon-xmark'\n  | 'octagon'\n  | 'oil-can-drip'\n  | 'oil-can'\n  | 'oil-temp'\n  | 'oil-temperature'\n  | 'oil-well'\n  | 'olive-branch'\n  | 'olive'\n  | 'om'\n  | 'omega'\n  | 'onion'\n  | 'option'\n  | 'ornament'\n  | 'otter'\n  | 'outdent'\n  | 'outlet'\n  | 'oven'\n  | 'overline'\n  | 'p'\n  | 'page-break'\n  | 'page-caret-down'\n  | 'page-caret-up'\n  | 'page'\n  | 'pager'\n  | 'paint-brush-alt'\n  | 'paint-brush-fine'\n  | 'paint-brush'\n  | 'paint-roller'\n  | 'paintbrush-alt'\n  | 'paintbrush-fine'\n  | 'paintbrush-pencil'\n  | 'paintbrush'\n  | 'palette-boxes'\n  | 'palette'\n  | 'pallet-alt'\n  | 'pallet-box'\n  | 'pallet-boxes'\n  | 'pallet'\n  | 'pan-food'\n  | 'pan-frying'\n  | 'pancakes'\n  | 'panel-ews'\n  | 'panel-fire'\n  | 'panorama'\n  | 'paper-plane-alt'\n  | 'paper-plane-top'\n  | 'paper-plane'\n  | 'paperclip-vertical'\n  | 'paperclip'\n  | 'parachute-box'\n  | 'paragraph-left'\n  | 'paragraph-rtl'\n  | 'paragraph'\n  | 'parentheses'\n  | 'parenthesis'\n  | 'parking-circle-slash'\n  | 'parking-circle'\n  | 'parking-slash'\n  | 'parking'\n  | 'party-back'\n  | 'party-bell'\n  | 'party-horn'\n  | 'passport'\n  | 'pastafarianism'\n  | 'paste'\n  | 'pause-circle'\n  | 'pause'\n  | 'paw-alt'\n  | 'paw-claws'\n  | 'paw-simple'\n  | 'paw'\n  | 'peace'\n  | 'peach'\n  | 'peanut'\n  | 'peanuts'\n  | 'peapod'\n  | 'pear'\n  | 'pedestal'\n  | 'pegasus'\n  | 'pen-alt-slash'\n  | 'pen-alt'\n  | 'pen-circle'\n  | 'pen-clip-slash'\n  | 'pen-clip'\n  | 'pen-fancy-slash'\n  | 'pen-fancy'\n  | 'pen-field'\n  | 'pen-line'\n  | 'pen-nib-slash'\n  | 'pen-nib'\n  | 'pen-paintbrush'\n  | 'pen-ruler'\n  | 'pen-slash'\n  | 'pen-square'\n  | 'pen-swirl'\n  | 'pen-to-square'\n  | 'pen'\n  | 'pencil-alt'\n  | 'pencil-mechanical'\n  | 'pencil-paintbrush'\n  | 'pencil-ruler'\n  | 'pencil-slash'\n  | 'pencil-square'\n  | 'pencil'\n  | 'pennant'\n  | 'people-arrows-left-right'\n  | 'people-arrows'\n  | 'people-carry-box'\n  | 'people-carry'\n  | 'people-dress-simple'\n  | 'people-dress'\n  | 'people-group'\n  | 'people-line'\n  | 'people-pants-simple'\n  | 'people-pants'\n  | 'people-pulling'\n  | 'people-robbery'\n  | 'people-roof'\n  | 'people-simple'\n  | 'people'\n  | 'pepper-hot'\n  | 'pepper'\n  | 'percent'\n  | 'percentage'\n  | 'period'\n  | 'person-arrow-down-to-line'\n  | 'person-arrow-up-from-line'\n  | 'person-biking-mountain'\n  | 'person-biking'\n  | 'person-booth'\n  | 'person-breastfeeding'\n  | 'person-burst'\n  | 'person-cane'\n  | 'person-carry-box'\n  | 'person-carry'\n  | 'person-chalkboard'\n  | 'person-circle-check'\n  | 'person-circle-exclamation'\n  | 'person-circle-minus'\n  | 'person-circle-plus'\n  | 'person-circle-question'\n  | 'person-circle-xmark'\n  | 'person-digging'\n  | 'person-dolly-empty'\n  | 'person-dolly'\n  | 'person-dots-from-line'\n  | 'person-dress-burst'\n  | 'person-dress-simple'\n  | 'person-dress'\n  | 'person-drowning'\n  | 'person-falling-burst'\n  | 'person-falling'\n  | 'person-from-portal'\n  | 'person-half-dress'\n  | 'person-harassing'\n  | 'person-hiking'\n  | 'person-military-pointing'\n  | 'person-military-rifle'\n  | 'person-military-to-person'\n  | 'person-pinball'\n  | 'person-praying'\n  | 'person-pregnant'\n  | 'person-rays'\n  | 'person-rifle'\n  | 'person-running-fast'\n  | 'person-running'\n  | 'person-seat-reclined'\n  | 'person-seat'\n  | 'person-shelter'\n  | 'person-sign'\n  | 'person-simple'\n  | 'person-skating'\n  | 'person-ski-jumping'\n  | 'person-ski-lift'\n  | 'person-skiing-nordic'\n  | 'person-skiing'\n  | 'person-sledding'\n  | 'person-snowboarding'\n  | 'person-snowmobiling'\n  | 'person-swimming'\n  | 'person-through-window'\n  | 'person-to-door'\n  | 'person-to-portal'\n  | 'person-walking-arrow-loop-left'\n  | 'person-walking-arrow-right'\n  | 'person-walking-dashed-line-arrow-right'\n  | 'person-walking-luggage'\n  | 'person-walking-with-cane'\n  | 'person-walking'\n  | 'person'\n  | 'peseta-sign'\n  | 'peso-sign'\n  | 'phone-alt'\n  | 'phone-arrow-down-left'\n  | 'phone-arrow-down'\n  | 'phone-arrow-right'\n  | 'phone-arrow-up-right'\n  | 'phone-arrow-up'\n  | 'phone-circle-alt'\n  | 'phone-circle-down'\n  | 'phone-circle'\n  | 'phone-flip'\n  | 'phone-hangup'\n  | 'phone-incoming'\n  | 'phone-intercom'\n  | 'phone-laptop'\n  | 'phone-missed'\n  | 'phone-office'\n  | 'phone-outgoing'\n  | 'phone-plus'\n  | 'phone-rotary'\n  | 'phone-slash'\n  | 'phone-square-alt'\n  | 'phone-square-down'\n  | 'phone-square'\n  | 'phone-volume'\n  | 'phone-xmark'\n  | 'phone'\n  | 'photo-film-music'\n  | 'photo-film'\n  | 'photo-video'\n  | 'pi'\n  | 'piano-keyboard'\n  | 'piano'\n  | 'pickaxe'\n  | 'pickleball'\n  | 'pie-chart'\n  | 'pie'\n  | 'pig'\n  | 'piggy-bank'\n  | 'pills'\n  | 'pinata'\n  | 'pinball'\n  | 'pineapple'\n  | 'ping-pong-paddle-ball'\n  | 'pipe-circle-check'\n  | 'pipe-collar'\n  | 'pipe-section'\n  | 'pipe-smoking'\n  | 'pipe-valve'\n  | 'pipe'\n  | 'pizza-slice'\n  | 'pizza'\n  | 'place-of-worship'\n  | 'plane-alt'\n  | 'plane-arrival'\n  | 'plane-circle-check'\n  | 'plane-circle-exclamation'\n  | 'plane-circle-xmark'\n  | 'plane-departure'\n  | 'plane-engines'\n  | 'plane-lock'\n  | 'plane-prop'\n  | 'plane-slash'\n  | 'plane-tail'\n  | 'plane-up-slash'\n  | 'plane-up'\n  | 'plane'\n  | 'planet-moon'\n  | 'planet-ringed'\n  | 'plant-wilt'\n  | 'plate-utensils'\n  | 'plate-wheat'\n  | 'play-circle'\n  | 'play-pause'\n  | 'play'\n  | 'plug-circle-bolt'\n  | 'plug-circle-check'\n  | 'plug-circle-exclamation'\n  | 'plug-circle-minus'\n  | 'plug-circle-plus'\n  | 'plug-circle-xmark'\n  | 'plug'\n  | 'plus-circle'\n  | 'plus-hexagon'\n  | 'plus-large'\n  | 'plus-minus'\n  | 'plus-octagon'\n  | 'plus-square'\n  | 'plus'\n  | 'podcast'\n  | 'podium-star'\n  | 'podium'\n  | 'police-box'\n  | 'poll-h'\n  | 'poll-people'\n  | 'poll'\n  | 'pompebled'\n  | 'poo-bolt'\n  | 'poo-storm'\n  | 'poo'\n  | 'pool-8-ball'\n  | 'poop'\n  | 'popcorn'\n  | 'popsicle'\n  | 'portal-enter'\n  | 'portal-exit'\n  | 'portrait'\n  | 'pot-food'\n  | 'potato'\n  | 'pound-sign'\n  | 'power-off'\n  | 'pray'\n  | 'praying-hands'\n  | 'prescription-bottle-alt'\n  | 'prescription-bottle-medical'\n  | 'prescription-bottle-pill'\n  | 'prescription-bottle'\n  | 'prescription'\n  | 'presentation-screen'\n  | 'presentation'\n  | 'pretzel'\n  | 'print-magnifying-glass'\n  | 'print-search'\n  | 'print-slash'\n  | 'print'\n  | 'pro'\n  | 'procedures'\n  | 'project-diagram'\n  | 'projector'\n  | 'pump-medical'\n  | 'pump-soap'\n  | 'pump'\n  | 'pumpkin'\n  | 'puzzle-piece-alt'\n  | 'puzzle-piece-simple'\n  | 'puzzle-piece'\n  | 'puzzle'\n  | 'q'\n  | 'qrcode'\n  | 'question-circle'\n  | 'question-square'\n  | 'question'\n  | 'quidditch-broom-ball'\n  | 'quidditch'\n  | 'quote-left-alt'\n  | 'quote-left'\n  | 'quote-right-alt'\n  | 'quote-right'\n  | 'quotes'\n  | 'quran'\n  | 'r'\n  | 'rabbit-fast'\n  | 'rabbit-running'\n  | 'rabbit'\n  | 'racquet'\n  | 'radar'\n  | 'radiation-alt'\n  | 'radiation'\n  | 'radio-alt'\n  | 'radio-tuner'\n  | 'radio'\n  | 'rainbow'\n  | 'raindrops'\n  | 'ram'\n  | 'ramp-loading'\n  | 'random'\n  | 'ranking-star'\n  | 'raygun'\n  | 'receipt'\n  | 'record-vinyl'\n  | 'rectangle-ad'\n  | 'rectangle-barcode'\n  | 'rectangle-code'\n  | 'rectangle-hd'\n  | 'rectangle-history-circle-plus'\n  | 'rectangle-history-circle-user'\n  | 'rectangle-history'\n  | 'rectangle-landscape'\n  | 'rectangle-list'\n  | 'rectangle-portrait'\n  | 'rectangle-pro'\n  | 'rectangle-sd'\n  | 'rectangle-terminal'\n  | 'rectangle-times'\n  | 'rectangle-vertical-history'\n  | 'rectangle-vertical'\n  | 'rectangle-wide'\n  | 'rectangle-xmark'\n  | 'rectangle'\n  | 'rectangles-mixed'\n  | 'recycle'\n  | 'redo-alt'\n  | 'redo'\n  | 'reel'\n  | 'refresh'\n  | 'refrigerator'\n  | 'registered'\n  | 'remove-format'\n  | 'remove'\n  | 'reorder'\n  | 'repeat-1-alt'\n  | 'repeat-1'\n  | 'repeat-alt'\n  | 'repeat'\n  | 'reply-all'\n  | 'reply-clock'\n  | 'reply-time'\n  | 'reply'\n  | 'republican'\n  | 'restroom-simple'\n  | 'restroom'\n  | 'retweet-alt'\n  | 'retweet'\n  | 'rhombus'\n  | 'ribbon'\n  | 'right-from-bracket'\n  | 'right-from-line'\n  | 'right-left-large'\n  | 'right-left'\n  | 'right-long-to-line'\n  | 'right-long'\n  | 'right-to-bracket'\n  | 'right-to-line'\n  | 'right'\n  | 'ring-diamond'\n  | 'ring'\n  | 'rings-wedding'\n  | 'rmb'\n  | 'road-barrier'\n  | 'road-bridge'\n  | 'road-circle-check'\n  | 'road-circle-exclamation'\n  | 'road-circle-xmark'\n  | 'road-lock'\n  | 'road-spikes'\n  | 'road'\n  | 'robot-astromech'\n  | 'robot'\n  | 'rocket-launch'\n  | 'rocket'\n  | 'rod-asclepius'\n  | 'rod-snake'\n  | 'roller-coaster'\n  | 'rotate-back'\n  | 'rotate-backward'\n  | 'rotate-exclamation'\n  | 'rotate-forward'\n  | 'rotate-left'\n  | 'rotate-right'\n  | 'rotate'\n  | 'rouble'\n  | 'route-highway'\n  | 'route-interstate'\n  | 'route'\n  | 'router'\n  | 'rows'\n  | 'rss-square'\n  | 'rss'\n  | 'rub'\n  | 'ruble-sign'\n  | 'ruble'\n  | 'rug'\n  | 'rugby-ball'\n  | 'ruler-combined'\n  | 'ruler-horizontal'\n  | 'ruler-triangle'\n  | 'ruler-vertical'\n  | 'ruler'\n  | 'running'\n  | 'rupee-sign'\n  | 'rupee'\n  | 'rupiah-sign'\n  | 'rv'\n  | 's'\n  | 'sack-dollar'\n  | 'sack-xmark'\n  | 'sack'\n  | 'sad-cry'\n  | 'sad-tear'\n  | 'sailboat'\n  | 'salad'\n  | 'salt-shaker'\n  | 'sandwich'\n  | 'satellite-dish'\n  | 'satellite'\n  | 'sausage'\n  | 'save-circle-arrow-right'\n  | 'save-circle-xmark'\n  | 'save-times'\n  | 'save'\n  | 'sax-hot'\n  | 'saxophone-fire'\n  | 'saxophone'\n  | 'scale-balanced'\n  | 'scale-unbalanced-flip'\n  | 'scale-unbalanced'\n  | 'scalpel-line-dashed'\n  | 'scalpel-path'\n  | 'scalpel'\n  | 'scanner-gun'\n  | 'scanner-image'\n  | 'scanner-keyboard'\n  | 'scanner-touchscreen'\n  | 'scanner'\n  | 'scarecrow'\n  | 'scarf'\n  | 'school-circle-check'\n  | 'school-circle-exclamation'\n  | 'school-circle-xmark'\n  | 'school-flag'\n  | 'school-lock'\n  | 'school'\n  | 'scissors'\n  | 'screen-users'\n  | 'screencast'\n  | 'screenshot'\n  | 'screwdriver-wrench'\n  | 'screwdriver'\n  | 'scribble'\n  | 'scroll-old'\n  | 'scroll-ribbon'\n  | 'scroll-torah'\n  | 'scroll'\n  | 'scrubber'\n  | 'scythe'\n  | 'sd-card'\n  | 'sd-cards'\n  | 'seal-exclamation'\n  | 'seal-question'\n  | 'seal'\n  | 'search-dollar'\n  | 'search-location'\n  | 'search-minus'\n  | 'search-plus'\n  | 'search'\n  | 'seat-airline'\n  | 'section'\n  | 'seedling'\n  | 'semicolon'\n  | 'send-back'\n  | 'send-backward'\n  | 'send'\n  | 'sensor-alert'\n  | 'sensor-cloud'\n  | 'sensor-fire'\n  | 'sensor-on'\n  | 'sensor-smoke'\n  | 'sensor-triangle-exclamation'\n  | 'sensor'\n  | 'server'\n  | 'shapes'\n  | 'share-all'\n  | 'share-alt-square'\n  | 'share-alt'\n  | 'share-from-square'\n  | 'share-nodes'\n  | 'share-square'\n  | 'share'\n  | 'sheep'\n  | 'sheet-plastic'\n  | 'shekel-sign'\n  | 'shekel'\n  | 'shelves-empty'\n  | 'shelves'\n  | 'sheqel-sign'\n  | 'sheqel'\n  | 'shield-alt'\n  | 'shield-blank'\n  | 'shield-cat'\n  | 'shield-check'\n  | 'shield-cross'\n  | 'shield-dog'\n  | 'shield-exclamation'\n  | 'shield-halved'\n  | 'shield-heart'\n  | 'shield-keyhole'\n  | 'shield-minus'\n  | 'shield-plus'\n  | 'shield-quartered'\n  | 'shield-slash'\n  | 'shield-times'\n  | 'shield-virus'\n  | 'shield-xmark'\n  | 'shield'\n  | 'ship'\n  | 'shipping-fast'\n  | 'shipping-timed'\n  | 'shirt-long-sleeve'\n  | 'shirt-running'\n  | 'shirt-tank-top'\n  | 'shirt'\n  | 'shish-kebab'\n  | 'shoe-prints'\n  | 'shop-lock'\n  | 'shop-slash'\n  | 'shop'\n  | 'shopping-bag'\n  | 'shopping-basket-alt'\n  | 'shopping-basket'\n  | 'shopping-cart'\n  | 'shortcake'\n  | 'shovel-snow'\n  | 'shovel'\n  | 'shower-alt'\n  | 'shower-down'\n  | 'shower'\n  | 'shredder'\n  | 'shrimp'\n  | 'shuffle'\n  | 'shutters'\n  | 'shuttle-space'\n  | 'shuttle-van'\n  | 'shuttlecock'\n  | 'sickle'\n  | 'sidebar-flip'\n  | 'sidebar'\n  | 'sigma'\n  | 'sign-hanging'\n  | 'sign-in-alt'\n  | 'sign-in'\n  | 'sign-language'\n  | 'sign-out-alt'\n  | 'sign-out'\n  | 'sign'\n  | 'signal-1'\n  | 'signal-2'\n  | 'signal-3'\n  | 'signal-4'\n  | 'signal-5'\n  | 'signal-alt-1'\n  | 'signal-alt-2'\n  | 'signal-alt-3'\n  | 'signal-alt-4'\n  | 'signal-alt-slash'\n  | 'signal-alt'\n  | 'signal-bars-fair'\n  | 'signal-bars-good'\n  | 'signal-bars-slash'\n  | 'signal-bars-strong'\n  | 'signal-bars-weak'\n  | 'signal-bars'\n  | 'signal-fair'\n  | 'signal-good'\n  | 'signal-perfect'\n  | 'signal-slash'\n  | 'signal-stream-slash'\n  | 'signal-stream'\n  | 'signal-strong'\n  | 'signal-weak'\n  | 'signal'\n  | 'signature-lock'\n  | 'signature-slash'\n  | 'signature'\n  | 'signing'\n  | 'signs-post'\n  | 'sim-card'\n  | 'sim-cards'\n  | 'sink'\n  | 'siren-on'\n  | 'siren'\n  | 'sitemap'\n  | 'skating'\n  | 'skeleton-ribs'\n  | 'skeleton'\n  | 'ski-boot-ski'\n  | 'ski-boot'\n  | 'ski-jump'\n  | 'ski-lift'\n  | 'skiing-nordic'\n  | 'skiing'\n  | 'skull-cow'\n  | 'skull-crossbones'\n  | 'skull'\n  | 'slash-back'\n  | 'slash-forward'\n  | 'slash'\n  | 'sledding'\n  | 'sleigh'\n  | 'slider'\n  | 'sliders-h-square'\n  | 'sliders-h'\n  | 'sliders-simple'\n  | 'sliders-up'\n  | 'sliders-v-square'\n  | 'sliders-v'\n  | 'sliders'\n  | 'slot-machine'\n  | 'smile-beam'\n  | 'smile-plus'\n  | 'smile-wink'\n  | 'smile'\n  | 'smog'\n  | 'smoke'\n  | 'smoking-ban'\n  | 'smoking'\n  | 'sms'\n  | 'snake'\n  | 'snooze'\n  | 'snow-blowing'\n  | 'snowboarding'\n  | 'snowflake-droplets'\n  | 'snowflake'\n  | 'snowflakes'\n  | 'snowman-head'\n  | 'snowman'\n  | 'snowmobile'\n  | 'snowplow'\n  | 'soap'\n  | 'soccer-ball'\n  | 'socks'\n  | 'soft-serve'\n  | 'solar-panel'\n  | 'solar-system'\n  | 'sort-alpha-asc'\n  | 'sort-alpha-desc'\n  | 'sort-alpha-down-alt'\n  | 'sort-alpha-down'\n  | 'sort-alpha-up-alt'\n  | 'sort-alpha-up'\n  | 'sort-alt'\n  | 'sort-amount-asc'\n  | 'sort-amount-desc'\n  | 'sort-amount-down-alt'\n  | 'sort-amount-down'\n  | 'sort-amount-up-alt'\n  | 'sort-amount-up'\n  | 'sort-asc'\n  | 'sort-circle-down'\n  | 'sort-circle-up'\n  | 'sort-circle'\n  | 'sort-desc'\n  | 'sort-down'\n  | 'sort-numeric-asc'\n  | 'sort-numeric-desc'\n  | 'sort-numeric-down-alt'\n  | 'sort-numeric-down'\n  | 'sort-numeric-up-alt'\n  | 'sort-numeric-up'\n  | 'sort-shapes-down-alt'\n  | 'sort-shapes-down'\n  | 'sort-shapes-up-alt'\n  | 'sort-shapes-up'\n  | 'sort-size-down-alt'\n  | 'sort-size-down'\n  | 'sort-size-up-alt'\n  | 'sort-size-up'\n  | 'sort-up-down'\n  | 'sort-up'\n  | 'sort'\n  | 'soup'\n  | 'spa'\n  | 'space-shuttle'\n  | 'space-station-moon-alt'\n  | 'space-station-moon-construction'\n  | 'space-station-moon'\n  | 'spade'\n  | 'spaghetti-monster-flying'\n  | 'sparkle'\n  | 'sparkles'\n  | 'speaker'\n  | 'speakers'\n  | 'spell-check'\n  | 'spider-black-widow'\n  | 'spider-web'\n  | 'spider'\n  | 'spinner-third'\n  | 'spinner'\n  | 'split'\n  | 'splotch'\n  | 'spoon'\n  | 'sportsball'\n  | 'spray-can-sparkles'\n  | 'spray-can'\n  | 'sprinkler-ceiling'\n  | 'sprinkler'\n  | 'sprout'\n  | 'square-0'\n  | 'square-1'\n  | 'square-2'\n  | 'square-3'\n  | 'square-4'\n  | 'square-5'\n  | 'square-6'\n  | 'square-7'\n  | 'square-8'\n  | 'square-9'\n  | 'square-a-lock'\n  | 'square-a'\n  | 'square-ampersand'\n  | 'square-arrow-down-left'\n  | 'square-arrow-down-right'\n  | 'square-arrow-down'\n  | 'square-arrow-left'\n  | 'square-arrow-right'\n  | 'square-arrow-up-left'\n  | 'square-arrow-up-right'\n  | 'square-arrow-up'\n  | 'square-b'\n  | 'square-bolt'\n  | 'square-c'\n  | 'square-caret-down'\n  | 'square-caret-left'\n  | 'square-caret-right'\n  | 'square-caret-up'\n  | 'square-check'\n  | 'square-chevron-down'\n  | 'square-chevron-left'\n  | 'square-chevron-right'\n  | 'square-chevron-up'\n  | 'square-code'\n  | 'square-d'\n  | 'square-dashed-circle-plus'\n  | 'square-dashed'\n  | 'square-divide'\n  | 'square-dollar'\n  | 'square-down-left'\n  | 'square-down-right'\n  | 'square-down'\n  | 'square-e'\n  | 'square-ellipsis-vertical'\n  | 'square-ellipsis'\n  | 'square-envelope'\n  | 'square-exclamation'\n  | 'square-f'\n  | 'square-fragile'\n  | 'square-full'\n  | 'square-g'\n  | 'square-h'\n  | 'square-heart'\n  | 'square-i'\n  | 'square-info'\n  | 'square-j'\n  | 'square-k'\n  | 'square-kanban'\n  | 'square-l'\n  | 'square-left'\n  | 'square-list'\n  | 'square-m'\n  | 'square-minus'\n  | 'square-n'\n  | 'square-nfi'\n  | 'square-o'\n  | 'square-p'\n  | 'square-parking-slash'\n  | 'square-parking'\n  | 'square-pen'\n  | 'square-person-confined'\n  | 'square-phone-flip'\n  | 'square-phone-hangup'\n  | 'square-phone'\n  | 'square-plus'\n  | 'square-poll-horizontal'\n  | 'square-poll-vertical'\n  | 'square-q'\n  | 'square-quarters'\n  | 'square-question'\n  | 'square-quote'\n  | 'square-r'\n  | 'square-right'\n  | 'square-ring'\n  | 'square-root-alt'\n  | 'square-root-variable'\n  | 'square-root'\n  | 'square-rss'\n  | 'square-s'\n  | 'square-share-nodes'\n  | 'square-sliders-vertical'\n  | 'square-sliders'\n  | 'square-small'\n  | 'square-star'\n  | 'square-t'\n  | 'square-terminal'\n  | 'square-this-way-up'\n  | 'square-u'\n  | 'square-up-left'\n  | 'square-up-right'\n  | 'square-up'\n  | 'square-user'\n  | 'square-v'\n  | 'square-virus'\n  | 'square-w'\n  | 'square-wine-glass-crack'\n  | 'square-x'\n  | 'square-xmark'\n  | 'square-y'\n  | 'square-z'\n  | 'square'\n  | 'squid'\n  | 'squirrel'\n  | 'staff-aesculapius'\n  | 'staff-snake'\n  | 'staff'\n  | 'stairs'\n  | 'stamp'\n  | 'standard-definition'\n  | 'stapler'\n  | 'star-and-crescent'\n  | 'star-christmas'\n  | 'star-circle'\n  | 'star-exclamation'\n  | 'star-half-alt'\n  | 'star-half-stroke'\n  | 'star-half'\n  | 'star-of-david'\n  | 'star-of-life'\n  | 'star-sharp-half-alt'\n  | 'star-sharp-half-stroke'\n  | 'star-sharp-half'\n  | 'star-sharp'\n  | 'star-shooting'\n  | 'star'\n  | 'starfighter-alt-advanced'\n  | 'starfighter-alt'\n  | 'starfighter-twin-ion-engine-advanced'\n  | 'starfighter-twin-ion-engine'\n  | 'starfighter'\n  | 'stars'\n  | 'starship-freighter'\n  | 'starship'\n  | 'steak'\n  | 'steering-wheel'\n  | 'step-backward'\n  | 'step-forward'\n  | 'sterling-sign'\n  | 'stethoscope'\n  | 'sticky-note'\n  | 'stocking'\n  | 'stomach'\n  | 'stop-circle'\n  | 'stop'\n  | 'stopwatch-20'\n  | 'stopwatch'\n  | 'store-alt-slash'\n  | 'store-alt'\n  | 'store-lock'\n  | 'store-slash'\n  | 'store'\n  | 'strawberry'\n  | 'stream'\n  | 'street-view'\n  | 'stretcher'\n  | 'strikethrough'\n  | 'stroopwafel'\n  | 'subscript'\n  | 'subtract'\n  | 'subway-tunnel'\n  | 'subway'\n  | 'suitcase-medical'\n  | 'suitcase-rolling'\n  | 'suitcase'\n  | 'sun-alt'\n  | 'sun-bright'\n  | 'sun-cloud'\n  | 'sun-dust'\n  | 'sun-haze'\n  | 'sun-plant-wilt'\n  | 'sun'\n  | 'sunglasses'\n  | 'sunrise'\n  | 'sunset'\n  | 'superscript'\n  | 'surprise'\n  | 'sushi-roll'\n  | 'sushi'\n  | 'swatchbook'\n  | 'swimmer'\n  | 'swimming-pool'\n  | 'sword-laser-alt'\n  | 'sword-laser'\n  | 'sword'\n  | 'swords-laser'\n  | 'swords'\n  | 'symbols'\n  | 'synagogue'\n  | 'sync-alt'\n  | 'sync'\n  | 'syringe'\n  | 't-shirt'\n  | 't'\n  | 'table-cells-large'\n  | 'table-cells'\n  | 'table-columns'\n  | 'table-layout'\n  | 'table-list'\n  | 'table-picnic'\n  | 'table-pivot'\n  | 'table-rows'\n  | 'table-tennis-paddle-ball'\n  | 'table-tennis'\n  | 'table-tree'\n  | 'table'\n  | 'tablet-alt'\n  | 'tablet-android-alt'\n  | 'tablet-android'\n  | 'tablet-button'\n  | 'tablet-rugged'\n  | 'tablet-screen-button'\n  | 'tablet-screen'\n  | 'tablet'\n  | 'tablets'\n  | 'tachograph-digital'\n  | 'tachometer-alt-average'\n  | 'tachometer-alt-fast'\n  | 'tachometer-alt-fastest'\n  | 'tachometer-alt-slow'\n  | 'tachometer-alt-slowest'\n  | 'tachometer-alt'\n  | 'tachometer-average'\n  | 'tachometer-fast'\n  | 'tachometer-fastest'\n  | 'tachometer-slow'\n  | 'tachometer-slowest'\n  | 'tachometer'\n  | 'taco'\n  | 'tag'\n  | 'tags'\n  | 'tally-1'\n  | 'tally-2'\n  | 'tally-3'\n  | 'tally-4'\n  | 'tally-5'\n  | 'tally'\n  | 'tamale'\n  | 'tanakh'\n  | 'tank-water'\n  | 'tape'\n  | 'tarp-droplet'\n  | 'tarp'\n  | 'tasks-alt'\n  | 'tasks'\n  | 'taxi-bus'\n  | 'taxi'\n  | 'teddy-bear'\n  | 'teeth-open'\n  | 'teeth'\n  | 'telescope'\n  | 'teletype-answer'\n  | 'teletype'\n  | 'television'\n  | 'temperature-0'\n  | 'temperature-1'\n  | 'temperature-2'\n  | 'temperature-3'\n  | 'temperature-4'\n  | 'temperature-arrow-down'\n  | 'temperature-arrow-up'\n  | 'temperature-down'\n  | 'temperature-empty'\n  | 'temperature-frigid'\n  | 'temperature-full'\n  | 'temperature-half'\n  | 'temperature-high'\n  | 'temperature-hot'\n  | 'temperature-list'\n  | 'temperature-low'\n  | 'temperature-quarter'\n  | 'temperature-snow'\n  | 'temperature-sun'\n  | 'temperature-three-quarters'\n  | 'temperature-up'\n  | 'tenge-sign'\n  | 'tenge'\n  | 'tennis-ball'\n  | 'tent-arrow-down-to-line'\n  | 'tent-arrow-left-right'\n  | 'tent-arrow-turn-left'\n  | 'tent-arrows-down'\n  | 'tent'\n  | 'tents'\n  | 'terminal'\n  | 'text-height'\n  | 'text-size'\n  | 'text-slash'\n  | 'text-width'\n  | 'text'\n  | 'th-large'\n  | 'th-list'\n  | 'th'\n  | 'theater-masks'\n  | 'thermometer-0'\n  | 'thermometer-1'\n  | 'thermometer-2'\n  | 'thermometer-3'\n  | 'thermometer-4'\n  | 'thermometer-empty'\n  | 'thermometer-full'\n  | 'thermometer-half'\n  | 'thermometer-quarter'\n  | 'thermometer-three-quarters'\n  | 'thermometer'\n  | 'theta'\n  | 'thought-bubble'\n  | 'thumb-tack'\n  | 'thumbs-down'\n  | 'thumbs-up'\n  | 'thumbtack'\n  | 'thunderstorm-moon'\n  | 'thunderstorm-sun'\n  | 'thunderstorm'\n  | 'tick'\n  | 'ticket-airline'\n  | 'ticket-alt'\n  | 'ticket-simple'\n  | 'ticket'\n  | 'tickets-airline'\n  | 'tilde'\n  | 'timeline-arrow'\n  | 'timeline'\n  | 'timer'\n  | 'times-circle'\n  | 'times-hexagon'\n  | 'times-octagon'\n  | 'times-rectangle'\n  | 'times-square'\n  | 'times-to-slot'\n  | 'times'\n  | 'tint-slash'\n  | 'tint'\n  | 'tire-flat'\n  | 'tire-pressure-warning'\n  | 'tire-rugged'\n  | 'tire'\n  | 'tired'\n  | 'toggle-large-off'\n  | 'toggle-large-on'\n  | 'toggle-off'\n  | 'toggle-on'\n  | 'toilet-paper-alt'\n  | 'toilet-paper-blank-under'\n  | 'toilet-paper-blank'\n  | 'toilet-paper-check'\n  | 'toilet-paper-reverse-alt'\n  | 'toilet-paper-reverse-slash'\n  | 'toilet-paper-reverse'\n  | 'toilet-paper-slash'\n  | 'toilet-paper-under-slash'\n  | 'toilet-paper-under'\n  | 'toilet-paper-xmark'\n  | 'toilet-paper'\n  | 'toilet-portable'\n  | 'toilet'\n  | 'toilets-portable'\n  | 'tomato'\n  | 'tombstone-alt'\n  | 'tombstone-blank'\n  | 'tombstone'\n  | 'toolbox'\n  | 'tools'\n  | 'tooth'\n  | 'toothbrush'\n  | 'torah'\n  | 'torii-gate'\n  | 'tornado'\n  | 'tower-broadcast'\n  | 'tower-cell'\n  | 'tower-control'\n  | 'tower-observation'\n  | 'tractor'\n  | 'trademark'\n  | 'traffic-cone'\n  | 'traffic-light-go'\n  | 'traffic-light-slow'\n  | 'traffic-light-stop'\n  | 'traffic-light'\n  | 'trailer'\n  | 'train-subway-tunnel'\n  | 'train-subway'\n  | 'train-track'\n  | 'train-tram'\n  | 'train-tunnel'\n  | 'train'\n  | 'tram'\n  | 'transformer-bolt'\n  | 'transgender-alt'\n  | 'transgender'\n  | 'transporter-1'\n  | 'transporter-2'\n  | 'transporter-3'\n  | 'transporter-4'\n  | 'transporter-5'\n  | 'transporter-6'\n  | 'transporter-7'\n  | 'transporter-empty'\n  | 'transporter'\n  | 'trash-alt-slash'\n  | 'trash-alt'\n  | 'trash-arrow-turn-left'\n  | 'trash-arrow-up'\n  | 'trash-can-arrow-turn-left'\n  | 'trash-can-arrow-up'\n  | 'trash-can-check'\n  | 'trash-can-clock'\n  | 'trash-can-list'\n  | 'trash-can-plus'\n  | 'trash-can-slash'\n  | 'trash-can-undo'\n  | 'trash-can-xmark'\n  | 'trash-can'\n  | 'trash-check'\n  | 'trash-circle'\n  | 'trash-clock'\n  | 'trash-list'\n  | 'trash-plus'\n  | 'trash-restore-alt'\n  | 'trash-restore'\n  | 'trash-slash'\n  | 'trash-undo-alt'\n  | 'trash-undo'\n  | 'trash-xmark'\n  | 'trash'\n  | 'treasure-chest'\n  | 'tree-alt'\n  | 'tree-christmas'\n  | 'tree-city'\n  | 'tree-deciduous'\n  | 'tree-decorated'\n  | 'tree-large'\n  | 'tree-palm'\n  | 'tree'\n  | 'trees'\n  | 'trian-balbot'\n  | 'triangle-circle-square'\n  | 'triangle-exclamation'\n  | 'triangle-instrument'\n  | 'triangle-music'\n  | 'triangle-person-digging'\n  | 'triangle'\n  | 'tricycle-adult'\n  | 'tricycle'\n  | 'trillium'\n  | 'trophy-alt'\n  | 'trophy-star'\n  | 'trophy'\n  | 'trowel-bricks'\n  | 'trowel'\n  | 'truck-arrow-right'\n  | 'truck-bolt'\n  | 'truck-clock'\n  | 'truck-container-empty'\n  | 'truck-container'\n  | 'truck-couch'\n  | 'truck-droplet'\n  | 'truck-fast'\n  | 'truck-field-un'\n  | 'truck-field'\n  | 'truck-flatbed'\n  | 'truck-front'\n  | 'truck-loading'\n  | 'truck-medical'\n  | 'truck-monster'\n  | 'truck-moving'\n  | 'truck-pickup'\n  | 'truck-plane'\n  | 'truck-plow'\n  | 'truck-ramp-box'\n  | 'truck-ramp-couch'\n  | 'truck-ramp'\n  | 'truck-tow'\n  | 'truck'\n  | 'trumpet'\n  | 'try'\n  | 'tshirt'\n  | 'tty-answer'\n  | 'tty'\n  | 'tugrik-sign'\n  | 'turkey'\n  | 'turkish-lira-sign'\n  | 'turkish-lira'\n  | 'turn-down-left'\n  | 'turn-down-right'\n  | 'turn-down'\n  | 'turn-up'\n  | 'turntable'\n  | 'turtle'\n  | 'tv-alt'\n  | 'tv-music'\n  | 'tv-retro'\n  | 'tv'\n  | 'typewriter'\n  | 'u'\n  | 'ufo-beam'\n  | 'ufo'\n  | 'umbrella-alt'\n  | 'umbrella-beach'\n  | 'umbrella-simple'\n  | 'umbrella'\n  | 'underline'\n  | 'undo-alt'\n  | 'undo'\n  | 'unicorn'\n  | 'uniform-martial-arts'\n  | 'union'\n  | 'universal-access'\n  | 'university'\n  | 'unlink'\n  | 'unlock-alt'\n  | 'unlock-keyhole'\n  | 'unlock'\n  | 'unsorted'\n  | 'up-down-left-right'\n  | 'up-down'\n  | 'up-from-bracket'\n  | 'up-from-dotted-line'\n  | 'up-from-line'\n  | 'up-left'\n  | 'up-long'\n  | 'up-right-and-down-left-from-center'\n  | 'up-right-from-square'\n  | 'up-right'\n  | 'up-to-dotted-line'\n  | 'up-to-line'\n  | 'up'\n  | 'upload'\n  | 'usb-drive'\n  | 'usd-circle'\n  | 'usd-square'\n  | 'usd'\n  | 'user-alien'\n  | 'user-alt-slash'\n  | 'user-alt'\n  | 'user-astronaut'\n  | 'user-bounty-hunter'\n  | 'user-chart'\n  | 'user-check'\n  | 'user-chef'\n  | 'user-circle'\n  | 'user-clock'\n  | 'user-cog'\n  | 'user-construction'\n  | 'user-cowboy'\n  | 'user-crown'\n  | 'user-doctor-hair-long'\n  | 'user-doctor-hair'\n  | 'user-doctor-message'\n  | 'user-doctor'\n  | 'user-edit'\n  | 'user-friends'\n  | 'user-gear'\n  | 'user-graduate'\n  | 'user-group-crown'\n  | 'user-group-simple'\n  | 'user-group'\n  | 'user-hair-buns'\n  | 'user-hair-long'\n  | 'user-hair-mullet'\n  | 'user-hair'\n  | 'user-hard-hat'\n  | 'user-headset'\n  | 'user-helmet-safety'\n  | 'user-injured'\n  | 'user-large-slash'\n  | 'user-large'\n  | 'user-lock'\n  | 'user-magnifying-glass'\n  | 'user-md-chat'\n  | 'user-md'\n  | 'user-minus'\n  | 'user-music'\n  | 'user-ninja'\n  | 'user-nurse-hair-long'\n  | 'user-nurse-hair'\n  | 'user-nurse'\n  | 'user-pen'\n  | 'user-pilot-tie'\n  | 'user-pilot'\n  | 'user-plus'\n  | 'user-police-tie'\n  | 'user-police'\n  | 'user-robot-xmarks'\n  | 'user-robot'\n  | 'user-secret'\n  | 'user-shakespeare'\n  | 'user-shield'\n  | 'user-slash'\n  | 'user-tag'\n  | 'user-tie-hair-long'\n  | 'user-tie-hair'\n  | 'user-tie'\n  | 'user-times'\n  | 'user-unlock'\n  | 'user-visor'\n  | 'user-vneck-hair-long'\n  | 'user-vneck-hair'\n  | 'user-vneck'\n  | 'user-xmark'\n  | 'user'\n  | 'users-between-lines'\n  | 'users-class'\n  | 'users-cog'\n  | 'users-crown'\n  | 'users-gear'\n  | 'users-line'\n  | 'users-medical'\n  | 'users-rays'\n  | 'users-rectangle'\n  | 'users-slash'\n  | 'users-viewfinder'\n  | 'users'\n  | 'utensil-fork'\n  | 'utensil-knife'\n  | 'utensil-spoon'\n  | 'utensils-alt'\n  | 'utensils-slash'\n  | 'utensils'\n  | 'utility-pole-double'\n  | 'utility-pole'\n  | 'v'\n  | 'vacuum-robot'\n  | 'vacuum'\n  | 'value-absolute'\n  | 'van-shuttle'\n  | 'vault'\n  | 'vcard'\n  | 'vector-circle'\n  | 'vector-polygon'\n  | 'vector-square'\n  | 'vent-damper'\n  | 'venus-double'\n  | 'venus-mars'\n  | 'venus'\n  | 'vest-patches'\n  | 'vest'\n  | 'vhs'\n  | 'vial-circle-check'\n  | 'vial-virus'\n  | 'vial'\n  | 'vials'\n  | 'video-arrow-down-left'\n  | 'video-arrow-up-right'\n  | 'video-camera'\n  | 'video-circle'\n  | 'video-handheld'\n  | 'video-plus'\n  | 'video-slash'\n  | 'video'\n  | 'vihara'\n  | 'violin'\n  | 'virus-covid-slash'\n  | 'virus-covid'\n  | 'virus-slash'\n  | 'virus'\n  | 'viruses'\n  | 'voicemail'\n  | 'volcano'\n  | 'volleyball-ball'\n  | 'volleyball'\n  | 'volume-control-phone'\n  | 'volume-down'\n  | 'volume-high'\n  | 'volume-low'\n  | 'volume-medium'\n  | 'volume-mute'\n  | 'volume-off'\n  | 'volume-slash'\n  | 'volume-times'\n  | 'volume-up'\n  | 'volume-xmark'\n  | 'volume'\n  | 'vote-nay'\n  | 'vote-yea'\n  | 'vr-cardboard'\n  | 'w'\n  | 'waffle'\n  | 'wagon-covered'\n  | 'walker'\n  | 'walkie-talkie'\n  | 'walking'\n  | 'wall-brick'\n  | 'wallet'\n  | 'wand-magic-sparkles'\n  | 'wand-magic'\n  | 'wand-sparkles'\n  | 'wand'\n  | 'warehouse-alt'\n  | 'warehouse-full'\n  | 'warehouse'\n  | 'warning'\n  | 'washer'\n  | 'washing-machine'\n  | 'watch-apple'\n  | 'watch-calculator'\n  | 'watch-fitness'\n  | 'watch-smart'\n  | 'watch'\n  | 'water-arrow-down'\n  | 'water-arrow-up'\n  | 'water-ladder'\n  | 'water-lower'\n  | 'water-rise'\n  | 'water'\n  | 'watermelon-slice'\n  | 'wave-pulse'\n  | 'wave-sine'\n  | 'wave-square'\n  | 'wave-triangle'\n  | 'waveform-circle'\n  | 'waveform-lines'\n  | 'waveform-path'\n  | 'waveform'\n  | 'webcam-slash'\n  | 'webcam'\n  | 'webhook'\n  | 'weight-hanging'\n  | 'weight-scale'\n  | 'weight'\n  | 'whale'\n  | 'wheat-alt'\n  | 'wheat-awn-circle-exclamation'\n  | 'wheat-awn-slash'\n  | 'wheat-awn'\n  | 'wheat-slash'\n  | 'wheat'\n  | 'wheelchair-alt'\n  | 'wheelchair-move'\n  | 'wheelchair'\n  | 'whiskey-glass-ice'\n  | 'whiskey-glass'\n  | 'whistle'\n  | 'wifi-1'\n  | 'wifi-2'\n  | 'wifi-3'\n  | 'wifi-exclamation'\n  | 'wifi-fair'\n  | 'wifi-slash'\n  | 'wifi-strong'\n  | 'wifi-weak'\n  | 'wifi'\n  | 'wind-circle-exclamation'\n  | 'wind-turbine'\n  | 'wind-warning'\n  | 'wind'\n  | 'window-alt'\n  | 'window-close'\n  | 'window-flip'\n  | 'window-frame-open'\n  | 'window-frame'\n  | 'window-maximize'\n  | 'window-minimize'\n  | 'window-restore'\n  | 'window'\n  | 'windsock'\n  | 'wine-bottle'\n  | 'wine-glass-alt'\n  | 'wine-glass-crack'\n  | 'wine-glass-empty'\n  | 'wine-glass'\n  | 'won-sign'\n  | 'won'\n  | 'worm'\n  | 'wreath-laurel'\n  | 'wreath'\n  | 'wrench-simple'\n  | 'wrench'\n  | 'x-ray'\n  | 'x'\n  | 'xmark-circle'\n  | 'xmark-hexagon'\n  | 'xmark-large'\n  | 'xmark-octagon'\n  | 'xmark-square'\n  | 'xmark-to-slot'\n  | 'xmark'\n  | 'xmarks-lines'\n  | 'y'\n  | 'yen-sign'\n  | 'yen'\n  | 'yin-yang'\n  | 'z'\n  | 'zap'\n  | 'zzz';\n", "import { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\nimport { Icon, isIcon } from '../icon';\n\nexport type AssetSourcesHook = {\n  /**\n   * Use this function to declare additional sources to be shown when users want\n   * to upload new assets\n   *\n   * @tag assetSources\n   */\n  assetSources: (ctx: AssetSourcesCtx) => AssetSource[] | undefined;\n};\n\nexport type AssetSourcesCtx = Ctx;\n\n/**\n * An object expressing an additional asset source\n *\n * @see {isAssetSource}\n */\nexport type AssetSource = {\n  /**\n   * ID of the asset source. Will be the first argument for the\n   * `renderAssetSource` function\n   */\n  id: string;\n  /** Name of the asset that will be shown to the user */\n  name: string;\n  /**\n   * Icon to be shown alongside the name. Can be a FontAwesome icon name (ie.\n   * `\"address-book\"`) or a custom SVG definition. To maintain visual\n   * consistency with the rest of the interface, try to use FontAwesome icons\n   * whenever possible.\n   */\n  icon: Icon;\n  /**\n   * Configuration options for the modal that will be opened to select a media\n   * file from this source\n   */\n  modal?: {\n    /** Width of the modal. Can be a number, or one of the predefined sizes */\n    width?: 's' | 'm' | 'l' | 'xl' | number;\n    /**\n     * The initial height to set for the iframe that will render the modal\n     * content\n     */\n    initialHeight?: number;\n  };\n};\n\nexport function isAssetSource(value: unknown): value is AssetSource {\n  if (isNullish(value)) return false;\n  if (!isRecord(value)) return false;\n\n  const { id, name, icon, modal } = value;\n\n  return (\n    isString(id) &&\n    isString(name) &&\n    isIcon(icon) &&\n    (isNullish(modal) ||\n      (isRecord(modal) &&\n        (isNullish(modal.width) ||\n          (isString(modal.width) &&\n            ['s', 'm', 'l', 'xl'].includes(modal.width)) ||\n          isNumber(modal.width)) &&\n        (isNullish(modal.initialHeight) || isNumber(modal.initialHeight))))\n  );\n}\n\nexport function isReturnTypeOfAssetSourcesHook(\n  value: unknown,\n): value is AssetSource[] | undefined {\n  return isNullish(value) || isArray(value, isAssetSource);\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { Ctx } from '../ctx/base';\nimport { isNullish, isNumber, isRecord, isString } from '../guardUtils.js';\nimport type { MaybePromise } from '../utils';\n\ntype Item = SchemaTypes.Item;\n\nexport type BuildItemPresentationInfoHook = {\n  /**\n   * Use this function to customize the presentation of a record in records\n   * collections and \"Single link\" or \"Multiple links\" field\n   *\n   * @tag presentation\n   */\n  buildItemPresentationInfo: (\n    item: Item,\n    ctx: BuildItemPresentationInfoCtx,\n  ) => MaybePromise<ItemPresentationInfo | undefined>;\n};\n\nexport type BuildItemPresentationInfoCtx = Ctx;\n\n/**\n * An object expressing how a record should be presented in the interface\n *\n * @see {isItemPresentationInfo}\n */\nexport type ItemPresentationInfo = {\n  /** The title to present the record */\n  title: string;\n  /** An image representative of the record */\n  imageUrl?: string;\n  /**\n   * If different plugins implement the `buildItemPresentationInfo` hook, the\n   * one with the lowest `rank` will be used. If you want to specify an explicit\n   * value for `rank`, make sure to offer a way for final users to customize it\n   * inside the plugin's settings form, otherwise the hardcoded value you choose\n   * might clash with the one of another plugin!\n   */\n  rank?: number;\n};\n\nexport function isItemPresentationInfo(\n  value: unknown,\n): value is ItemPresentationInfo {\n  return (\n    isRecord(value) &&\n    isString(value.title) &&\n    (isNullish(value.imageUrl) || isString(value.imageUrl)) &&\n    (isNullish(value.rank) || isNumber(value.rank))\n  );\n}\n\nexport function isReturnTypeOfBuildItemPresentationInfoHook(\n  value: unknown,\n): value is ItemPresentationInfo | undefined {\n  return isNullish(value) || isItemPresentationInfo(value);\n}\n", "import { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isPlacement,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\nimport { Icon, isIcon } from '../icon';\n\nexport type ContentAreaSidebarItemsHook = {\n  /**\n   * Use this function to declare new items in the content area sidebar\n   *\n   * @tag sidebarItems\n   */\n  contentAreaSidebarItems: (\n    ctx: ContentAreaSidebarItemsCtx,\n  ) => ContentAreaSidebarItem[];\n};\n\nexport type ContentAreaSidebarItemsCtx = Ctx;\n\n/**\n * An object expressing an item in the content area sidebar\n *\n * @see {isContentAreaSidebarItem}\n */\nexport type ContentAreaSidebarItem = {\n  /** Label to be shown. Must be unique. */\n  label: string;\n  /**\n   * Icon to be shown alongside the label. Can be a FontAwesome icon name (ie.\n   * `\"address-book\"`) or a custom SVG definition. To maintain visual\n   * consistency with the rest of the interface, try to use FontAwesome icons\n   * whenever possible.\n   */\n  icon: Icon;\n  /** ID of the page linked to the item */\n  pointsTo: {\n    pageId: string;\n  };\n  /**\n   * Expresses where you want the item to be placed inside the sidebar. If not\n   * specified, the item will be placed after the standard items provided by\n   * DatoCMS itself.\n   */\n  placement?: ['before' | 'after', 'menuItems' | 'seoPreferences'];\n  /**\n   * If different plugins specify the same `placement` for their panels, they\n   * will be displayed by ascending `rank`. If you want to specify an explicit\n   * value for `rank`, make sure to offer a way for final users to customize it\n   * inside the plugin's settings form, otherwise the hardcoded value you choose\n   * might clash with the one of another plugin!\n   */\n  rank?: number;\n};\n\nexport function isContentAreaSidebarItem(\n  value: unknown,\n): value is ContentAreaSidebarItem {\n  return (\n    isRecord(value) &&\n    isString(value.label) &&\n    isIcon(value.icon) &&\n    isRecord(value.pointsTo) &&\n    isString(value.pointsTo.pageId) &&\n    (isNullish(value.placement) || isPlacement(value.placement)) &&\n    (isNullish(value.rank) || isNumber(value.rank))\n  );\n}\n\nexport function isReturnTypeOfContentAreaSidebarItemsHook(\n  value: unknown,\n): value is ContentAreaSidebarItem[] {\n  return isArray(value, isContentAreaSidebarItem);\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { BlockNodeTypeWithCustomStyle } from 'datocms-structured-text-utils';\nimport { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\n\ntype Field = SchemaTypes.Field;\ntype ItemType = SchemaTypes.ItemType;\n\nexport type CustomBlockStylesForStructuredTextFieldHook = {\n  /**\n   * Use this function to define a number of custom block styles for a specific\n   * Structured Text field\n   *\n   * @tag structuredText\n   */\n  customBlockStylesForStructuredTextField: (\n    field: Field,\n    ctx: CustomBlockStylesForStructuredTextFieldCtx,\n  ) => StructuredTextCustomBlockStyle[] | undefined;\n};\n\nexport type CustomBlockStylesForStructuredTextFieldCtx = Ctx<{\n  itemType: ItemType;\n}>;\n\n/**\n * An object expressing a custom block style for a Structured Text field\n *\n * @see {isStructuredTextCustomBlockStyle}\n */\nexport type StructuredTextCustomBlockStyle = {\n  /** ID of custom block style */\n  id: string;\n  /** The block node that can apply this style */\n  node: BlockNodeTypeWithCustomStyle;\n  /** ID of custom block style */\n  label: string;\n  /** How the block will be styled inside the editor to represent the style */\n  appliedStyle: React.CSSProperties;\n  /**\n   * Custom styles for a block node will be sorted by ascending `rank`. If you\n   * want to specify an explicit value for `rank`, make sure to offer a way for\n   * final users to customize it inside the plugin's settings form, otherwise\n   * the hardcoded value you choose might clash with the one of another plugin!\n   */\n  rank?: number;\n};\n\nexport function isStructuredTextCustomBlockStyle(\n  value: unknown,\n): value is StructuredTextCustomBlockStyle {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    isString(value.label) &&\n    isString(value.node) &&\n    (isNullish(value.rank) || isNumber(value.rank))\n  );\n}\n\nexport function isReturnTypeOfCustomBlockStylesForStructuredTextFieldHook(\n  value: unknown,\n): value is StructuredTextCustomBlockStyle[] | undefined {\n  return isNullish(value) || isArray(value, isStructuredTextCustomBlockStyle);\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isPlacement,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\nimport { Icon, isIcon } from '../icon';\n\ntype Field = SchemaTypes.Field;\ntype ItemType = SchemaTypes.ItemType;\n\nexport type CustomMarksForStructuredTextFieldHook = {\n  /**\n   * Use this function to define a number of custom marks for a specific\n   * Structured Text field\n   *\n   * @tag structuredText\n   */\n  customMarksForStructuredTextField: (\n    field: Field,\n    ctx: CustomMarksForStructuredTextFieldCtx,\n  ) => StructuredTextCustomMark[] | undefined;\n};\n\nexport type CustomMarksForStructuredTextFieldCtx = Ctx<{\n  itemType: ItemType;\n}>;\n\n/**\n * An object expressing a custom mark for a Structured Text field\n *\n * @see {isStructuredTextCustomMark}\n */\nexport type StructuredTextCustomMark = {\n  /** ID of mark */\n  id: string;\n  /** Label representing the custom mark */\n  label: string;\n  /**\n   * Icon to be shown alongside the label. Can be a FontAwesome icon name (ie.\n   * `\"address-book\"`) or a custom SVG definition. To maintain visual\n   * consistency with the rest of the interface, try to use FontAwesome icons\n   * whenever possible\n   */\n  icon: Icon;\n  /**\n   * Expresses where you want the custom mark button to be placed inside the\n   * toolbar. If not specified, the item will be placed after the standard marks\n   * provided by DatoCMS itself.\n   */\n  placement?: StructuredTextCustomMarkPlacement;\n  /**\n   * If multiple custom marks specify the same `placement` for their toolbar\n   * button, they will be sorted by ascending `rank`. If you want to specify an\n   * explicit value for `rank`, make sure to offer a way for final users to\n   * customize it inside the plugin's settings form, otherwise the hardcoded\n   * value you choose might clash with the one of another plugin!\n   */\n  rank?: number;\n  /**\n   * Keyboard shortcut associated with the custom mark, expressed using the\n   * https://github.com/ianstormtaylor/is-hotkey syntax (ie. `mod+shift+x`)\n   */\n  keyboardShortcut?: string;\n  /** How the custom mark will be styled inside the editor */\n  appliedStyle: React.CSSProperties;\n};\n\nexport type StructuredTextCustomMarkPlacement = [\n  'before' | 'after',\n  'strong' | 'emphasis' | 'underline' | 'code' | 'highlight' | 'strikethrough',\n];\n\nexport function isStructuredTextCustomMark(\n  value: unknown,\n): value is StructuredTextCustomMark {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    isString(value.label) &&\n    isIcon(value.icon) &&\n    (isNullish(value.placement) || isPlacement(value.placement)) &&\n    (isNullish(value.rank) || isNumber(value.rank)) &&\n    (isNullish(value.keyboardShortcut) || isString(value.keyboardShortcut)) &&\n    isRecord(value.appliedStyle)\n  );\n}\n\nexport function isReturnTypeOfCustomMarksForStructuredTextFieldHook(\n  value: unknown,\n): value is StructuredTextCustomMark[] | undefined {\n  return isNullish(value) || isArray(value, isStructuredTextCustomMark);\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { Ctx, ItemListLocationQuery } from '../ctx/base';\nimport { isNullish, isNumber, isRecord } from '../guardUtils.js';\nimport { MaybePromise } from '../utils';\n\ntype Field = SchemaTypes.Field;\ntype ItemType = SchemaTypes.ItemType;\n\nexport type InitialLocationQueryForItemSelectorHook = {\n  /**\n   * Use this function to customize the initial filters when opening a record\n   * selector via a \"Single link\" or \"Multiple links\" field\n   *\n   * @tag locationQuery\n   */\n  initialLocationQueryForItemSelector: (\n    openerField: Field,\n    itemType: ItemType,\n    ctx: InitialLocationQueryForItemSelectorCtx,\n  ) => MaybePromise<InitialLocationQueryForItemSelector | undefined>;\n};\n\nexport type InitialLocationQueryForItemSelectorCtx = Ctx;\n\n/**\n * An object expressing which filters should be applied to the record selector\n *\n * @see {isInitialLocationQueryForItemSelector}\n */\nexport type InitialLocationQueryForItemSelector = {\n  locationQuery: ItemListLocationQuery;\n  /**\n   * If different plugins implement the `initialLocationQueryForItemSelector`\n   * hook, the one with the lowest `rank` will be used. If you want to specify\n   * an explicit value for `rank`, make sure to offer a way for final users to\n   * customize it inside the plugin's settings form, otherwise the hardcoded\n   * value you choose might clash with the one of another plugin!\n   */\n  rank?: number;\n};\n\nexport function isInitialLocationQueryForItemSelector(\n  value: unknown,\n): value is InitialLocationQueryForItemSelector {\n  return (\n    isRecord(value) &&\n    isRecord(value.locationQuery) &&\n    (isNullish(value.rank) || isNumber(value.rank))\n  );\n}\n\nexport function isReturnTypeOfInitialLocationQueryForItemSelectorHook(\n  value: unknown,\n): value is InitialLocationQueryForItemSelector | undefined {\n  return isNullish(value) || isInitialLocationQueryForItemSelector(value);\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\n\ntype ItemType = SchemaTypes.ItemType;\n\nexport type ItemCollectionOutletsHook = {\n  /**\n   * Use this function to declare custom outlets to be shown at the top of a\n   * collection of records of a particular model\n   *\n   * @tag outlets\n   */\n  itemCollectionOutlets: (\n    itemType: ItemType,\n    ctx: ItemCollectionOutletsCtx,\n  ) => ItemCollectionOutlet[];\n};\n\nexport type ItemCollectionOutletsCtx = Ctx;\n\n/**\n * An object expressing an outlet to be shown at the top of a record's collection page\n *\n * @see {isItemCollectionOutlet}\n */\nexport type ItemCollectionOutlet = {\n  /**\n   * ID of the outlet. Will be the first argument for the `renderItemCollectionOutlet`\n   * function\n   */\n  id: string;\n  /**\n   * Multiple outlets will be sorted by ascending `rank`. If you want to specify\n   * an explicit value for `rank`, make sure to offer a way for final users to\n   * customize it inside the plugin's settings form, otherwise the hardcoded\n   * value you choose might clash with the one of another plugin!\n   */\n  rank?: number;\n  /** The initial height to set for the iframe that will render the outlet */\n  initialHeight?: number;\n};\n\nexport function isItemCollectionOutlet(\n  value: unknown,\n): value is ItemCollectionOutlet {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    (isNullish(value.rank) || isNumber(value.rank)) &&\n    (isNullish(value.initialHeight) || isNumber(value.initialHeight))\n  );\n}\n\nexport function isReturnTypeOfItemCollectionOutletsHook(\n  value: unknown,\n): value is ItemCollectionOutlet[] {\n  return isArray(value, isItemCollectionOutlet);\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\n\ntype ItemType = SchemaTypes.ItemType;\n\nexport type ItemFormOutletsHook = {\n  /**\n   * Use this function to declare custom outlets to be shown at the top of the\n   * record's editing page\n   *\n   * @tag outlets\n   */\n  itemFormOutlets: (\n    itemType: ItemType,\n    ctx: ItemFormOutletsCtx,\n  ) => ItemFormOutlet[];\n};\n\nexport type ItemFormOutletsCtx = Ctx;\n\n/**\n * An object expressing an outlet to be shown at the top of a record's editing page\n *\n * @see {isItemFormOutlet}\n */\nexport type ItemFormOutlet = {\n  /**\n   * ID of the outlet. Will be the first argument for the `renderItemFormOutlet`\n   * function\n   */\n  id: string;\n  /**\n   * Multiple outlets will be sorted by ascending `rank`. If you want to specify\n   * an explicit value for `rank`, make sure to offer a way for final users to\n   * customize it inside the plugin's settings form, otherwise the hardcoded\n   * value you choose might clash with the one of another plugin!\n   */\n  rank?: number;\n  /** The initial height to set for the iframe that will render the outlet */\n  initialHeight?: number;\n};\n\nexport function isItemFormOutlet(value: unknown): value is ItemFormOutlet {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    (isNullish(value.rank) || isNumber(value.rank)) &&\n    (isNullish(value.initialHeight) || isNumber(value.initialHeight))\n  );\n}\n\nexport function isReturnTypeOfItemFormOutletsHook(\n  value: unknown,\n): value is ItemFormOutlet[] {\n  return isArray(value, isItemFormOutlet);\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isBoolean,\n  isNullish,\n  isNumber,\n  isPlacement,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\nimport { ItemFormSidebarPanelPlacement } from '../shared';\n\ntype ItemType = SchemaTypes.ItemType;\n\nexport type ItemFormSidebarPanelsHook = {\n  /**\n   * Use this function to declare new sidebar panels to be shown when the user\n   * edits records of a particular model\n   *\n   * @tag sidebarPanels\n   */\n  itemFormSidebarPanels: (\n    itemType: ItemType,\n    ctx: ItemFormSidebarPanelsCtx,\n  ) => ItemFormSidebarPanel[];\n};\n\nexport type ItemFormSidebarPanelsCtx = Ctx;\n\n/**\n * An object expressing a sidebar panel to be shown when the user\n * edits records of a particular model\n *\n * @see {isItemFormSidebarPanel}\n */\nexport type ItemFormSidebarPanel = {\n  /**\n   * ID of the panel. Will be the first argument for the\n   * `renderItemFormSidebarPanel` function\n   */\n  id: string;\n  /** Label to be shown on the collapsible sidebar panel handle */\n  label: string;\n  /**\n   * An arbitrary configuration object that will be passed as the `parameters`\n   * property of the second argument of the `renderItemFormSidebarPanel`\n   * function\n   */\n  parameters?: Record<string, unknown>;\n  /** Whether the sidebar panel will start open or collapsed */\n  startOpen?: boolean;\n  /**\n   * Expresses where you want the item to be placed inside the sidebar. If not\n   * specified, the item will be placed after the standard panels provided by\n   * DatoCMS itself.\n   */\n  placement?: ItemFormSidebarPanelPlacement;\n  /**\n   * If multiple sidebar panels specify the same `placement`, they will be\n   * sorted by ascending `rank`. If you want to specify an explicit value for\n   * `rank`, make sure to offer a way for final users to customize it inside the\n   * plugin's settings form, otherwise the hardcoded value you choose might\n   * clash with the one of another plugin!\n   */\n  rank?: number;\n  /** The initial height to set for the iframe that will render the sidebar panel */\n  initialHeight?: number;\n};\n\nexport function isItemFormSidebarPanel(\n  value: unknown,\n): value is ItemFormSidebarPanel {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    isString(value.label) &&\n    (isNullish(value.parameters) || isRecord(value.parameters)) &&\n    (isNullish(value.startOpen) || isBoolean(value.startOpen)) &&\n    (isNullish(value.placement) || isPlacement(value.placement)) &&\n    (isNullish(value.rank) || isNumber(value.rank)) &&\n    (isNullish(value.initialHeight) || isNumber(value.initialHeight))\n  );\n}\n\nexport function isReturnTypeOfItemFormSidebarPanelsHook(\n  value: unknown,\n): value is ItemFormSidebarPanel[] {\n  return isArray(value, isItemFormSidebarPanel);\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\n\ntype ItemType = SchemaTypes.ItemType;\n\nexport type ItemFormSidebarsHook = {\n  /**\n   * Use this function to declare new sidebar to be shown when the user edits\n   * records of a particular model\n   *\n   * @tag sidebarPanels\n   */\n  itemFormSidebars: (\n    itemType: ItemType,\n    ctx: ItemFormSidebarsCtx,\n  ) => ItemFormSidebar[];\n};\n\nexport type ItemFormSidebarsCtx = Ctx;\n\n/**\n * An object expressing a sidebar to be shown when the user edits\n * records of a particular model\n *\n * @see {isItemFormSidebar}\n */\nexport type ItemFormSidebar = {\n  /**\n   * ID of the sidebar. Will be the first argument for the\n   * `renderItemFormSidebar` function\n   */\n  id: string;\n  /** Label to be shown on the collapsible sidebar handle */\n  label: string;\n  /**\n   * An arbitrary configuration object that will be passed as the `parameters`\n   * property of the second argument of the `renderItemFormSidebar` function\n   */\n  parameters?: Record<string, unknown>;\n  /**\n   * If multiple sidebars specify the same `placement`, they will be sorted by\n   * ascending `rank`. If you want to specify an explicit value for `rank`, make\n   * sure to offer a way for final users to customize it inside the plugin's\n   * settings form, otherwise the hardcoded value you choose might clash with\n   * the one of another plugin!\n   */\n  rank?: number;\n  /** The preferred width for the sidebar */\n  preferredWidth?: number;\n};\n\nexport function isItemFormSidebar(value: unknown): value is ItemFormSidebar {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    isString(value.label) &&\n    (isNullish(value.parameters) || isRecord(value.parameters)) &&\n    (isNullish(value.rank) || isNumber(value.rank)) &&\n    (isNullish(value.preferredWidth) || isNumber(value.preferredWidth))\n  );\n}\n\nexport function isReturnTypeOfItemFormSidebarsHook(\n  value: unknown,\n): value is ItemFormSidebar[] {\n  return isArray(value, isItemFormSidebar);\n}\n", "import { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isPlacement,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\nimport { Icon, isIcon } from '../icon';\n\nexport type MainNavigationTabsHook = {\n  /**\n   * Use this function to declare new tabs you want to add in the top-bar of the\n   * UI\n   *\n   * @tag pages\n   */\n  mainNavigationTabs: (ctx: MainNavigationTabsCtx) => MainNavigationTab[];\n};\n\nexport type MainNavigationTabsCtx = Ctx;\n\n/**\n * An object expressing a tab to be displayed in the top-bar of the UI\n *\n * @see {isMainNavigationTab}\n */\nexport type MainNavigationTab = {\n  /** Label to be shown. Must be unique. */\n  label: string;\n  /**\n   * Icon to be shown alongside the label. Can be a FontAwesome icon name (ie.\n   * `\"address-book\"`) or a custom SVG definition. To maintain visual\n   * consistency with the rest of the interface, try to use FontAwesome icons\n   * whenever possible.\n   */\n  icon: Icon;\n  /** ID of the page linked to the tab */\n  pointsTo: {\n    pageId: string;\n  };\n  /**\n   * Expresses where you want to place the tab in the top-bar. If not specified,\n   * the tab will be placed after the standard tabs provided by DatoCMS itself.\n   */\n  placement?: [\n    'before' | 'after',\n    'content' | 'media' | 'schema' | 'configuration' | 'cdaPlayground',\n  ];\n  /**\n   * If different plugins specify the same `placement` for their tabs, they will\n   * be displayed by ascending `rank`. If you want to specify an explicit value\n   * for `rank`, make sure to offer a way for final users to customize it inside\n   * the plugin's settings form, otherwise the hardcoded value you choose might\n   * clash with the one of another plugin!\n   */\n  rank?: number;\n};\n\nexport function isMainNavigationTab(\n  value: unknown,\n): value is MainNavigationTab {\n  return (\n    isRecord(value) &&\n    isString(value.label) &&\n    isIcon(value.icon) &&\n    isRecord(value.pointsTo) &&\n    isString(value.pointsTo.pageId) &&\n    (isNullish(value.placement) || isPlacement(value.placement)) &&\n    (isNullish(value.rank) || isNumber(value.rank))\n  );\n}\n\nexport function isReturnTypeOfMainNavigationTabsHook(\n  value: unknown,\n): value is MainNavigationTab[] {\n  return isArray(value, isMainNavigationTab);\n}\n", "import { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isBoolean,\n  isNullish,\n  isNumber,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\n\nexport type ManualFieldExtensionsHook = {\n  /**\n   * Use this function to declare new field extensions that users will be able\n   * to install manually in some field\n   *\n   * @tag manualFieldExtensions\n   */\n  manualFieldExtensions: (\n    ctx: ManualFieldExtensionsCtx,\n  ) => ManualFieldExtension[];\n};\n\nexport type ManualFieldExtensionsCtx = Ctx;\n\n/**\n * An object expressing a field extension that users will be able\n * to install manually in some field\n *\n * @see {isManualFieldExtension}\n */\nexport type ManualFieldExtension = {\n  /**\n   * ID of field extension. Will be the first argument for the\n   * `renderFieldExtension` function\n   */\n  id: string;\n  /** Name to be shown when editing fields */\n  name: string;\n  /**\n   * Type of field extension. An `editor` extension replaces the default field\n   * editor that DatoCMS provides, while an `addon` extension is placed\n   * underneath the field editor to provide additional info/behaviour. You can\n   * setup multiple field addons for every field.\n   */\n  type: FieldExtensionType;\n  /**\n   * For `editor` extensions: moves the field to the sidebar of the record\n   * editing page, mimicking a sidebar panel\n   */\n  asSidebarPanel?: boolean | { startOpen: boolean };\n  /**\n   * The type of fields that the field extension in compatible with. You can use\n   * the shortcut `all` to target all types of fields\n   */\n  fieldTypes: 'all' | FieldType[];\n  /**\n   * Whether this field extension needs some configuration options before being\n   * installed in a field or not. Will trigger the\n   * `renderManualFieldExtensionConfigScreen` and\n   * `validateManualFieldExtensionParameters` methods\n   */\n  configurable?: boolean | { initialHeight: number };\n  /**\n   * The initial height to set for the iframe that will render the field\n   * extension\n   */\n  initialHeight?: number;\n};\n\n/**\n * The sidebar in the Content Area presents a number of user-defined menu-items.\n * This object represents a new item to be added in the sidebar.\n */\n\nexport type FieldExtensionType = 'editor' | 'addon';\n\nexport type FieldType =\n  | 'boolean'\n  | 'color'\n  | 'date_time'\n  | 'date'\n  | 'file'\n  | 'float'\n  | 'gallery'\n  | 'integer'\n  | 'json'\n  | 'lat_lon'\n  | 'link'\n  | 'links'\n  | 'rich_text'\n  | 'seo'\n  | 'slug'\n  | 'string'\n  | 'structured_text'\n  | 'text'\n  | 'video';\n\nexport function isManualFieldExtension(\n  value: unknown,\n): value is ManualFieldExtension {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    isString(value.name) &&\n    isString(value.type) &&\n    ['editor', 'addon'].includes(value.type) &&\n    (isNullish(value.asSidebarPanel) ||\n      isBoolean(value.asSidebarPanel) ||\n      (isRecord(value.asSidebarPanel) &&\n        isBoolean(value.asSidebarPanel.startOpen))) &&\n    ((isString(value.fieldTypes) && value.fieldTypes === 'all') ||\n      isArray(value.fieldTypes, isString)) &&\n    (isNullish(value.configurable) ||\n      isBoolean(value.configurable) ||\n      (isRecord(value.configurable) &&\n        isNumber(value.configurable.initialHeight))) &&\n    (isNullish(value.initialHeight) || isNumber(value.initialHeight))\n  );\n}\n\nexport function isReturnTypeOfManualFieldExtensionsHook(\n  value: unknown,\n): value is ManualFieldExtension[] {\n  return isArray(value, isManualFieldExtension);\n}\n", "import type { SchemaTypes } from '@datocms/cma-client';\nimport { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isBoolean,\n  isNullish,\n  isNumber,\n  isPlacement,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\nimport { ItemFormSidebarPanelPlacement } from '../shared';\n\ntype Field = SchemaTypes.Field;\ntype ItemType = SchemaTypes.ItemType;\n\nexport type OverrideFieldExtensionsHook = {\n  /**\n   * Use this function to automatically force one or more field extensions to a\n   * particular field\n   *\n   * @tag forcedFieldExtensions\n   */\n  overrideFieldExtensions: (\n    field: Field,\n    ctx: OverrideFieldExtensionsCtx,\n  ) => FieldExtensionOverride | undefined;\n};\n\nexport type OverrideFieldExtensionsCtx = Ctx<{\n  itemType: ItemType;\n}>;\n\n/**\n * An object expressing some field extensions you want to force on a particular\n * field\n *\n * @see {isFieldExtensionOverride}\n */\nexport type FieldExtensionOverride = {\n  /** Force a field editor/sidebar extension on a field */\n  editor?: EditorOverride;\n  /** One or more field sidebar extensions to forcefully add to a field */\n  addons?: AddonOverride[];\n};\n\n/** A field editor/sidebar forced on a field */\nexport type EditorOverride = {\n  /**\n   * ID of field extension. Will be the first argument for the\n   * `renderFieldExtension` function\n   */\n  id: string;\n  /**\n   * Moves the field to the sidebar of the record editing page, mimicking a\n   * sidebar panel\n   */\n  asSidebarPanel?:\n    | boolean\n    | { startOpen?: boolean; placement?: ItemFormSidebarPanelPlacement };\n  /**\n   * An arbitrary configuration object that will be passed as the `parameters`\n   * property of the second argument of the `renderFieldExtension` function\n   */\n  parameters?: Record<string, unknown>;\n  /**\n   * If multiple plugins override a field, the one with the lowest `rank` will\n   * win. If you want to specify an explicit value for `rank`, make sure to\n   * offer a way for final users to customize it inside the plugin's settings\n   * form, otherwise the hardcoded value you choose might clash with the one of\n   * another plugin!\n   */\n  rank?: number;\n  /**\n   * The initial height to set for the iframe that will render the field\n   * extension\n   */\n  initialHeight?: number;\n};\n\n/** A field addon extension forced on a field */\nexport type AddonOverride = {\n  /**\n   * ID of field extension. Will be the first argument for the\n   * `renderFieldExtension` function\n   */\n  id: string;\n  /**\n   * An arbitrary configuration object that will be passed as the `parameters`\n   * property of the second argument of the `renderFieldExtension` function\n   */\n  parameters?: Record<string, unknown>;\n  /**\n   * If multiple addons are present for a field, they will be sorted by\n   * ascending `rank`. If you want to specify an explicit value for `rank`, make\n   * sure to offer a way for final users to customize it inside the plugin's\n   * settings form, otherwise the hardcoded value you choose might clash with\n   * the one of another plugin!\n   */\n  rank?: number;\n  /**\n   * The initial height to set for the iframe that will render the field\n   * extension\n   */\n  initialHeight?: number;\n};\n\nexport function isFieldExtensionOverride(\n  value: unknown,\n): value is FieldExtensionOverride {\n  return (\n    isNullish(value) ||\n    (isRecord(value) &&\n      (isNullish(value.editor) || isEditorOverride(value.editor)) &&\n      (isNullish(value.addons) || isArray(value.addons, isAddonOverride)))\n  );\n}\n\nexport function isEditorOverride(value: unknown): value is EditorOverride {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    (isNullish(value.asSidebarPanel) ||\n      isBoolean(value.asSidebarPanel) ||\n      (isRecord(value.asSidebarPanel) &&\n        (isNullish(value.asSidebarPanel.startOpen) ||\n          isBoolean(value.asSidebarPanel.startOpen)) &&\n        (isNullish(value.asSidebarPanel.placement) ||\n          isPlacement(value.asSidebarPanel.placement)))) &&\n    (isNullish(value.parameters) || isRecord(value.parameters)) &&\n    (isNullish(value.rank) || isNumber(value.rank)) &&\n    (isNullish(value.initialHeight) || isNumber(value.initialHeight))\n  );\n}\n\nexport function isAddonOverride(value: unknown): value is AddonOverride {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    (isNullish(value.parameters) || isRecord(value.parameters)) &&\n    (isNullish(value.rank) || isNumber(value.rank)) &&\n    (isNullish(value.initialHeight) || isNumber(value.initialHeight))\n  );\n}\n\nexport function isReturnTypeOfOverrideFieldExtensionsHook(\n  value: unknown,\n): value is FieldExtensionOverride | undefined {\n  return isNullish(value) || isFieldExtensionOverride(value);\n}\n", "import { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isPlacement,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\nimport { Icon, isIcon } from '../icon';\n\nexport type SettingsAreaSidebarItemGroupsHook = {\n  /**\n   * Use this function to declare new navigation sections in the Settings Area\n   * sidebar\n   *\n   * @tag pages\n   */\n  settingsAreaSidebarItemGroups: (\n    ctx: SettingsAreaSidebarItemGroupsCtx,\n  ) => SettingsAreaSidebarItemGroup[];\n};\n\nexport type SettingsAreaSidebarItemGroupsCtx = Ctx;\n\n/**\n * The sidebar in the Settings Area presents a number of pages grouped by topic.\n * This object represents a new group to be added in the sideebar to the\n * standard ones DatoCMS provides.\n */\nexport type SettingsAreaSidebarItemGroup = {\n  /** Label to be shown. Must be unique. */\n  label: string;\n  /** The list of items it contains * */\n  items: SettingsAreaSidebarItem[];\n  /**\n   * Expresses where you want the group to be placed inside the sidebar. If not\n   * specified, the item will be placed after the standard items provided by\n   * DatoCMS itself.\n   */\n  placement?: ['before' | 'after', 'properties' | 'permissions'];\n  /**\n   * If different plugins specify the same `placement` for their sections, they\n   * will be displayed by ascending `rank`. If you want to specify an explicit\n   * value for `rank`, make sure to offer a way for final users to customize it\n   * inside the plugin's settings form, otherwise the hardcoded value you choose\n   * might clash with the one of another plugin!\n   */\n  rank?: number;\n};\n\n/** An item contained in a Settings Area group */\nexport type SettingsAreaSidebarItem = {\n  /** Label to be shown. Must be unique. */\n  label: string;\n  /**\n   * Icon to be shown alongside the label. Can be a FontAwesome icon name (ie.\n   * `\"address-book\"`) or a custom SVG definition. To maintain visual\n   * consistency with the rest of the interface, try to use FontAwesome icons\n   * whenever possible.\n   */\n  icon: Icon;\n  /** ID of the page linked to the item */\n  pointsTo: {\n    pageId: string;\n  };\n};\n\nexport function isSettingsAreaSidebarItemGroup(\n  value: unknown,\n): value is SettingsAreaSidebarItemGroup {\n  return (\n    isRecord(value) &&\n    isString(value.label) &&\n    isArray(value.items, isSettingsAreaSidebarItem) &&\n    (isNullish(value.placement) || isPlacement(value.placement)) &&\n    (isNullish(value.rank) || isNumber(value.rank))\n  );\n}\n\nexport function isSettingsAreaSidebarItem(\n  value: unknown,\n): value is SettingsAreaSidebarItem {\n  return (\n    isRecord(value) &&\n    isString(value.label) &&\n    isIcon(value.icon) &&\n    isRecord(value.pointsTo) &&\n    isString(value.pointsTo.pageId)\n  );\n}\n\nexport function isReturnTypeOfSettingsAreaSidebarItemGroupsHook(\n  value: unknown,\n): value is SettingsAreaSidebarItemGroup[] {\n  return isArray(value, isSettingsAreaSidebarItemGroup);\n}\n", "import { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isBoolean,\n  isNullish,\n  isNumber,\n  isPlacement,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\n\nexport type UploadSidebarPanelsHook = {\n  /**\n   * Use this function to declare new sidebar panels to be shown when the user\n   * opens up an asset in the Media Area\n   *\n   * @tag sidebarPanels\n   */\n  uploadSidebarPanels: (ctx: UploadSidebarPanelsCtx) => UploadSidebarPanel[];\n};\n\nexport type UploadSidebarPanelsCtx = Ctx;\n\n/**\n * An object expressing a sidebar panel to be shown when the user\n * opens up an asset in the Media Area\n *\n * @see {isUploadSidebarPanel}\n */\nexport type UploadSidebarPanel = {\n  /**\n   * ID of the panel. Will be the first argument for the\n   * `renderUploadSidebarPanel` function\n   */\n  id: string;\n  /** Label to be shown on the collapsible sidebar panel handle */\n  label: string;\n  /**\n   * An arbitrary configuration object that will be passed as the `parameters`\n   * property of the second argument of the `renderUploadSidebarPanel`\n   * function\n   */\n  parameters?: Record<string, unknown>;\n  /** Whether the sidebar panel will start open or collapsed */\n  startOpen?: boolean;\n  /**\n   * Expresses where you want the item to be placed inside the sidebar. If not\n   * specified, the item will be placed after the standard panels provided by\n   * DatoCMS itself.\n   */\n  placement?: UploadSidebarPanelPlacement;\n  /**\n   * If multiple sidebar panels specify the same `placement`, they will be\n   * sorted by ascending `rank`. If you want to specify an explicit value for\n   * `rank`, make sure to offer a way for final users to customize it inside the\n   * plugin's settings form, otherwise the hardcoded value you choose might\n   * clash with the one of another plugin!\n   */\n  rank?: number;\n  /** The initial height to set for the iframe that will render the sidebar panel */\n  initialHeight?: number;\n};\n\nexport type UploadSidebarPanelPlacement = [\n  'before' | 'after',\n  (\n    | 'defaultMetadata'\n    | 'categorization'\n    | 'creator'\n    | 'videoTracks'\n    | 'links'\n    | 'replace'\n  ),\n];\n\nexport function isUploadSidebarPanel(\n  value: unknown,\n): value is UploadSidebarPanel {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    isString(value.label) &&\n    (isNullish(value.parameters) || isRecord(value.parameters)) &&\n    (isNullish(value.startOpen) || isBoolean(value.startOpen)) &&\n    (isNullish(value.placement) || isPlacement(value.placement)) &&\n    (isNullish(value.rank) || isNumber(value.rank)) &&\n    (isNullish(value.initialHeight) || isNumber(value.initialHeight))\n  );\n}\n\nexport function isReturnTypeOfUploadSidebarPanelsHook(\n  value: unknown,\n): value is UploadSidebarPanel[] {\n  return isArray(value, isUploadSidebarPanel);\n}\n", "import { Ctx } from '../ctx/base';\nimport {\n  isArray,\n  isNullish,\n  isNumber,\n  isRecord,\n  isString,\n} from '../guardUtils.js';\n\nexport type UploadSidebarsHook = {\n  /**\n   * Use this function to declare new sidebar to be shown when the user opens\n   * up an asset in the Media Area\n   *\n   * @tag sidebarPanels\n   */\n  uploadSidebars: (ctx: UploadSidebarsCtx) => UploadSidebar[];\n};\n\nexport type UploadSidebarsCtx = Ctx;\n\n/**\n * An object expressing a sidebar to be shown when the user opens\n * up an asset in the Media Area\n *\n * @see {isUploadSidebar}\n */\nexport type UploadSidebar = {\n  /**\n   * ID of the sidebar. Will be the first argument for the\n   * `renderUploadSidebar` function\n   */\n  id: string;\n  /** Label to be shown on the collapsible sidebar handle */\n  label: string;\n  /**\n   * An arbitrary configuration object that will be passed as the `parameters`\n   * property of the second argument of the `renderUploadSidebar` function\n   */\n  parameters?: Record<string, unknown>;\n  /**\n   * If multiple sidebars specify the same `placement`, they will be sorted by\n   * ascending `rank`. If you want to specify an explicit value for `rank`, make\n   * sure to offer a way for final users to customize it inside the plugin's\n   * settings form, otherwise the hardcoded value you choose might clash with\n   * the one of another plugin!\n   */\n  rank?: number;\n  /** The preferred width for the sidebar */\n  preferredWidth?: number;\n};\n\nexport function isUploadSidebar(value: unknown): value is UploadSidebar {\n  return (\n    isRecord(value) &&\n    isString(value.id) &&\n    isString(value.label) &&\n    (isNullish(value.parameters) || isRecord(value.parameters)) &&\n    (isNullish(value.rank) || isNumber(value.rank)) &&\n    (isNullish(value.preferredWidth) || isNumber(value.preferredWidth))\n  );\n}\n\nexport function isReturnTypeOfUploadSidebarsHook(\n  value: unknown,\n): value is UploadSidebar[] {\n  return isArray(value, isUploadSidebar);\n}\n", "import { isRecord } from '../guardUtils';\n\nexport type ValidateManualFieldExtensionParametersHook = {\n  /**\n   * This function will be called each time the configuration object changes. It\n   * must return an object containing possible validation errors\n   *\n   * @tag manualFieldExtensions\n   */\n  validateManualFieldExtensionParameters: (\n    fieldExtensionId: string,\n    parameters: Record<string, unknown>,\n  ) => Record<string, unknown> | Promise<Record<string, unknown>>;\n};\n\nexport function isReturnTypeOfValidateManualFieldExtensionParametersHook(\n  value: unknown,\n): value is Record<string, unknown> {\n  return isRecord(value);\n}\n", "import type { Manifest } from './manifestTypes';\n\nexport const manifest: Manifest = {\n  hooks: {\n    validateManualFieldExtensionParameters: {\n      name: 'validateManualFieldExtensionParameters',\n      comment: {\n        markdownText:\n          'This function will be called each time the configuration object changes. It\\nmust return an object containing possible validation errors.',\n        tag: 'manualFieldExtensions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'fieldExtensionId',\n          typeName: 'string',\n        },\n        {\n          name: 'parameters',\n          typeName: 'Record<string, unknown>',\n        },\n      ],\n      returnType: 'Record<string, unknown> | Promise<Record<string, unknown>>',\n      location: {\n        filePath: 'src/hooks/validateManualFieldExtensionParameters.ts',\n        lineNumber: 10,\n      },\n    },\n    uploadsDropdownActions: {\n      name: 'uploadsDropdownActions',\n      comment: {\n        markdownText:\n          'This function lets you set up custom actions (or groups of actions) that\\nshow up when the user:\\n\\n* selects multiple assets in the Media Area for batch operations, or\\n* opens up a specific asset from the Media Area.\\n\\nThe `executeUploadsDropdownAction()` hook will be triggered once the user\\nclicks on one of the defined actions.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'Array<DropdownAction | DropdownActionGroup>',\n      location: {\n        filePath: 'src/hooks/uploadsDropdownActions.ts',\n        lineNumber: 17,\n      },\n    },\n    uploadSidebars: {\n      name: 'uploadSidebars',\n      comment: {\n        markdownText:\n          'Use this function to declare new sidebar to be shown when the user opens\\nup an asset in the Media Area.',\n        tag: 'sidebarPanels',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'UploadSidebar[]',\n      location: {\n        filePath: 'src/hooks/uploadSidebars.ts',\n        lineNumber: 17,\n      },\n    },\n    uploadSidebarPanels: {\n      name: 'uploadSidebarPanels',\n      comment: {\n        markdownText:\n          'Use this function to declare new sidebar panels to be shown when the user\\nopens up an asset in the Media Area.',\n        tag: 'sidebarPanels',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'UploadSidebarPanel[]',\n      location: {\n        filePath: 'src/hooks/uploadSidebarPanels.ts',\n        lineNumber: 19,\n      },\n    },\n    settingsAreaSidebarItemGroups: {\n      name: 'settingsAreaSidebarItemGroups',\n      comment: {\n        markdownText:\n          'Use this function to declare new navigation sections in the Settings Area\\nsidebar.',\n        tag: 'pages',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'SettingsAreaSidebarItemGroup[]',\n      location: {\n        filePath: 'src/hooks/settingsAreaSidebarItemGroups.ts',\n        lineNumber: 19,\n      },\n    },\n    schemaItemTypeDropdownActions: {\n      name: 'schemaItemTypeDropdownActions',\n      comment: {\n        markdownText:\n          'Use this function to define custom actions (or groups of actions) for a model/block model in the Schema section.\\n\\nThe `executeSchemaItemTypeDropdownAction()` hook will be triggered once the user\\nclicks on one of the defined actions.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'itemType',\n          typeName: 'ItemType',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'Array<DropdownAction | DropdownActionGroup>',\n      location: {\n        filePath: 'src/hooks/schemaItemTypeDropdownActions.ts',\n        lineNumber: 16,\n      },\n    },\n    renderUploadSidebarPanel: {\n      name: 'renderUploadSidebarPanel',\n      comment: {\n        markdownText:\n          'This function will be called when the plugin needs to render a sidebar panel\\n(see the `uploadSidebarPanels` hook).',\n        tag: 'sidebarPanels',\n      },\n      nonCtxArguments: [\n        {\n          name: 'sidebarPaneId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'SelfResizingPluginFrameCtx',\n        additionalProperties: [\n          {\n            items: {\n              sidebarPaneId: {\n                comment: {\n                  markdownText:\n                    'The ID of the sidebar panel that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderUploadSidebarPanel.ts',\n                  lineNumber: 24,\n                },\n                type: 'string',\n              },\n              parameters: {\n                comment: {\n                  markdownText:\n                    'The arbitrary `parameters` of the panel declared in the\\n`uploadSidebarPanels` function.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderUploadSidebarPanel.ts',\n                  lineNumber: 30,\n                },\n                type: 'Record<string, unknown>',\n              },\n              upload: {\n                comment: {\n                  markdownText: 'The active asset.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderUploadSidebarPanel.ts',\n                  lineNumber: 33,\n                },\n                type: 'Upload',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderUploadSidebarPanel.ts',\n        lineNumber: 14,\n      },\n    },\n    renderUploadSidebar: {\n      name: 'renderUploadSidebar',\n      comment: {\n        markdownText:\n          'This function will be called when the plugin needs to render a sidebar (see\\nthe `uploadSidebars` hook).',\n        tag: 'sidebarPanels',\n      },\n      nonCtxArguments: [\n        {\n          name: 'sidebarId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'ImposedSizePluginFrameCtx',\n        additionalProperties: [\n          {\n            items: {\n              sidebarId: {\n                comment: {\n                  markdownText:\n                    'The ID of the sidebar that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderUploadSidebar.ts',\n                  lineNumber: 21,\n                },\n                type: 'string',\n              },\n              parameters: {\n                comment: {\n                  markdownText:\n                    'The arbitrary `parameters` of the declared in the `uploadSidebars`\\nfunction.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderUploadSidebar.ts',\n                  lineNumber: 27,\n                },\n                type: 'Record<string, unknown>',\n              },\n              upload: {\n                comment: {\n                  markdownText: 'The active asset.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderUploadSidebar.ts',\n                  lineNumber: 30,\n                },\n                type: 'Upload',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderUploadSidebar.ts',\n        lineNumber: 14,\n      },\n    },\n    renderPage: {\n      name: 'renderPage',\n      comment: {\n        markdownText:\n          'This function will be called when the plugin needs to render a specific\\npage (see the `mainNavigationTabs`, `settingsAreaSidebarItemGroups` and\\n`contentAreaSidebarItems` functions).',\n        tag: 'pages',\n      },\n      nonCtxArguments: [\n        {\n          name: 'pageId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'ImposedSizePluginFrameCtx',\n        additionalProperties: [\n          {\n            items: {\n              pageId: {\n                comment: {\n                  markdownText: 'The ID of the page that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderPage.ts',\n                  lineNumber: 19,\n                },\n                type: 'string',\n              },\n              location: {\n                comment: {\n                  markdownText: 'Current page location.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderPage.ts',\n                  lineNumber: 22,\n                },\n                type: '{\\n      pathname: string;\\n      search: string;\\n      hash: string;\\n    }',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderPage.ts',\n        lineNumber: 12,\n      },\n    },\n    renderModal: {\n      name: 'renderModal',\n      comment: {\n        markdownText:\n          'This function will be called when the plugin requested to open a modal (see\\nthe `openModal` hook).',\n        tag: 'modals',\n      },\n      nonCtxArguments: [\n        {\n          name: 'modalId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'SelfResizingPluginFrameCtx',\n        additionalProperties: [\n          {\n            items: {\n              modalId: {\n                comment: {\n                  markdownText:\n                    'The ID of the modal that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderModal.ts',\n                  lineNumber: 17,\n                },\n                type: 'string',\n              },\n              parameters: {\n                comment: {\n                  markdownText:\n                    'The arbitrary `parameters` of the modal declared in the `openModal`\\nfunction.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderModal.ts',\n                  lineNumber: 22,\n                },\n                type: 'Record<string, unknown>',\n              },\n            },\n          },\n        ],\n        additionalMethods: [\n          {\n            items: {\n              resolve: {\n                comment: {\n                  markdownText:\n                    'A function to be called by the plugin to close the modal. The `openModal`\\ncall will be resolved with the passed return value.',\n                  example:\n                    \"const returnValue = prompt(\\n  'Please specify the value to return to the caller:',\\n  'success',\\n);\\n\\nawait ctx.resolve(returnValue);\",\n                },\n                location: {\n                  filePath: 'src/hooks/renderModal.ts',\n                  lineNumber: 40,\n                },\n                type: '(returnValue: unknown) => Promise<void>',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderModal.ts',\n        lineNumber: 11,\n      },\n    },\n    renderManualFieldExtensionConfigScreen: {\n      name: 'renderManualFieldExtensionConfigScreen',\n      nonCtxArguments: [\n        {\n          name: 'fieldExtensionId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'SelfResizingPluginFrameCtx',\n        additionalProperties: [\n          {\n            items: {\n              fieldExtensionId: {\n                comment: {\n                  markdownText:\n                    'The ID of the field extension for which we need to render the parameters\\nform.',\n                },\n                location: {\n                  filePath:\n                    'src/hooks/renderManualFieldExtensionConfigScreen.ts',\n                  lineNumber: 23,\n                },\n                type: 'string',\n              },\n              parameters: {\n                comment: {\n                  markdownText:\n                    'The current value of the parameters (you can change the value with the\\n`setParameters` hook).',\n                },\n                location: {\n                  filePath:\n                    'src/hooks/renderManualFieldExtensionConfigScreen.ts',\n                  lineNumber: 28,\n                },\n                type: 'Record<string, unknown>',\n              },\n              errors: {\n                comment: {\n                  markdownText:\n                    'The current validation errors for the parameters (you can set them\\nimplementing the `validateManualFieldExtensionParameters` hook).',\n                },\n                location: {\n                  filePath:\n                    'src/hooks/renderManualFieldExtensionConfigScreen.ts',\n                  lineNumber: 33,\n                },\n                type: 'Record<string, unknown>',\n              },\n              pendingField: {\n                comment: {\n                  markdownText:\n                    'The field entity that is being edited in the form.',\n                },\n                location: {\n                  filePath:\n                    'src/hooks/renderManualFieldExtensionConfigScreen.ts',\n                  lineNumber: 36,\n                },\n                type: 'PendingField',\n              },\n              itemType: {\n                comment: {\n                  markdownText: 'The model for the field being edited.',\n                },\n                location: {\n                  filePath:\n                    'src/hooks/renderManualFieldExtensionConfigScreen.ts',\n                  lineNumber: 39,\n                },\n                type: 'ItemType',\n              },\n            },\n          },\n        ],\n        additionalMethods: [\n          {\n            items: {\n              setParameters: {\n                comment: {\n                  markdownText: 'Sets a new value for the parameters.',\n                  example: \"await ctx.setParameters({ color: '#ff0000' });\",\n                },\n                location: {\n                  filePath:\n                    'src/hooks/renderManualFieldExtensionConfigScreen.ts',\n                  lineNumber: 51,\n                },\n                type: '(params: Record<string, unknown>) => Promise<void>',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderManualFieldExtensionConfigScreen.ts',\n        lineNumber: 9,\n      },\n    },\n    renderItemFormSidebarPanel: {\n      name: 'renderItemFormSidebarPanel',\n      comment: {\n        markdownText:\n          'This function will be called when the plugin needs to render a sidebar panel\\n(see the `itemFormSidebarPanels` hook).',\n        tag: 'sidebarPanels',\n      },\n      nonCtxArguments: [\n        {\n          name: 'sidebarPaneId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'SelfResizingPluginFrameCtx',\n        additionalProperties: [\n          {\n            name: 'ItemFormAdditionalProperties',\n            comment: {\n              markdownText:\n                \"These information describe the current state of the form that's being shown\\nto the end-user to edit a record.\",\n            },\n            items: {\n              locale: {\n                comment: {\n                  markdownText: 'The currently active locale for the record.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 12,\n                },\n                type: 'string',\n              },\n              item: {\n                comment: {\n                  markdownText:\n                    'If an already persisted record is being edited, returns the full record\\nentity.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 17,\n                },\n                type: 'Item | null',\n              },\n              itemType: {\n                comment: {\n                  markdownText: 'The model for the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 19,\n                },\n                type: 'ItemType',\n              },\n              formValues: {\n                comment: {\n                  markdownText: 'The complete internal form state.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 21,\n                },\n                type: 'Record<string, unknown>',\n              },\n              itemStatus: {\n                comment: {\n                  markdownText:\n                    'The current status of the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 23,\n                },\n                type: \"'new' | 'draft' | 'updated' | 'published'\",\n              },\n              isSubmitting: {\n                comment: {\n                  markdownText:\n                    'Whether the form is currently submitting itself or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 25,\n                },\n                type: 'boolean',\n              },\n              isFormDirty: {\n                comment: {\n                  markdownText:\n                    'Whether the form has some non-persisted changes or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 27,\n                },\n                type: 'boolean',\n              },\n              blocksAnalysis: {\n                comment: {\n                  markdownText:\n                    'Provides information on how many blocks are currently present in the form.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 29,\n                },\n                type: 'BlocksAnalysis',\n              },\n            },\n          },\n          {\n            items: {\n              sidebarPaneId: {\n                comment: {\n                  markdownText:\n                    'The ID of the sidebar panel that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderItemFormSidebarPanel.ts',\n                  lineNumber: 25,\n                },\n                type: 'string',\n              },\n              parameters: {\n                comment: {\n                  markdownText:\n                    'The arbitrary `parameters` of the panel declared in the\\n`itemFormSidebarPanels` function.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderItemFormSidebarPanel.ts',\n                  lineNumber: 31,\n                },\n                type: 'Record<string, unknown>',\n              },\n            },\n          },\n        ],\n        additionalMethods: [\n          {\n            name: 'ItemFormAdditionalMethods',\n            comment: {\n              markdownText:\n                \"These methods can be used to interact with the form that's being shown to the\\nend-user to edit a record.\",\n            },\n            items: {\n              toggleField: {\n                comment: {\n                  markdownText:\n                    'Hides/shows a specific field in the form. Please be aware that when a field\\nis hidden, the field editor for that field will be removed from the DOM\\nitself, including any associated plugins. When it is shown again, its\\nplugins will be reinitialized.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.toggleField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 68,\n                },\n                type: '(path: string, show: boolean) => Promise<void>',\n              },\n              disableField: {\n                comment: {\n                  markdownText:\n                    'Disables/re-enables a specific field in the form.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.disableField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 83,\n                },\n                type: '(path: string, disable: boolean) => Promise<void>',\n              },\n              scrollToField: {\n                comment: {\n                  markdownText:\n                    'Smoothly navigates to a specific field in the form. If the field is\\nlocalized it will switch language tab and then navigate to the chosen\\nfield.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.scrollToField(fieldPath);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 100,\n                },\n                type: '(path: string, locale?: string) => Promise<void>',\n              },\n              setFieldValue: {\n                comment: {\n                  markdownText:\n                    'Changes a specific path of the `formValues` object.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.setFieldValue(fieldPath, 'new value');\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 115,\n                },\n                type: '(path: string, value: unknown) => Promise<void>',\n              },\n              formValuesToItem: {\n                comment: {\n                  markdownText:\n                    'Takes the internal form state, and transforms it into an Item entity\\ncompatible with DatoCMS API.\\n\\nWhen `skipUnchangedFields`, only the fields that changed value will be\\nserialized.\\n\\nIf the required nested blocks are still not loaded, this method will return\\n`undefined`.',\n                  example: 'await ctx.formValuesToItem(ctx.formValues, false);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 132,\n                },\n                type: \"(\\n    formValues: Record<string, unknown>,\\n    skipUnchangedFields?: boolean,\\n  ) => Promise<Omit<Item, 'id' | 'meta'> | undefined>\",\n              },\n              itemToFormValues: {\n                comment: {\n                  markdownText:\n                    'Takes an Item entity, and converts it into the internal form state.',\n                  example: 'await ctx.itemToFormValues(ctx.item);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 145,\n                },\n                type: \"(\\n    item: Omit<Item, 'id' | 'meta'>,\\n  ) => Promise<Record<string, unknown>>\",\n              },\n              saveCurrentItem: {\n                comment: {\n                  markdownText: 'Triggers a submit form for current record.',\n                  example: 'await ctx.saveCurrentItem();',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 157,\n                },\n                type: '(showToast?: boolean) => Promise<void>',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderItemFormSidebarPanel.ts',\n        lineNumber: 15,\n      },\n    },\n    renderItemFormSidebar: {\n      name: 'renderItemFormSidebar',\n      comment: {\n        markdownText:\n          'This function will be called when the plugin needs to render a sidebar (see\\nthe `itemFormSidebars` hook).',\n        tag: 'sidebarPanels',\n      },\n      nonCtxArguments: [\n        {\n          name: 'sidebarId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'ImposedSizePluginFrameCtx',\n        additionalProperties: [\n          {\n            name: 'ItemFormAdditionalProperties',\n            comment: {\n              markdownText:\n                \"These information describe the current state of the form that's being shown\\nto the end-user to edit a record.\",\n            },\n            items: {\n              locale: {\n                comment: {\n                  markdownText: 'The currently active locale for the record.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 12,\n                },\n                type: 'string',\n              },\n              item: {\n                comment: {\n                  markdownText:\n                    'If an already persisted record is being edited, returns the full record\\nentity.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 17,\n                },\n                type: 'Item | null',\n              },\n              itemType: {\n                comment: {\n                  markdownText: 'The model for the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 19,\n                },\n                type: 'ItemType',\n              },\n              formValues: {\n                comment: {\n                  markdownText: 'The complete internal form state.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 21,\n                },\n                type: 'Record<string, unknown>',\n              },\n              itemStatus: {\n                comment: {\n                  markdownText:\n                    'The current status of the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 23,\n                },\n                type: \"'new' | 'draft' | 'updated' | 'published'\",\n              },\n              isSubmitting: {\n                comment: {\n                  markdownText:\n                    'Whether the form is currently submitting itself or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 25,\n                },\n                type: 'boolean',\n              },\n              isFormDirty: {\n                comment: {\n                  markdownText:\n                    'Whether the form has some non-persisted changes or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 27,\n                },\n                type: 'boolean',\n              },\n              blocksAnalysis: {\n                comment: {\n                  markdownText:\n                    'Provides information on how many blocks are currently present in the form.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 29,\n                },\n                type: 'BlocksAnalysis',\n              },\n            },\n          },\n          {\n            items: {\n              sidebarId: {\n                comment: {\n                  markdownText:\n                    'The ID of the sidebar that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderItemFormSidebar.ts',\n                  lineNumber: 25,\n                },\n                type: 'string',\n              },\n              parameters: {\n                comment: {\n                  markdownText:\n                    'The arbitrary `parameters` of the declared in the `itemFormSidebars`\\nfunction.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderItemFormSidebar.ts',\n                  lineNumber: 30,\n                },\n                type: 'Record<string, unknown>',\n              },\n            },\n          },\n        ],\n        additionalMethods: [\n          {\n            name: 'ItemFormAdditionalMethods',\n            comment: {\n              markdownText:\n                \"These methods can be used to interact with the form that's being shown to the\\nend-user to edit a record.\",\n            },\n            items: {\n              toggleField: {\n                comment: {\n                  markdownText:\n                    'Hides/shows a specific field in the form. Please be aware that when a field\\nis hidden, the field editor for that field will be removed from the DOM\\nitself, including any associated plugins. When it is shown again, its\\nplugins will be reinitialized.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.toggleField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 68,\n                },\n                type: '(path: string, show: boolean) => Promise<void>',\n              },\n              disableField: {\n                comment: {\n                  markdownText:\n                    'Disables/re-enables a specific field in the form.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.disableField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 83,\n                },\n                type: '(path: string, disable: boolean) => Promise<void>',\n              },\n              scrollToField: {\n                comment: {\n                  markdownText:\n                    'Smoothly navigates to a specific field in the form. If the field is\\nlocalized it will switch language tab and then navigate to the chosen\\nfield.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.scrollToField(fieldPath);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 100,\n                },\n                type: '(path: string, locale?: string) => Promise<void>',\n              },\n              setFieldValue: {\n                comment: {\n                  markdownText:\n                    'Changes a specific path of the `formValues` object.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.setFieldValue(fieldPath, 'new value');\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 115,\n                },\n                type: '(path: string, value: unknown) => Promise<void>',\n              },\n              formValuesToItem: {\n                comment: {\n                  markdownText:\n                    'Takes the internal form state, and transforms it into an Item entity\\ncompatible with DatoCMS API.\\n\\nWhen `skipUnchangedFields`, only the fields that changed value will be\\nserialized.\\n\\nIf the required nested blocks are still not loaded, this method will return\\n`undefined`.',\n                  example: 'await ctx.formValuesToItem(ctx.formValues, false);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 132,\n                },\n                type: \"(\\n    formValues: Record<string, unknown>,\\n    skipUnchangedFields?: boolean,\\n  ) => Promise<Omit<Item, 'id' | 'meta'> | undefined>\",\n              },\n              itemToFormValues: {\n                comment: {\n                  markdownText:\n                    'Takes an Item entity, and converts it into the internal form state.',\n                  example: 'await ctx.itemToFormValues(ctx.item);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 145,\n                },\n                type: \"(\\n    item: Omit<Item, 'id' | 'meta'>,\\n  ) => Promise<Record<string, unknown>>\",\n              },\n              saveCurrentItem: {\n                comment: {\n                  markdownText: 'Triggers a submit form for current record.',\n                  example: 'await ctx.saveCurrentItem();',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 157,\n                },\n                type: '(showToast?: boolean) => Promise<void>',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderItemFormSidebar.ts',\n        lineNumber: 15,\n      },\n    },\n    renderItemFormOutlet: {\n      name: 'renderItemFormOutlet',\n      comment: {\n        markdownText:\n          'This function will be called when the plugin needs to render an outlet\\ndefined by the `itemFormOutlets()` hook.',\n        tag: 'outlets',\n      },\n      nonCtxArguments: [\n        {\n          name: 'itemFormOutletId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'SelfResizingPluginFrameCtx',\n        additionalProperties: [\n          {\n            name: 'ItemFormAdditionalProperties',\n            comment: {\n              markdownText:\n                \"These information describe the current state of the form that's being shown\\nto the end-user to edit a record.\",\n            },\n            items: {\n              locale: {\n                comment: {\n                  markdownText: 'The currently active locale for the record.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 12,\n                },\n                type: 'string',\n              },\n              item: {\n                comment: {\n                  markdownText:\n                    'If an already persisted record is being edited, returns the full record\\nentity.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 17,\n                },\n                type: 'Item | null',\n              },\n              itemType: {\n                comment: {\n                  markdownText: 'The model for the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 19,\n                },\n                type: 'ItemType',\n              },\n              formValues: {\n                comment: {\n                  markdownText: 'The complete internal form state.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 21,\n                },\n                type: 'Record<string, unknown>',\n              },\n              itemStatus: {\n                comment: {\n                  markdownText:\n                    'The current status of the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 23,\n                },\n                type: \"'new' | 'draft' | 'updated' | 'published'\",\n              },\n              isSubmitting: {\n                comment: {\n                  markdownText:\n                    'Whether the form is currently submitting itself or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 25,\n                },\n                type: 'boolean',\n              },\n              isFormDirty: {\n                comment: {\n                  markdownText:\n                    'Whether the form has some non-persisted changes or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 27,\n                },\n                type: 'boolean',\n              },\n              blocksAnalysis: {\n                comment: {\n                  markdownText:\n                    'Provides information on how many blocks are currently present in the form.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 29,\n                },\n                type: 'BlocksAnalysis',\n              },\n            },\n          },\n          {\n            items: {\n              itemFormOutletId: {\n                comment: {\n                  markdownText:\n                    'The ID of the outlet that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderItemFormOutlet.ts',\n                  lineNumber: 25,\n                },\n                type: 'string',\n              },\n            },\n          },\n        ],\n        additionalMethods: [\n          {\n            name: 'ItemFormAdditionalMethods',\n            comment: {\n              markdownText:\n                \"These methods can be used to interact with the form that's being shown to the\\nend-user to edit a record.\",\n            },\n            items: {\n              toggleField: {\n                comment: {\n                  markdownText:\n                    'Hides/shows a specific field in the form. Please be aware that when a field\\nis hidden, the field editor for that field will be removed from the DOM\\nitself, including any associated plugins. When it is shown again, its\\nplugins will be reinitialized.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.toggleField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 68,\n                },\n                type: '(path: string, show: boolean) => Promise<void>',\n              },\n              disableField: {\n                comment: {\n                  markdownText:\n                    'Disables/re-enables a specific field in the form.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.disableField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 83,\n                },\n                type: '(path: string, disable: boolean) => Promise<void>',\n              },\n              scrollToField: {\n                comment: {\n                  markdownText:\n                    'Smoothly navigates to a specific field in the form. If the field is\\nlocalized it will switch language tab and then navigate to the chosen\\nfield.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.scrollToField(fieldPath);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 100,\n                },\n                type: '(path: string, locale?: string) => Promise<void>',\n              },\n              setFieldValue: {\n                comment: {\n                  markdownText:\n                    'Changes a specific path of the `formValues` object.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.setFieldValue(fieldPath, 'new value');\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 115,\n                },\n                type: '(path: string, value: unknown) => Promise<void>',\n              },\n              formValuesToItem: {\n                comment: {\n                  markdownText:\n                    'Takes the internal form state, and transforms it into an Item entity\\ncompatible with DatoCMS API.\\n\\nWhen `skipUnchangedFields`, only the fields that changed value will be\\nserialized.\\n\\nIf the required nested blocks are still not loaded, this method will return\\n`undefined`.',\n                  example: 'await ctx.formValuesToItem(ctx.formValues, false);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 132,\n                },\n                type: \"(\\n    formValues: Record<string, unknown>,\\n    skipUnchangedFields?: boolean,\\n  ) => Promise<Omit<Item, 'id' | 'meta'> | undefined>\",\n              },\n              itemToFormValues: {\n                comment: {\n                  markdownText:\n                    'Takes an Item entity, and converts it into the internal form state.',\n                  example: 'await ctx.itemToFormValues(ctx.item);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 145,\n                },\n                type: \"(\\n    item: Omit<Item, 'id' | 'meta'>,\\n  ) => Promise<Record<string, unknown>>\",\n              },\n              saveCurrentItem: {\n                comment: {\n                  markdownText: 'Triggers a submit form for current record.',\n                  example: 'await ctx.saveCurrentItem();',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 157,\n                },\n                type: '(showToast?: boolean) => Promise<void>',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderItemFormOutlet.ts',\n        lineNumber: 15,\n      },\n    },\n    renderItemCollectionOutlet: {\n      name: 'renderItemCollectionOutlet',\n      comment: {\n        markdownText:\n          'This function will be called when the plugin needs to render an outlet\\ndefined by the `itemCollectionOutlets()` hook.',\n        tag: 'outlets',\n      },\n      nonCtxArguments: [\n        {\n          name: 'itemCollectionOutletId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'SelfResizingPluginFrameCtx',\n        additionalProperties: [\n          {\n            items: {\n              itemCollectionOutletId: {\n                comment: {\n                  markdownText:\n                    'The ID of the outlet that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderItemCollectionOutlet.ts',\n                  lineNumber: 24,\n                },\n                type: 'string',\n              },\n              itemType: {\n                comment: {\n                  markdownText:\n                    'The model for which the outlet is being rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderItemCollectionOutlet.ts',\n                  lineNumber: 26,\n                },\n                type: 'ItemType',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderItemCollectionOutlet.ts',\n        lineNumber: 14,\n      },\n    },\n    renderFieldExtension: {\n      name: 'renderFieldExtension',\n      comment: {\n        markdownText:\n          'This function will be called when the plugin needs to render a field\\nextension (see the `manualFieldExtensions` and `overrideFieldExtensions`\\nfunctions).',\n        tag: 'forcedFieldExtensions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'fieldExtensionId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'SelfResizingPluginFrameCtx',\n        additionalProperties: [\n          {\n            name: 'ItemFormAdditionalProperties',\n            comment: {\n              markdownText:\n                \"These information describe the current state of the form that's being shown\\nto the end-user to edit a record.\",\n            },\n            items: {\n              locale: {\n                comment: {\n                  markdownText: 'The currently active locale for the record.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 12,\n                },\n                type: 'string',\n              },\n              item: {\n                comment: {\n                  markdownText:\n                    'If an already persisted record is being edited, returns the full record\\nentity.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 17,\n                },\n                type: 'Item | null',\n              },\n              itemType: {\n                comment: {\n                  markdownText: 'The model for the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 19,\n                },\n                type: 'ItemType',\n              },\n              formValues: {\n                comment: {\n                  markdownText: 'The complete internal form state.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 21,\n                },\n                type: 'Record<string, unknown>',\n              },\n              itemStatus: {\n                comment: {\n                  markdownText:\n                    'The current status of the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 23,\n                },\n                type: \"'new' | 'draft' | 'updated' | 'published'\",\n              },\n              isSubmitting: {\n                comment: {\n                  markdownText:\n                    'Whether the form is currently submitting itself or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 25,\n                },\n                type: 'boolean',\n              },\n              isFormDirty: {\n                comment: {\n                  markdownText:\n                    'Whether the form has some non-persisted changes or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 27,\n                },\n                type: 'boolean',\n              },\n              blocksAnalysis: {\n                comment: {\n                  markdownText:\n                    'Provides information on how many blocks are currently present in the form.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 29,\n                },\n                type: 'BlocksAnalysis',\n              },\n            },\n          },\n          {\n            name: 'FieldAdditionalProperties',\n            comment: {\n              markdownText:\n                'These information describe the current state of the field where this plugin\\nis applied to.',\n            },\n            items: {\n              disabled: {\n                comment: {\n                  markdownText:\n                    'Whether the field is currently disabled or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 12,\n                },\n                type: 'boolean',\n              },\n              fieldPath: {\n                comment: {\n                  markdownText:\n                    'The path in the `formValues` object where to find the current value for the\\nfield.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 17,\n                },\n                type: 'string',\n              },\n              field: {\n                comment: {\n                  markdownText:\n                    'The field where the field extension is installed to.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 19,\n                },\n                type: 'Field',\n              },\n              parentField: {\n                comment: {\n                  markdownText:\n                    'If the field extension is installed in a field of a block, returns the top\\nlevel Modular Content/Structured Text field containing the block itself.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 24,\n                },\n                type: 'Field | undefined',\n              },\n              block: {\n                comment: {\n                  markdownText:\n                    'If the field extension is installed in a field of a block, returns the ID\\nof the block — or `undefined` if the block is still not persisted — and the\\nblock model.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 30,\n                },\n                type: 'undefined | { id: string | undefined; blockModel: ItemType }',\n              },\n            },\n          },\n          {\n            items: {\n              fieldExtensionId: {\n                comment: {\n                  markdownText:\n                    'The ID of the field extension that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderFieldExtension.ts',\n                  lineNumber: 29,\n                },\n                type: 'string',\n              },\n              parameters: {\n                comment: {\n                  markdownText:\n                    'The arbitrary `parameters` of the field extension.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderFieldExtension.ts',\n                  lineNumber: 31,\n                },\n                type: 'Record<string, unknown>',\n              },\n            },\n          },\n        ],\n        additionalMethods: [\n          {\n            name: 'ItemFormAdditionalMethods',\n            comment: {\n              markdownText:\n                \"These methods can be used to interact with the form that's being shown to the\\nend-user to edit a record.\",\n            },\n            items: {\n              toggleField: {\n                comment: {\n                  markdownText:\n                    'Hides/shows a specific field in the form. Please be aware that when a field\\nis hidden, the field editor for that field will be removed from the DOM\\nitself, including any associated plugins. When it is shown again, its\\nplugins will be reinitialized.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.toggleField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 68,\n                },\n                type: '(path: string, show: boolean) => Promise<void>',\n              },\n              disableField: {\n                comment: {\n                  markdownText:\n                    'Disables/re-enables a specific field in the form.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.disableField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 83,\n                },\n                type: '(path: string, disable: boolean) => Promise<void>',\n              },\n              scrollToField: {\n                comment: {\n                  markdownText:\n                    'Smoothly navigates to a specific field in the form. If the field is\\nlocalized it will switch language tab and then navigate to the chosen\\nfield.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.scrollToField(fieldPath);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 100,\n                },\n                type: '(path: string, locale?: string) => Promise<void>',\n              },\n              setFieldValue: {\n                comment: {\n                  markdownText:\n                    'Changes a specific path of the `formValues` object.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.setFieldValue(fieldPath, 'new value');\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 115,\n                },\n                type: '(path: string, value: unknown) => Promise<void>',\n              },\n              formValuesToItem: {\n                comment: {\n                  markdownText:\n                    'Takes the internal form state, and transforms it into an Item entity\\ncompatible with DatoCMS API.\\n\\nWhen `skipUnchangedFields`, only the fields that changed value will be\\nserialized.\\n\\nIf the required nested blocks are still not loaded, this method will return\\n`undefined`.',\n                  example: 'await ctx.formValuesToItem(ctx.formValues, false);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 132,\n                },\n                type: \"(\\n    formValues: Record<string, unknown>,\\n    skipUnchangedFields?: boolean,\\n  ) => Promise<Omit<Item, 'id' | 'meta'> | undefined>\",\n              },\n              itemToFormValues: {\n                comment: {\n                  markdownText:\n                    'Takes an Item entity, and converts it into the internal form state.',\n                  example: 'await ctx.itemToFormValues(ctx.item);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 145,\n                },\n                type: \"(\\n    item: Omit<Item, 'id' | 'meta'>,\\n  ) => Promise<Record<string, unknown>>\",\n              },\n              saveCurrentItem: {\n                comment: {\n                  markdownText: 'Triggers a submit form for current record.',\n                  example: 'await ctx.saveCurrentItem();',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 157,\n                },\n                type: '(showToast?: boolean) => Promise<void>',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderFieldExtension.ts',\n        lineNumber: 18,\n      },\n    },\n    renderConfigScreen: {\n      name: 'renderConfigScreen',\n      comment: {\n        markdownText:\n          \"This function will be called when the plugin needs to render the plugin's\\nconfiguration form.\",\n        tag: 'configScreen',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'SelfResizingPluginFrameCtx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderConfigScreen.ts',\n        lineNumber: 11,\n      },\n    },\n    renderAssetSource: {\n      name: 'renderAssetSource',\n      comment: {\n        markdownText:\n          \"This function will be called when the user selects one of the plugin's\\nasset sources to upload a new media file.\",\n        tag: 'assetSources',\n      },\n      nonCtxArguments: [\n        {\n          name: 'assetSourceId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'SelfResizingPluginFrameCtx',\n        additionalProperties: [\n          {\n            items: {\n              assetSourceId: {\n                comment: {\n                  markdownText:\n                    'The ID of the assetSource that needs to be rendered.',\n                },\n                location: {\n                  filePath: 'src/hooks/renderAssetSource.ts',\n                  lineNumber: 18,\n                },\n                type: 'string',\n              },\n            },\n          },\n        ],\n        additionalMethods: [\n          {\n            items: {\n              select: {\n                comment: {\n                  markdownText:\n                    'Function to be called when the user selects the asset: it will trigger the\\ncreation of a new `Upload` that will be added in the Media Area.',\n                  example:\n                    \"await ctx.select({\\n  resource: {\\n    url: 'https://images.unsplash.com/photo-1416339306562-f3d12fefd36f',\\n    filename: 'man-drinking-coffee.jpg',\\n  },\\n  copyright: 'Royalty free (Unsplash)',\\n  author: 'Jeff Sheldon',\\n  notes: 'A man drinking a coffee',\\n  tags: ['man', 'coffee'],\\n});\",\n                },\n                location: {\n                  filePath: 'src/hooks/renderAssetSource.ts',\n                  lineNumber: 40,\n                },\n                type: '(newUpload: NewUpload) => void',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/renderAssetSource.ts',\n        lineNumber: 11,\n      },\n    },\n    overrideFieldExtensions: {\n      name: 'overrideFieldExtensions',\n      comment: {\n        markdownText:\n          'Use this function to automatically force one or more field extensions to a\\nparticular field.',\n        tag: 'forcedFieldExtensions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'field',\n          typeName: 'Field',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            items: {\n              itemType: {\n                location: {\n                  filePath: 'src/hooks/overrideFieldExtensions.ts',\n                  lineNumber: 31,\n                },\n                type: 'ItemType',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'FieldExtensionOverride | undefined',\n      location: {\n        filePath: 'src/hooks/overrideFieldExtensions.ts',\n        lineNumber: 24,\n      },\n    },\n    onBoot: {\n      name: 'onBoot',\n      comment: {\n        markdownText:\n          'This function will be called once at boot time and can be used to perform\\nie. some initial integrity checks on the configuration.',\n        tag: 'boot',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'ImposedSizePluginFrameCtx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'void',\n      location: {\n        filePath: 'src/hooks/onBoot.ts',\n        lineNumber: 10,\n      },\n    },\n    onBeforeItemsUnpublish: {\n      name: 'onBeforeItemsUnpublish',\n      comment: {\n        markdownText:\n          'This function will be called before unpublishing records. You can stop the\\naction by returning `false`.',\n        tag: 'beforeHooks',\n      },\n      nonCtxArguments: [\n        {\n          name: 'items',\n          typeName: 'Item[]',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'MaybePromise<boolean>',\n      location: {\n        filePath: 'src/hooks/onBeforeItemsUnpublish.ts',\n        lineNumber: 14,\n      },\n    },\n    onBeforeItemsPublish: {\n      name: 'onBeforeItemsPublish',\n      comment: {\n        markdownText:\n          'This function will be called before publishing records. You can stop the\\naction by returning `false`.',\n        tag: 'beforeHooks',\n      },\n      nonCtxArguments: [\n        {\n          name: 'items',\n          typeName: 'Item[]',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'MaybePromise<boolean>',\n      location: {\n        filePath: 'src/hooks/onBeforeItemsPublish.ts',\n        lineNumber: 14,\n      },\n    },\n    onBeforeItemsDestroy: {\n      name: 'onBeforeItemsDestroy',\n      comment: {\n        markdownText:\n          'This function will be called before destroying records. You can stop the\\naction by returning `false`.',\n        tag: 'beforeHooks',\n      },\n      nonCtxArguments: [\n        {\n          name: 'items',\n          typeName: 'Item[]',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'MaybePromise<boolean>',\n      location: {\n        filePath: 'src/hooks/onBeforeItemsDestroy.ts',\n        lineNumber: 14,\n      },\n    },\n    onBeforeItemUpsert: {\n      name: 'onBeforeItemUpsert',\n      comment: {\n        markdownText:\n          'This hook is called when the user attempts to save a record. You can use it to block record saving.\\n\\nIf you return `false`, the record will NOT be saved. A small on-page error will say \"A plugin blocked the action\".\\nHowever, for better UX, consider also using `ctx.alert()` to better explain to the user why their save was blocked.\\n\\nIf you return `true`, the save will proceed as normal.\\n\\nThis hook runs BEFORE serverside validation. You can use it to do your own additional validation before returning.\\nClientside validations are not affected by this hook, since those occur on individual fields\\' `onBlur()` events.',\n        tag: 'beforeHooks',\n      },\n      nonCtxArguments: [\n        {\n          name: 'createOrUpdateItemPayload',\n          typeName: 'ItemUpdateSchema | ItemCreateSchema',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            items: {},\n          },\n        ],\n        additionalMethods: [\n          {\n            items: {\n              scrollToField: {\n                comment: {\n                  markdownText:\n                    'Smoothly navigates to a specific field in the form. If the field is\\nlocalized it will switch language tab and then navigate to the chosen\\nfield.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.scrollToField(fieldPath);\",\n                },\n                location: {\n                  filePath: 'src/hooks/onBeforeItemUpsert.ts',\n                  lineNumber: 47,\n                },\n                type: '(path: string, locale?: string) => Promise<void>',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'MaybePromise<boolean>',\n      location: {\n        filePath: 'src/hooks/onBeforeItemUpsert.ts',\n        lineNumber: 22,\n      },\n    },\n    manualFieldExtensions: {\n      name: 'manualFieldExtensions',\n      comment: {\n        markdownText:\n          'Use this function to declare new field extensions that users will be able\\nto install manually in some field.',\n        tag: 'manualFieldExtensions',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'ManualFieldExtension[]',\n      location: {\n        filePath: 'src/hooks/manualFieldExtensions.ts',\n        lineNumber: 18,\n      },\n    },\n    mainNavigationTabs: {\n      name: 'mainNavigationTabs',\n      comment: {\n        markdownText:\n          'Use this function to declare new tabs you want to add in the top-bar of the\\nUI.',\n        tag: 'pages',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'MainNavigationTab[]',\n      location: {\n        filePath: 'src/hooks/mainNavigationTabs.ts',\n        lineNumber: 19,\n      },\n    },\n    itemsDropdownActions: {\n      name: 'itemsDropdownActions',\n      comment: {\n        markdownText:\n          'This function lets you set up custom actions (or groups of actions) that\\nshow up when the user:\\n\\n* selects multiple records in the collection view for batch operations, or\\n* starts editing a specific record.\\n\\nThe `executeItemsDropdownAction()` hook will be triggered once the user\\nclicks on one of the defined actions.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'itemType',\n          typeName: 'ItemType',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            items: {\n              itemType: {\n                location: {\n                  filePath: 'src/hooks/itemsDropdownActions.ts',\n                  lineNumber: 27,\n                },\n                type: 'ItemType',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'Array<DropdownAction | DropdownActionGroup>',\n      location: {\n        filePath: 'src/hooks/itemsDropdownActions.ts',\n        lineNumber: 20,\n      },\n    },\n    itemFormSidebars: {\n      name: 'itemFormSidebars',\n      comment: {\n        markdownText:\n          'Use this function to declare new sidebar to be shown when the user edits\\nrecords of a particular model.',\n        tag: 'sidebarPanels',\n      },\n      nonCtxArguments: [\n        {\n          name: 'itemType',\n          typeName: 'ItemType',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'ItemFormSidebar[]',\n      location: {\n        filePath: 'src/hooks/itemFormSidebars.ts',\n        lineNumber: 20,\n      },\n    },\n    itemFormSidebarPanels: {\n      name: 'itemFormSidebarPanels',\n      comment: {\n        markdownText:\n          'Use this function to declare new sidebar panels to be shown when the user\\nedits records of a particular model.',\n        tag: 'sidebarPanels',\n      },\n      nonCtxArguments: [\n        {\n          name: 'itemType',\n          typeName: 'ItemType',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'ItemFormSidebarPanel[]',\n      location: {\n        filePath: 'src/hooks/itemFormSidebarPanels.ts',\n        lineNumber: 23,\n      },\n    },\n    itemFormOutlets: {\n      name: 'itemFormOutlets',\n      comment: {\n        markdownText:\n          \"Use this function to declare custom outlets to be shown at the top of the\\nrecord's editing page.\",\n        tag: 'outlets',\n      },\n      nonCtxArguments: [\n        {\n          name: 'itemType',\n          typeName: 'ItemType',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'ItemFormOutlet[]',\n      location: {\n        filePath: 'src/hooks/itemFormOutlets.ts',\n        lineNumber: 20,\n      },\n    },\n    itemFormDropdownActions: {\n      name: 'itemFormDropdownActions',\n      comment: {\n        markdownText:\n          'Use this function to define custom actions (or groups of actions) to be\\ndisplayed at when editing a particular record.\\n\\nThe `executeItemFormDropdownAction()` hook will be triggered once the user\\nclicks on one of the defined actions.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'itemType',\n          typeName: 'ItemType',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            name: 'ItemFormAdditionalProperties',\n            comment: {\n              markdownText:\n                \"These information describe the current state of the form that's being shown\\nto the end-user to edit a record.\",\n            },\n            items: {\n              locale: {\n                comment: {\n                  markdownText: 'The currently active locale for the record.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 12,\n                },\n                type: 'string',\n              },\n              item: {\n                comment: {\n                  markdownText:\n                    'If an already persisted record is being edited, returns the full record\\nentity.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 17,\n                },\n                type: 'Item | null',\n              },\n              itemType: {\n                comment: {\n                  markdownText: 'The model for the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 19,\n                },\n                type: 'ItemType',\n              },\n              formValues: {\n                comment: {\n                  markdownText: 'The complete internal form state.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 21,\n                },\n                type: 'Record<string, unknown>',\n              },\n              itemStatus: {\n                comment: {\n                  markdownText:\n                    'The current status of the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 23,\n                },\n                type: \"'new' | 'draft' | 'updated' | 'published'\",\n              },\n              isSubmitting: {\n                comment: {\n                  markdownText:\n                    'Whether the form is currently submitting itself or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 25,\n                },\n                type: 'boolean',\n              },\n              isFormDirty: {\n                comment: {\n                  markdownText:\n                    'Whether the form has some non-persisted changes or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 27,\n                },\n                type: 'boolean',\n              },\n              blocksAnalysis: {\n                comment: {\n                  markdownText:\n                    'Provides information on how many blocks are currently present in the form.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 29,\n                },\n                type: 'BlocksAnalysis',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'Array<DropdownAction | DropdownActionGroup>',\n      location: {\n        filePath: 'src/hooks/itemFormDropdownActions.ts',\n        lineNumber: 18,\n      },\n    },\n    itemCollectionOutlets: {\n      name: 'itemCollectionOutlets',\n      comment: {\n        markdownText:\n          'Use this function to declare custom outlets to be shown at the top of a\\ncollection of records of a particular model.',\n        tag: 'outlets',\n      },\n      nonCtxArguments: [\n        {\n          name: 'itemType',\n          typeName: 'ItemType',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'ItemCollectionOutlet[]',\n      location: {\n        filePath: 'src/hooks/itemCollectionOutlets.ts',\n        lineNumber: 20,\n      },\n    },\n    initialLocationQueryForItemSelector: {\n      name: 'initialLocationQueryForItemSelector',\n      comment: {\n        markdownText:\n          'Use this function to customize the initial filters when opening a record\\nselector via a \"Single link\" or \"Multiple links\" field.',\n        tag: 'locationQuery',\n      },\n      nonCtxArguments: [\n        {\n          name: 'openerField',\n          typeName: 'Field',\n        },\n        {\n          name: 'itemType',\n          typeName: 'ItemType',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType:\n        'MaybePromise<InitialLocationQueryForItemSelector | undefined>',\n      location: {\n        filePath: 'src/hooks/initialLocationQueryForItemSelector.ts',\n        lineNumber: 16,\n      },\n    },\n    fieldDropdownActions: {\n      name: 'fieldDropdownActions',\n      comment: {\n        markdownText:\n          'Use this function to define custom actions (or groups of actions) to be\\ndisplayed at the individual field level in the record editing form.\\n\\nThe `executeFieldDropdownAction()` hook will be triggered once the user\\nclicks on one of the defined actions.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'field',\n          typeName: 'Field',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            name: 'ItemFormAdditionalProperties',\n            comment: {\n              markdownText:\n                \"These information describe the current state of the form that's being shown\\nto the end-user to edit a record.\",\n            },\n            items: {\n              locale: {\n                comment: {\n                  markdownText: 'The currently active locale for the record.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 12,\n                },\n                type: 'string',\n              },\n              item: {\n                comment: {\n                  markdownText:\n                    'If an already persisted record is being edited, returns the full record\\nentity.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 17,\n                },\n                type: 'Item | null',\n              },\n              itemType: {\n                comment: {\n                  markdownText: 'The model for the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 19,\n                },\n                type: 'ItemType',\n              },\n              formValues: {\n                comment: {\n                  markdownText: 'The complete internal form state.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 21,\n                },\n                type: 'Record<string, unknown>',\n              },\n              itemStatus: {\n                comment: {\n                  markdownText:\n                    'The current status of the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 23,\n                },\n                type: \"'new' | 'draft' | 'updated' | 'published'\",\n              },\n              isSubmitting: {\n                comment: {\n                  markdownText:\n                    'Whether the form is currently submitting itself or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 25,\n                },\n                type: 'boolean',\n              },\n              isFormDirty: {\n                comment: {\n                  markdownText:\n                    'Whether the form has some non-persisted changes or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 27,\n                },\n                type: 'boolean',\n              },\n              blocksAnalysis: {\n                comment: {\n                  markdownText:\n                    'Provides information on how many blocks are currently present in the form.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 29,\n                },\n                type: 'BlocksAnalysis',\n              },\n            },\n          },\n          {\n            name: 'FieldAdditionalProperties',\n            comment: {\n              markdownText:\n                'These information describe the current state of the field where this plugin\\nis applied to.',\n            },\n            items: {\n              disabled: {\n                comment: {\n                  markdownText:\n                    'Whether the field is currently disabled or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 12,\n                },\n                type: 'boolean',\n              },\n              fieldPath: {\n                comment: {\n                  markdownText:\n                    'The path in the `formValues` object where to find the current value for the\\nfield.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 17,\n                },\n                type: 'string',\n              },\n              field: {\n                comment: {\n                  markdownText:\n                    'The field where the field extension is installed to.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 19,\n                },\n                type: 'Field',\n              },\n              parentField: {\n                comment: {\n                  markdownText:\n                    'If the field extension is installed in a field of a block, returns the top\\nlevel Modular Content/Structured Text field containing the block itself.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 24,\n                },\n                type: 'Field | undefined',\n              },\n              block: {\n                comment: {\n                  markdownText:\n                    'If the field extension is installed in a field of a block, returns the ID\\nof the block — or `undefined` if the block is still not persisted — and the\\nblock model.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 30,\n                },\n                type: 'undefined | { id: string | undefined; blockModel: ItemType }',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'Array<DropdownAction | DropdownActionGroup>',\n      location: {\n        filePath: 'src/hooks/fieldDropdownActions.ts',\n        lineNumber: 19,\n      },\n    },\n    executeUploadsDropdownAction: {\n      name: 'executeUploadsDropdownAction',\n      comment: {\n        markdownText:\n          'Use this function to execute a particular dropdown action defined via\\nthe `uploadsDropdownActions()` hook.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'actionId',\n          typeName: 'string',\n        },\n        {\n          name: 'uploads',\n          typeName: 'Upload[]',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            items: {\n              parameters: {\n                location: {\n                  filePath: 'src/hooks/executeUploadsDropdownAction.ts',\n                  lineNumber: 23,\n                },\n                type: 'Record<string, unknown> | undefined',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'Promise<void>',\n      location: {\n        filePath: 'src/hooks/executeUploadsDropdownAction.ts',\n        lineNumber: 13,\n      },\n    },\n    executeSchemaItemTypeDropdownAction: {\n      name: 'executeSchemaItemTypeDropdownAction',\n      comment: {\n        markdownText:\n          'Use this function to execute a particular dropdown action defined via\\nthe `schemaItemTypeDropdownActions()` hook.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'actionId',\n          typeName: 'string',\n        },\n        {\n          name: 'itemType',\n          typeName: 'ItemType',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            items: {\n              parameters: {\n                location: {\n                  filePath: 'src/hooks/executeSchemaItemTypeDropdownAction.ts',\n                  lineNumber: 23,\n                },\n                type: 'Record<string, unknown> | undefined',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'Promise<void>',\n      location: {\n        filePath: 'src/hooks/executeSchemaItemTypeDropdownAction.ts',\n        lineNumber: 13,\n      },\n    },\n    executeItemsDropdownAction: {\n      name: 'executeItemsDropdownAction',\n      comment: {\n        markdownText:\n          'Use this function to execute a particular dropdown action defined via\\nthe `itemsDropdownActions()` hook.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'actionId',\n          typeName: 'string',\n        },\n        {\n          name: 'items',\n          typeName: 'Item[]',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            items: {\n              parameters: {\n                location: {\n                  filePath: 'src/hooks/executeItemsDropdownAction.ts',\n                  lineNumber: 23,\n                },\n                type: 'Record<string, unknown> | undefined',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'Promise<void>',\n      location: {\n        filePath: 'src/hooks/executeItemsDropdownAction.ts',\n        lineNumber: 13,\n      },\n    },\n    executeItemFormDropdownAction: {\n      name: 'executeItemFormDropdownAction',\n      comment: {\n        markdownText:\n          'Use this function to execute a particular dropdown action defined via\\nthe `itemFormDropdownActions()` hook.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'actionId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            name: 'ItemFormAdditionalProperties',\n            comment: {\n              markdownText:\n                \"These information describe the current state of the form that's being shown\\nto the end-user to edit a record.\",\n            },\n            items: {\n              locale: {\n                comment: {\n                  markdownText: 'The currently active locale for the record.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 12,\n                },\n                type: 'string',\n              },\n              item: {\n                comment: {\n                  markdownText:\n                    'If an already persisted record is being edited, returns the full record\\nentity.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 17,\n                },\n                type: 'Item | null',\n              },\n              itemType: {\n                comment: {\n                  markdownText: 'The model for the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 19,\n                },\n                type: 'ItemType',\n              },\n              formValues: {\n                comment: {\n                  markdownText: 'The complete internal form state.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 21,\n                },\n                type: 'Record<string, unknown>',\n              },\n              itemStatus: {\n                comment: {\n                  markdownText:\n                    'The current status of the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 23,\n                },\n                type: \"'new' | 'draft' | 'updated' | 'published'\",\n              },\n              isSubmitting: {\n                comment: {\n                  markdownText:\n                    'Whether the form is currently submitting itself or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 25,\n                },\n                type: 'boolean',\n              },\n              isFormDirty: {\n                comment: {\n                  markdownText:\n                    'Whether the form has some non-persisted changes or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 27,\n                },\n                type: 'boolean',\n              },\n              blocksAnalysis: {\n                comment: {\n                  markdownText:\n                    'Provides information on how many blocks are currently present in the form.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 29,\n                },\n                type: 'BlocksAnalysis',\n              },\n            },\n          },\n          {\n            items: {\n              parameters: {\n                location: {\n                  filePath: 'src/hooks/executeItemFormDropdownAction.ts',\n                  lineNumber: 23,\n                },\n                type: 'Record<string, unknown> | undefined',\n              },\n            },\n          },\n        ],\n        additionalMethods: [\n          {\n            name: 'ItemFormAdditionalMethods',\n            comment: {\n              markdownText:\n                \"These methods can be used to interact with the form that's being shown to the\\nend-user to edit a record.\",\n            },\n            items: {\n              toggleField: {\n                comment: {\n                  markdownText:\n                    'Hides/shows a specific field in the form. Please be aware that when a field\\nis hidden, the field editor for that field will be removed from the DOM\\nitself, including any associated plugins. When it is shown again, its\\nplugins will be reinitialized.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.toggleField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 68,\n                },\n                type: '(path: string, show: boolean) => Promise<void>',\n              },\n              disableField: {\n                comment: {\n                  markdownText:\n                    'Disables/re-enables a specific field in the form.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.disableField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 83,\n                },\n                type: '(path: string, disable: boolean) => Promise<void>',\n              },\n              scrollToField: {\n                comment: {\n                  markdownText:\n                    'Smoothly navigates to a specific field in the form. If the field is\\nlocalized it will switch language tab and then navigate to the chosen\\nfield.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.scrollToField(fieldPath);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 100,\n                },\n                type: '(path: string, locale?: string) => Promise<void>',\n              },\n              setFieldValue: {\n                comment: {\n                  markdownText:\n                    'Changes a specific path of the `formValues` object.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.setFieldValue(fieldPath, 'new value');\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 115,\n                },\n                type: '(path: string, value: unknown) => Promise<void>',\n              },\n              formValuesToItem: {\n                comment: {\n                  markdownText:\n                    'Takes the internal form state, and transforms it into an Item entity\\ncompatible with DatoCMS API.\\n\\nWhen `skipUnchangedFields`, only the fields that changed value will be\\nserialized.\\n\\nIf the required nested blocks are still not loaded, this method will return\\n`undefined`.',\n                  example: 'await ctx.formValuesToItem(ctx.formValues, false);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 132,\n                },\n                type: \"(\\n    formValues: Record<string, unknown>,\\n    skipUnchangedFields?: boolean,\\n  ) => Promise<Omit<Item, 'id' | 'meta'> | undefined>\",\n              },\n              itemToFormValues: {\n                comment: {\n                  markdownText:\n                    'Takes an Item entity, and converts it into the internal form state.',\n                  example: 'await ctx.itemToFormValues(ctx.item);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 145,\n                },\n                type: \"(\\n    item: Omit<Item, 'id' | 'meta'>,\\n  ) => Promise<Record<string, unknown>>\",\n              },\n              saveCurrentItem: {\n                comment: {\n                  markdownText: 'Triggers a submit form for current record.',\n                  example: 'await ctx.saveCurrentItem();',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 157,\n                },\n                type: '(showToast?: boolean) => Promise<void>',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'Promise<void>',\n      location: {\n        filePath: 'src/hooks/executeItemFormDropdownAction.ts',\n        lineNumber: 14,\n      },\n    },\n    executeFieldDropdownAction: {\n      name: 'executeFieldDropdownAction',\n      comment: {\n        markdownText:\n          'Use this function to execute a particular dropdown action defined via\\nthe `fieldDropdownActions()` hook.',\n        tag: 'dropdownActions',\n      },\n      nonCtxArguments: [\n        {\n          name: 'actionId',\n          typeName: 'string',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            name: 'ItemFormAdditionalProperties',\n            comment: {\n              markdownText:\n                \"These information describe the current state of the form that's being shown\\nto the end-user to edit a record.\",\n            },\n            items: {\n              locale: {\n                comment: {\n                  markdownText: 'The currently active locale for the record.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 12,\n                },\n                type: 'string',\n              },\n              item: {\n                comment: {\n                  markdownText:\n                    'If an already persisted record is being edited, returns the full record\\nentity.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 17,\n                },\n                type: 'Item | null',\n              },\n              itemType: {\n                comment: {\n                  markdownText: 'The model for the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 19,\n                },\n                type: 'ItemType',\n              },\n              formValues: {\n                comment: {\n                  markdownText: 'The complete internal form state.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 21,\n                },\n                type: 'Record<string, unknown>',\n              },\n              itemStatus: {\n                comment: {\n                  markdownText:\n                    'The current status of the record being edited.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 23,\n                },\n                type: \"'new' | 'draft' | 'updated' | 'published'\",\n              },\n              isSubmitting: {\n                comment: {\n                  markdownText:\n                    'Whether the form is currently submitting itself or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 25,\n                },\n                type: 'boolean',\n              },\n              isFormDirty: {\n                comment: {\n                  markdownText:\n                    'Whether the form has some non-persisted changes or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 27,\n                },\n                type: 'boolean',\n              },\n              blocksAnalysis: {\n                comment: {\n                  markdownText:\n                    'Provides information on how many blocks are currently present in the form.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 29,\n                },\n                type: 'BlocksAnalysis',\n              },\n            },\n          },\n          {\n            name: 'FieldAdditionalProperties',\n            comment: {\n              markdownText:\n                'These information describe the current state of the field where this plugin\\nis applied to.',\n            },\n            items: {\n              disabled: {\n                comment: {\n                  markdownText:\n                    'Whether the field is currently disabled or not.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 12,\n                },\n                type: 'boolean',\n              },\n              fieldPath: {\n                comment: {\n                  markdownText:\n                    'The path in the `formValues` object where to find the current value for the\\nfield.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 17,\n                },\n                type: 'string',\n              },\n              field: {\n                comment: {\n                  markdownText:\n                    'The field where the field extension is installed to.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 19,\n                },\n                type: 'Field',\n              },\n              parentField: {\n                comment: {\n                  markdownText:\n                    'If the field extension is installed in a field of a block, returns the top\\nlevel Modular Content/Structured Text field containing the block itself.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 24,\n                },\n                type: 'Field | undefined',\n              },\n              block: {\n                comment: {\n                  markdownText:\n                    'If the field extension is installed in a field of a block, returns the ID\\nof the block — or `undefined` if the block is still not persisted — and the\\nblock model.',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/field.ts',\n                  lineNumber: 30,\n                },\n                type: 'undefined | { id: string | undefined; blockModel: ItemType }',\n              },\n            },\n          },\n          {\n            items: {\n              parameters: {\n                location: {\n                  filePath: 'src/hooks/executeFieldDropdownAction.ts',\n                  lineNumber: 25,\n                },\n                type: 'Record<string, unknown> | undefined',\n              },\n            },\n          },\n        ],\n        additionalMethods: [\n          {\n            name: 'ItemFormAdditionalMethods',\n            comment: {\n              markdownText:\n                \"These methods can be used to interact with the form that's being shown to the\\nend-user to edit a record.\",\n            },\n            items: {\n              toggleField: {\n                comment: {\n                  markdownText:\n                    'Hides/shows a specific field in the form. Please be aware that when a field\\nis hidden, the field editor for that field will be removed from the DOM\\nitself, including any associated plugins. When it is shown again, its\\nplugins will be reinitialized.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.toggleField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 68,\n                },\n                type: '(path: string, show: boolean) => Promise<void>',\n              },\n              disableField: {\n                comment: {\n                  markdownText:\n                    'Disables/re-enables a specific field in the form.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.disableField(fieldPath, true);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 83,\n                },\n                type: '(path: string, disable: boolean) => Promise<void>',\n              },\n              scrollToField: {\n                comment: {\n                  markdownText:\n                    'Smoothly navigates to a specific field in the form. If the field is\\nlocalized it will switch language tab and then navigate to the chosen\\nfield.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.scrollToField(fieldPath);\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 100,\n                },\n                type: '(path: string, locale?: string) => Promise<void>',\n              },\n              setFieldValue: {\n                comment: {\n                  markdownText:\n                    'Changes a specific path of the `formValues` object.',\n                  example:\n                    \"const fieldPath = prompt(\\n  'Please insert the path of a field in the form',\\n  ctx.fieldPath,\\n);\\n\\nawait ctx.setFieldValue(fieldPath, 'new value');\",\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 115,\n                },\n                type: '(path: string, value: unknown) => Promise<void>',\n              },\n              formValuesToItem: {\n                comment: {\n                  markdownText:\n                    'Takes the internal form state, and transforms it into an Item entity\\ncompatible with DatoCMS API.\\n\\nWhen `skipUnchangedFields`, only the fields that changed value will be\\nserialized.\\n\\nIf the required nested blocks are still not loaded, this method will return\\n`undefined`.',\n                  example: 'await ctx.formValuesToItem(ctx.formValues, false);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 132,\n                },\n                type: \"(\\n    formValues: Record<string, unknown>,\\n    skipUnchangedFields?: boolean,\\n  ) => Promise<Omit<Item, 'id' | 'meta'> | undefined>\",\n              },\n              itemToFormValues: {\n                comment: {\n                  markdownText:\n                    'Takes an Item entity, and converts it into the internal form state.',\n                  example: 'await ctx.itemToFormValues(ctx.item);',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 145,\n                },\n                type: \"(\\n    item: Omit<Item, 'id' | 'meta'>,\\n  ) => Promise<Record<string, unknown>>\",\n              },\n              saveCurrentItem: {\n                comment: {\n                  markdownText: 'Triggers a submit form for current record.',\n                  example: 'await ctx.saveCurrentItem();',\n                },\n                location: {\n                  filePath: 'src/ctx/commonExtras/itemForm.ts',\n                  lineNumber: 157,\n                },\n                type: '(showToast?: boolean) => Promise<void>',\n              },\n            },\n          },\n        ],\n      },\n      returnType: 'Promise<void>',\n      location: {\n        filePath: 'src/hooks/executeFieldDropdownAction.ts',\n        lineNumber: 15,\n      },\n    },\n    customMarksForStructuredTextField: {\n      name: 'customMarksForStructuredTextField',\n      comment: {\n        markdownText:\n          'Use this function to define a number of custom marks for a specific\\nStructured Text field.',\n        tag: 'structuredText',\n      },\n      nonCtxArguments: [\n        {\n          name: 'field',\n          typeName: 'Field',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            items: {\n              itemType: {\n                location: {\n                  filePath: 'src/hooks/customMarksForStructuredTextField.ts',\n                  lineNumber: 30,\n                },\n                type: 'ItemType',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'StructuredTextCustomMark[] | undefined',\n      location: {\n        filePath: 'src/hooks/customMarksForStructuredTextField.ts',\n        lineNumber: 23,\n      },\n    },\n    customBlockStylesForStructuredTextField: {\n      name: 'customBlockStylesForStructuredTextField',\n      comment: {\n        markdownText:\n          'Use this function to define a number of custom block styles for a specific\\nStructured Text field.',\n        tag: 'structuredText',\n      },\n      nonCtxArguments: [\n        {\n          name: 'field',\n          typeName: 'Field',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [\n          {\n            items: {\n              itemType: {\n                location: {\n                  filePath:\n                    'src/hooks/customBlockStylesForStructuredTextField.ts',\n                  lineNumber: 29,\n                },\n                type: 'ItemType',\n              },\n            },\n          },\n        ],\n        additionalMethods: [],\n      },\n      returnType: 'StructuredTextCustomBlockStyle[] | undefined',\n      location: {\n        filePath: 'src/hooks/customBlockStylesForStructuredTextField.ts',\n        lineNumber: 22,\n      },\n    },\n    contentAreaSidebarItems: {\n      name: 'contentAreaSidebarItems',\n      comment: {\n        markdownText:\n          'Use this function to declare new items in the content area sidebar.',\n        tag: 'sidebarItems',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'ContentAreaSidebarItem[]',\n      location: {\n        filePath: 'src/hooks/contentAreaSidebarItems.ts',\n        lineNumber: 18,\n      },\n    },\n    buildItemPresentationInfo: {\n      name: 'buildItemPresentationInfo',\n      comment: {\n        markdownText:\n          'Use this function to customize the presentation of a record in records\\ncollections and \"Single link\" or \"Multiple links\" field.',\n        tag: 'presentation',\n      },\n      nonCtxArguments: [\n        {\n          name: 'item',\n          typeName: 'Item',\n        },\n      ],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'MaybePromise<ItemPresentationInfo | undefined>',\n      location: {\n        filePath: 'src/hooks/buildItemPresentationInfo.ts',\n        lineNumber: 15,\n      },\n    },\n    assetSources: {\n      name: 'assetSources',\n      comment: {\n        markdownText:\n          'Use this function to declare additional sources to be shown when users want\\nto upload new assets.',\n        tag: 'assetSources',\n      },\n      nonCtxArguments: [],\n      ctxArgument: {\n        type: 'Ctx',\n        additionalProperties: [],\n        additionalMethods: [],\n      },\n      returnType: 'AssetSource[] | undefined',\n      location: {\n        filePath: 'src/hooks/assetSources.ts',\n        lineNumber: 18,\n      },\n    },\n  },\n  baseCtx: {\n    properties: [\n      {\n        name: 'PluginProperties',\n        comment: {\n          markdownText:\n            \"Information about the current plugin. Useful to access the plugin's global\\nconfiguration object.\",\n        },\n        items: {\n          plugin: {\n            comment: {\n              markdownText: 'The current plugin.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 50,\n            },\n            type: 'Plugin',\n          },\n        },\n      },\n      {\n        name: 'AuthenticationProperties',\n        comment: {\n          markdownText: 'Information about the current user using the CMS.',\n        },\n        items: {\n          currentUser: {\n            comment: {\n              markdownText:\n                'The current DatoCMS user. It can either be the owner or one of the\\ncollaborators (regular or SSO).',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 34,\n            },\n            type: 'User | SsoUser | Account | Organization',\n          },\n          currentRole: {\n            comment: {\n              markdownText: 'The role for the current DatoCMS user.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 36,\n            },\n            type: 'Role',\n          },\n          currentUserAccessToken: {\n            comment: {\n              markdownText:\n                'The access token to perform API calls on behalf of the current user. Only\\navailable if `currentUserAccessToken` additional permission is granted.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 41,\n            },\n            type: 'string | undefined',\n          },\n        },\n      },\n      {\n        name: 'ProjectProperties',\n        items: {\n          site: {\n            comment: {\n              markdownText: 'The current DatoCMS project.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 58,\n            },\n            type: 'Site',\n          },\n          environment: {\n            comment: {\n              markdownText: 'The ID of the current environment.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 61,\n            },\n            type: 'string',\n          },\n          isEnvironmentPrimary: {\n            comment: {\n              markdownText:\n                'Whether the current environment is the primary one.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 64,\n            },\n            type: 'boolean',\n          },\n          owner: {\n            comment: {\n              markdownText:\n                'The account/organization that is the project owner.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 67,\n            },\n            type: 'Account | Organization',\n          },\n          account: {\n            comment: {\n              markdownText: 'The account that is the project owner.',\n              deprecatedMarkdownText:\n                'Please use `.owner` instead, as the project owner can also be\\nan organization',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 75,\n            },\n            type: 'Account | undefined',\n          },\n          ui: {\n            comment: {\n              markdownText:\n                'UI preferences of the current user (right now, only the preferred locale is\\navailable).',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 81,\n            },\n            type: '{\\n    /** Preferred locale */\\n    locale: string;\\n  }',\n          },\n          theme: {\n            comment: {\n              markdownText:\n                'An object containing the theme colors for the current DatoCMS project.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 87,\n            },\n            type: 'Theme',\n          },\n        },\n      },\n      {\n        name: 'EntityReposProperties',\n        comment: {\n          markdownText:\n            'These properties provide access to \"entity repos\", that is, the collection of\\nresources of a particular type that have been loaded by the CMS up to this\\nmoment. The entity repos are objects, indexed by the ID of the entity itself.',\n        },\n        items: {\n          itemTypes: {\n            comment: {\n              markdownText:\n                'All the models of the current DatoCMS project, indexed by ID.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 97,\n            },\n            type: 'Partial<Record<string, ItemType>>',\n          },\n          fields: {\n            comment: {\n              markdownText:\n                'All the fields currently loaded for the current DatoCMS project, indexed by\\nID. If some fields you need are not present, use the `loadItemTypeFields`\\nfunction to load them.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 104,\n            },\n            type: 'Partial<Record<string, Field>>',\n          },\n          fieldsets: {\n            comment: {\n              markdownText:\n                'All the fieldsets currently loaded for the current DatoCMS project, indexed\\nby ID. If some fields you need are not present, use the\\n`loadItemTypeFieldsets` function to load them.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 111,\n            },\n            type: 'Partial<Record<string, Fieldset>>',\n          },\n          users: {\n            comment: {\n              markdownText:\n                'All the regular users currently loaded for the current DatoCMS project,\\nindexed by ID. It will always contain the current user. If some users you\\nneed are not present, use the `loadUsers` function to load them.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 118,\n            },\n            type: 'Partial<Record<string, User>>',\n          },\n          ssoUsers: {\n            comment: {\n              markdownText:\n                'All the SSO users currently loaded for the current DatoCMS project, indexed\\nby ID. It will always contain the current user. If some users you need are\\nnot present, use the `loadSsoUsers` function to load them.',\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 125,\n            },\n            type: 'Partial<Record<string, SsoUser>>',\n          },\n        },\n      },\n    ],\n    methods: [\n      {\n        name: 'LoadDataMethods',\n        comment: {\n          markdownText:\n            'These methods can be used to asyncronously load additional information your\\nplugin needs to work.',\n        },\n        items: {\n          loadItemTypeFields: {\n            comment: {\n              markdownText:\n                'Loads all the fields for a specific model (or block). Fields will be\\nreturned and will also be available in the the `fields` property.',\n              example:\n                \"const itemTypeId = prompt('Please insert a model ID:');\\n\\nconst fields = await ctx.loadItemTypeFields(itemTypeId);\\n\\nctx.notice(\\n  `Success! ${fields\\n    .map((field) => field.attributes.api_key)\\n    .join(', ')}`,\\n);\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 168,\n            },\n            type: '(itemTypeId: string) => Promise<Field[]>',\n          },\n          loadItemTypeFieldsets: {\n            comment: {\n              markdownText:\n                'Loads all the fieldsets for a specific model (or block). Fieldsets will be\\nreturned and will also be available in the the `fieldsets` property.',\n              example:\n                \"const itemTypeId = prompt('Please insert a model ID:');\\n\\nconst fieldsets = await ctx.loadItemTypeFieldsets(itemTypeId);\\n\\nctx.notice(\\n  `Success! ${fieldsets\\n    .map((fieldset) => fieldset.attributes.title)\\n    .join(', ')}`,\\n);\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 187,\n            },\n            type: '(itemTypeId: string) => Promise<Fieldset[]>',\n          },\n          loadFieldsUsingPlugin: {\n            comment: {\n              markdownText:\n                'Loads all the fields in the project that are currently using the plugin for\\none of its manual field extensions.',\n              example:\n                \"const fields = await ctx.loadFieldsUsingPlugin();\\n\\nctx.notice(\\n  `Success! ${fields\\n    .map((field) => field.attributes.api_key)\\n    .join(', ')}`,\\n);\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 204,\n            },\n            type: '() => Promise<Field[]>',\n          },\n          loadUsers: {\n            comment: {\n              markdownText:\n                'Loads all regular users. Users will be returned and will also be available\\nin the the `users` property.',\n              example:\n                \"const users = await ctx.loadUsers();\\n\\nctx.notice(`Success! ${users.map((user) => user.id).join(', ')}`);\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 217,\n            },\n            type: '() => Promise<User[]>',\n          },\n          loadSsoUsers: {\n            comment: {\n              markdownText:\n                'Loads all SSO users. Users will be returned and will also be available in\\nthe the `ssoUsers` property.',\n              example:\n                \"const users = await ctx.loadSsoUsers();\\n\\nctx.notice(`Success! ${users.map((user) => user.id).join(', ')}`);\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 230,\n            },\n            type: '() => Promise<SsoUser[]>',\n          },\n        },\n      },\n      {\n        name: 'UpdatePluginParametersMethods',\n        comment: {\n          markdownText:\n            'These methods can be used to update both plugin parameters and manual field\\nextensions configuration.',\n        },\n        items: {\n          updatePluginParameters: {\n            comment: {\n              markdownText:\n                'Updates the plugin parameters.\\n\\nAlways check `ctx.currentRole.meta.final_permissions.can_edit_schema`\\nbefore calling this, as the user might not have the permission to perform\\nthe operation.',\n              example:\n                \"await ctx.updatePluginParameters({ debugMode: true });\\nawait ctx.notice('Plugin parameters successfully updated!');\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 252,\n            },\n            type: '(params: Record<string, unknown>) => Promise<void>',\n          },\n          updateFieldAppearance: {\n            comment: {\n              markdownText:\n                'Performs changes in the appearance of a field. You can install/remove a\\nmanual field extension, or tweak their parameters. If multiple changes are\\npassed, they will be applied sequencially.\\n\\nAlways check `ctx.currentRole.meta.final_permissions.can_edit_schema`\\nbefore calling this, as the user might not have the permission to perform\\nthe operation.',\n              example:\n                \"const fields = await ctx.loadFieldsUsingPlugin();\\n\\nif (fields.length === 0) {\\n  ctx.alert('No field is using this plugin as a manual extension!');\\n  return;\\n}\\n\\nfor (const field of fields) {\\n  const { appearance } = field.attributes;\\n  const operations = [];\\n\\n  if (appearance.editor === ctx.plugin.id) {\\n    operations.push({\\n      operation: 'updateEditor',\\n      newParameters: {\\n        ...appearance.parameters,\\n        foo: 'bar',\\n      },\\n    });\\n  }\\n\\n  appearance.addons.forEach((addon, i) => {\\n    if (addon.id !== ctx.plugin.id) {\\n      return;\\n    }\\n\\n    operations.push({\\n      operation: 'updateAddon',\\n      index: i,\\n      newParameters: { ...addon.parameters, foo: 'bar' },\\n    });\\n  });\\n\\n  await ctx.updateFieldAppearance(field.id, operations);\\n  ctx.notice(`Successfully edited field ${field.attributes.api_key}`);\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 303,\n            },\n            type: '(\\n    fieldId: string,\\n    changes: FieldAppearanceChange[],\\n  ) => Promise<void>',\n          },\n        },\n      },\n      {\n        name: 'ToastMethods',\n        comment: {\n          markdownText:\n            'These methods can be used to show UI-consistent toast notifications to the\\nend-user.',\n        },\n        items: {\n          alert: {\n            comment: {\n              markdownText:\n                'Triggers an \"error\" toast displaying the selected message.',\n              example:\n                \"const message = prompt(\\n  'Please insert a message:',\\n  'This is an alert message!',\\n);\\n\\nawait ctx.alert(message);\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 408,\n            },\n            type: '(message: string) => Promise<void>',\n          },\n          notice: {\n            comment: {\n              markdownText:\n                'Triggers a \"success\" toast displaying the selected message.',\n              example:\n                \"const message = prompt(\\n  'Please insert a message:',\\n  'This is a notice message!',\\n);\\n\\nawait ctx.notice(message);\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 423,\n            },\n            type: '(message: string) => Promise<void>',\n          },\n          customToast: {\n            comment: {\n              markdownText:\n                'Triggers a custom toast displaying the selected message (and optionally a\\nCTA).',\n              example:\n                \"const result = await ctx.customToast({\\n  type: 'warning',\\n  message: 'Just a sample warning notification!',\\n  dismissOnPageChange: true,\\n  dismissAfterTimeout: 5000,\\n  cta: {\\n    label: 'Execute call-to-action',\\n    value: 'cta',\\n  },\\n});\\n\\nif (result === 'cta') {\\n  ctx.notice(`Clicked CTA!`);\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 447,\n            },\n            type: '<CtaValue = unknown>(\\n    toast: Toast<CtaValue>,\\n  ) => Promise<CtaValue | null>',\n          },\n        },\n      },\n      {\n        name: 'ItemDialogMethods',\n        comment: {\n          markdownText:\n            'These methods let you open the standard DatoCMS dialogs needed to interact\\nwith records.',\n        },\n        items: {\n          createNewItem: {\n            comment: {\n              markdownText:\n                'Opens a dialog for creating a new record. It returns a promise resolved\\nwith the newly created record or `null` if the user closes the dialog\\nwithout creating anything.',\n              example:\n                \"const itemTypeId = prompt('Please insert a model ID:');\\n\\nconst item = await ctx.createNewItem(itemTypeId);\\n\\nif (item) {\\n  ctx.notice(`Success! ${item.id}`);\\n} else {\\n  ctx.alert('Closed!');\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 333,\n            },\n            type: '(itemTypeId: string) => Promise<Item | null>',\n          },\n          selectItem: {\n            comment: {\n              markdownText:\n                'Opens a dialog for selecting one (or multiple) record(s) from a list of\\nexisting records of type `itemTypeId`. It returns a promise resolved with\\nthe selected record(s), or `null` if the user closes the dialog without\\nchoosing any record.',\n              example:\n                \"const itemTypeId = prompt('Please insert a model ID:');\\n\\nconst items = await ctx.selectItem(itemTypeId, { multiple: true });\\n\\nif (items) {\\n  ctx.notice(`Success! ${items.map((i) => i.id).join(', ')}`);\\n} else {\\n  ctx.alert('Closed!');\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 354,\n            },\n            type: '{\\n    (\\n      itemTypeId: string,\\n      options: { multiple: true; initialLocationQuery?: ItemListLocationQuery },\\n    ): Promise<Item[] | null>;\\n    (\\n      itemTypeId: string,\\n      options?: {\\n        multiple: false;\\n        initialLocationQuery?: ItemListLocationQuery;\\n      },\\n    ): Promise<Item | null>;\\n  }',\n          },\n          editItem: {\n            comment: {\n              markdownText:\n                'Opens a dialog for editing an existing record. It returns a promise\\nresolved with the edited record, or `null` if the user closes the dialog\\nwithout persisting any change.',\n              example:\n                \"const itemId = prompt('Please insert a record ID:');\\n\\nconst item = await ctx.editItem(itemId);\\n\\nif (item) {\\n  ctx.notice(`Success! ${item.id}`);\\n} else {\\n  ctx.alert('Closed!');\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 386,\n            },\n            type: '(itemId: string) => Promise<Item | null>',\n          },\n        },\n      },\n      {\n        name: 'UploadDialogMethods',\n        comment: {\n          markdownText:\n            'These methods let you open the standard DatoCMS dialogs needed to interact\\nwith Media Area assets.',\n        },\n        items: {\n          selectUpload: {\n            comment: {\n              markdownText:\n                'Opens a dialog for selecting one (or multiple) existing asset(s). It\\nreturns a promise resolved with the selected asset(s), or `null` if the\\nuser closes the dialog without selecting any upload.',\n              example:\n                \"const item = await ctx.selectUpload({ multiple: false });\\n\\nif (item) {\\n  ctx.notice(`Success! ${item.id}`);\\n} else {\\n  ctx.alert('Closed!');\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 474,\n            },\n            type: '{\\n    (options: { multiple: true }): Promise<Upload[] | null>;\\n    (options?: { multiple: false }): Promise<Upload | null>;\\n  }',\n          },\n          editUpload: {\n            comment: {\n              markdownText:\n                'Opens a dialog for editing a Media Area asset. It returns a promise\\nresolved with:\\n\\n- The updated asset, if the user persists some changes to the asset itself\\n- `null`, if the user closes the dialog without persisting any change\\n- An asset structure with an additional `deleted` property set to true, if\\n  the user deletes the asset.',\n              example:\n                \"const uploadId = prompt('Please insert an asset ID:');\\n\\nconst item = await ctx.editUpload(uploadId);\\n\\nif (item) {\\n  ctx.notice(`Success! ${item.id}`);\\n} else {\\n  ctx.alert('Closed!');\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 502,\n            },\n            type: '(\\n    uploadId: string,\\n  ) => Promise<(Upload & { deleted?: true }) | null>',\n          },\n          editUploadMetadata: {\n            comment: {\n              markdownText:\n                'Opens a dialog for editing a \"single asset\" field structure. It returns a\\npromise resolved with the updated structure, or `null` if the user closes\\nthe dialog without persisting any change.',\n              example:\n                \"const uploadId = prompt('Please insert an asset ID:');\\n\\nconst result = await ctx.editUploadMetadata({\\n  upload_id: uploadId,\\n  alt: null,\\n  title: null,\\n  custom_data: {},\\n  focal_point: null,\\n});\\n\\nif (result) {\\n  ctx.notice(`Success! ${JSON.stringify(result)}`);\\n} else {\\n  ctx.alert('Closed!');\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 530,\n            },\n            type: '(\\n    /** The \"single asset\" field structure */\\n    fileFieldValue: FileFieldValue,\\n    /** Shows metadata information for a specific locale */\\n    locale?: string,\\n  ) => Promise<FileFieldValue | null>',\n          },\n        },\n      },\n      {\n        name: 'CustomDialogMethods',\n        comment: {\n          markdownText:\n            'These methods can be used to open custom dialogs/confirmation panels.',\n        },\n        items: {\n          openModal: {\n            comment: {\n              markdownText:\n                'Opens a custom modal. Returns a promise resolved with what the modal itself\\nreturns calling the `resolve()` function.',\n              example:\n                \"const result = await ctx.openModal({\\n  id: 'regular',\\n  title: 'Custom title!',\\n  width: 'l',\\n  parameters: { foo: 'bar' },\\n});\\n\\nif (result) {\\n  ctx.notice(`Success! ${JSON.stringify(result)}`);\\n} else {\\n  ctx.alert('Closed!');\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 561,\n            },\n            type: '(modal: Modal) => Promise<unknown>',\n          },\n          openConfirm: {\n            comment: {\n              markdownText:\n                'Opens a UI-consistent confirmation dialog. Returns a promise resolved with\\nthe value of the choice made by the user.',\n              example:\n                \"const result = await ctx.openConfirm({\\n  title: 'Custom title',\\n  content:\\n    'Lorem Ipsum is simply dummy text of the printing and typesetting industry',\\n  choices: [\\n    {\\n      label: 'Positive',\\n      value: 'positive',\\n      intent: 'positive',\\n    },\\n    {\\n      label: 'Negative',\\n      value: 'negative',\\n      intent: 'negative',\\n    },\\n  ],\\n  cancel: {\\n    label: 'Cancel',\\n    value: false,\\n  },\\n});\\n\\nif (result) {\\n  ctx.notice(`Success! ${result}`);\\n} else {\\n  ctx.alert('Cancelled!');\\n}\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 598,\n            },\n            type: '(options: ConfirmOptions) => Promise<unknown>',\n          },\n        },\n      },\n      {\n        name: 'NavigateMethods',\n        comment: {\n          markdownText:\n            'These methods can be used to take the user to different pages.',\n        },\n        items: {\n          navigateTo: {\n            comment: {\n              markdownText:\n                'Moves the user to another URL internal to the backend.',\n              example: \"await ctx.navigateTo('/');\",\n            },\n            location: {\n              filePath: 'src/ctx/base.ts',\n              lineNumber: 612,\n            },\n            type: '(path: string) => Promise<void>',\n          },\n        },\n      },\n    ],\n  },\n  selfResizingPluginFrameCtxSizingUtilities: {\n    name: 'SizingUtilities',\n    comment: {\n      markdownText:\n        'A number of methods that you can use to control the size of the plugin frame.',\n    },\n    items: {\n      startAutoResizer: {\n        comment: {\n          markdownText:\n            \"Listens for DOM changes and automatically calls `setHeight` when it detects\\na change. If you're using `datocms-react-ui` package, the `<Canvas />`\\ncomponent already takes care of calling this method for you.\",\n        },\n        location: {\n          filePath: 'src/ctx/commonExtras/sizing.ts',\n          lineNumber: 8,\n        },\n        type: '() => void',\n      },\n      stopAutoResizer: {\n        comment: {\n          markdownText: 'Stops resizing the iframe automatically.',\n        },\n        location: {\n          filePath: 'src/ctx/commonExtras/sizing.ts',\n          lineNumber: 11,\n        },\n        type: '() => void',\n      },\n      updateHeight: {\n        comment: {\n          markdownText:\n            \"Triggers a change in the size of the iframe. If you don't explicitely pass\\na `newHeight` it will be automatically calculated using the iframe content\\nat the moment.\",\n        },\n        location: {\n          filePath: 'src/ctx/commonExtras/sizing.ts',\n          lineNumber: 18,\n        },\n        type: '(newHeight?: number) => void',\n      },\n    },\n  },\n};\n", "import {\n  isArray,\n  isBoolean,\n  isNullish,\n  isNumber,\n  isRecord,\n  isString,\n} from './guardUtils.js';\nimport { Icon, isIcon } from './icon';\n\n/**\n * An object expressing a dropdown action to be shown in the interface\n *\n * @see {isDropdownAction}\n */\nexport type DropdownAction = {\n  /**\n   * ID of action. Will be the first argument for the\n   * execute function\n   */\n  id: string;\n\n  /**\n   * An arbitrary configuration object that will be passed as the `parameters`\n   * property of the second argument of the execute function\n   */\n  parameters?: Record<string, unknown>;\n\n  /** Label to be shown. Must be unique. */\n  label: string;\n\n  /**\n   * Icon to be shown alongside the label. Can be a FontAwesome icon name (ie.\n   * `\"address-book\"`) or a custom SVG definition. To maintain visual\n   * consistency with the rest of the interface, try to use FontAwesome icons\n   * whenever possible.\n   */\n  icon: Icon;\n\n  active?: boolean;\n  alert?: boolean;\n  disabled?: boolean;\n  closeMenuOnClick?: boolean;\n\n  /**\n   * Actions will be displayed by ascending `rank`. If you want to specify an\n   * explicit value for `rank`, make sure to offer a way for final users to\n   * customize it inside the plugin's settings form, otherwise the hardcoded\n   * value you choose might clash with the one of another plugin!\n   */\n  rank?: number;\n};\n\n/**\n * An object expressing a dropdown submenu containing actions to be shown in the interface\n *\n * @see {isDropdownActionGroup}\n */\nexport type DropdownActionGroup = {\n  /** Label to be shown. Must be unique. */\n  label: string;\n\n  /**\n   * Icon to be shown alongside the label. Can be a FontAwesome icon name (ie.\n   * `\"address-book\"`) or a custom SVG definition. To maintain visual\n   * consistency with the rest of the interface, try to use FontAwesome icons\n   * whenever possible.\n   */\n  icon: Icon;\n\n  actions: DropdownAction[];\n\n  /**\n   * Actions will be displayed by ascending `rank`. If you want to specify an\n   * explicit value for `rank`, make sure to offer a way for final users to\n   * customize it inside the plugin's settings form, otherwise the hardcoded\n   * value you choose might clash with the one of another plugin!\n   */\n  rank?: number;\n};\n\nexport type ItemFormSidebarPanelPlacement = [\n  'before' | 'after',\n  'info' | 'publishedVersion' | 'schedule' | 'links' | 'history',\n];\n\nexport function isDropdownAction(value: unknown): value is DropdownAction {\n  if (!isRecord(value)) return false;\n\n  return (\n    isString(value.id) &&\n    (isNullish(value.parameters) || isRecord(value.parameters)) &&\n    isString(value.label) &&\n    isIcon(value.icon) &&\n    (isNullish(value.active) || isBoolean(value.active)) &&\n    (isNullish(value.alert) || isBoolean(value.alert)) &&\n    (isNullish(value.disabled) || isBoolean(value.disabled)) &&\n    (isNullish(value.closeMenuOnClick) || isBoolean(value.closeMenuOnClick)) &&\n    (isNullish(value.rank) || isNumber(value.rank))\n  );\n}\n\nexport function isDropdownActionGroup(\n  value: unknown,\n): value is DropdownActionGroup {\n  if (!isRecord(value)) return false;\n\n  return (\n    isString(value.label) &&\n    isIcon(value.icon) &&\n    isArray(value.actions, isDropdownAction) &&\n    (isNullish(value.rank) || isNumber(value.rank))\n  );\n}\n\nexport function isDropdownActionOrGroupArray(\n  value: unknown,\n): value is Array<DropdownAction | DropdownActionGroup> {\n  return isArray(\n    value,\n    (innerValue) =>\n      isDropdownAction(innerValue) || isDropdownActionGroup(innerValue),\n  );\n}\n"],
  "mappings": "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",
  "names": ["_default", "__assign", "connectToParent", "_a", "methodName", "_i"]
}
