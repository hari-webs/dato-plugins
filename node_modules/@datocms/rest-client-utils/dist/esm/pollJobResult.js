var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ApiError } from './errors';
import { wait } from './wait';
export function pollJobResult(fetcher) {
    return __awaiter(this, void 0, void 0, function* () {
        let jobResult;
        let retryCount = 0;
        do {
            try {
                retryCount += 1;
                yield wait(retryCount * 1000);
                jobResult = yield fetcher();
            }
            catch (e) {
                if (!(e instanceof ApiError) || e.response.status !== 404) {
                    throw e;
                }
            }
        } while (!jobResult);
        return jobResult;
    });
}
//# sourceMappingURL=pollJobResult.js.map