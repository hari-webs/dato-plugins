"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.duplicateBlockRecord = void 0;
const recursiveBlocks_1 = require("./recursiveBlocks");
function duplicateBlockRecord(existingBlock, schemaRepository) {
    return __awaiter(this, void 0, void 0, function* () {
        const { __itemTypeId, type, attributes, relationships } = existingBlock;
        const itemType = yield schemaRepository.getRawItemTypeById(existingBlock.relationships.item_type.data.id);
        const newBlock = {
            __itemTypeId,
            type,
            relationships,
            attributes,
        };
        const fields = yield schemaRepository.getRawItemTypeFields(itemType);
        for (const field of fields) {
            newBlock.attributes[field.attributes.api_key] =
                yield (0, recursiveBlocks_1.mapBlocksInNonLocalizedFieldValue)(newBlock.attributes[field.attributes.api_key], field.attributes.field_type, schemaRepository, (block, path) => {
                    if (typeof block === 'string') {
                        throw new Error(`Block cannot be duplicated as it contains nested block at ${path.join('.')} that is expressed as ID (${block}) instead of full object!`);
                    }
                    if ('id' in block) {
                        const { id, meta } = block, blockWithoutIdAndMeta = __rest(block, ["id", "meta"]);
                        return blockWithoutIdAndMeta;
                    }
                    const { meta } = block, blockWithoutMeta = __rest(block, ["meta"]);
                    return blockWithoutMeta;
                });
        }
        return newBlock;
    });
}
exports.duplicateBlockRecord = duplicateBlockRecord;
//# sourceMappingURL=duplicateBlockRecord.js.map