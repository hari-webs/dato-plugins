import * as Utils from '@datocms/rest-client-utils';
import BaseResource from '../../BaseResource';
export default class ItemTypeFilter extends BaseResource {
    /**
     * Create a new filter
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/create
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    create(body) {
        return this.rawCreate(Utils.serializeRequestBody(body, {
            type: 'item_type_filter',
            attributes: ['name', 'filter', 'columns', 'order_by', 'shared'],
            relationships: ['item_type'],
        })).then((body) => Utils.deserializeResponseBody(body));
    }
    /**
     * Create a new filter
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/create
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    rawCreate(body) {
        return this.client.request({
            method: 'POST',
            url: '/item-type-filters',
            body,
        });
    }
    /**
     * Update a filter
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/update
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    update(itemTypeFilterId, body) {
        return this.rawUpdate(Utils.toId(itemTypeFilterId), Utils.serializeRequestBody(body, {
            id: Utils.toId(itemTypeFilterId),
            type: 'item_type_filter',
            attributes: ['name', 'columns', 'order_by', 'shared', 'filter'],
            relationships: ['item_type'],
        })).then((body) => Utils.deserializeResponseBody(body));
    }
    /**
     * Update a filter
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/update
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    rawUpdate(itemTypeFilterId, body) {
        return this.client.request({
            method: 'PUT',
            url: `/item-type-filters/${itemTypeFilterId}`,
            body,
        });
    }
    /**
     * List all filters
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/instances
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    list() {
        return this.rawList().then((body) => Utils.deserializeResponseBody(body));
    }
    /**
     * List all filters
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/instances
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    rawList() {
        return this.client.request({
            method: 'GET',
            url: '/item-type-filters',
        });
    }
    /**
     * Retrieve a filter
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/self
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    find(itemTypeFilterId) {
        return this.rawFind(Utils.toId(itemTypeFilterId)).then((body) => Utils.deserializeResponseBody(body));
    }
    /**
     * Retrieve a filter
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/self
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    rawFind(itemTypeFilterId) {
        return this.client.request({
            method: 'GET',
            url: `/item-type-filters/${itemTypeFilterId}`,
        });
    }
    /**
     * Delete a filter
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/destroy
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    destroy(itemTypeFilterId) {
        return this.rawDestroy(Utils.toId(itemTypeFilterId)).then((body) => Utils.deserializeResponseBody(body));
    }
    /**
     * Delete a filter
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/item-type_filter/destroy
     *
     * @throws {ApiError}
     * @throws {TimeoutError}
     */
    rawDestroy(itemTypeFilterId) {
        return this.client.request({
            method: 'DELETE',
            url: `/item-type-filters/${itemTypeFilterId}`,
        });
    }
}
ItemTypeFilter.TYPE = 'item_type_filter';
//# sourceMappingURL=ItemTypeFilter.js.map