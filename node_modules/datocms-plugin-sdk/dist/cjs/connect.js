"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.connect = connect;
var connectToParent_1 = __importDefault(require("penpal/lib/connectToParent"));
var renderAssetSource_1 = require("./hooks/renderAssetSource");
var renderConfigScreen_1 = require("./hooks/renderConfigScreen");
var renderFieldExtension_1 = require("./hooks/renderFieldExtension");
var renderItemCollectionOutlet_1 = require("./hooks/renderItemCollectionOutlet");
var renderItemFormOutlet_1 = require("./hooks/renderItemFormOutlet");
var renderItemFormSidebar_1 = require("./hooks/renderItemFormSidebar");
var renderItemFormSidebarPanel_1 = require("./hooks/renderItemFormSidebarPanel");
var renderManualFieldExtensionConfigScreen_1 = require("./hooks/renderManualFieldExtensionConfigScreen");
var renderModal_1 = require("./hooks/renderModal");
var renderPage_1 = require("./hooks/renderPage");
var renderUploadSidebar_1 = require("./hooks/renderUploadSidebar");
var renderUploadSidebarPanel_1 = require("./hooks/renderUploadSidebarPanel");
var utils_1 = require("./utils");
function connect() {
    return __awaiter(this, arguments, void 0, function (rawConfiguration) {
        var onChangeListener, callMethodMergingBootCtxExecutor, configuration, penpalConnection, methods, initialProperties, currentProperties_1, availableBootstrappers, _i, _a, bootstrapper, result;
        if (rawConfiguration === void 0) { rawConfiguration = {}; }
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    onChangeListener = null;
                    callMethodMergingBootCtxExecutor = null;
                    configuration = __assign(__assign({}, rawConfiguration), { overrideFieldExtensions: (0, utils_1.fromOneFieldIntoMultipleAndResultsById)(rawConfiguration.overrideFieldExtensions), customMarksForStructuredTextField: (0, utils_1.fromOneFieldIntoMultipleAndResultsById)(rawConfiguration.customMarksForStructuredTextField), customBlockStylesForStructuredTextField: (0, utils_1.fromOneFieldIntoMultipleAndResultsById)(rawConfiguration.customBlockStylesForStructuredTextField) });
                    penpalConnection = (0, connectToParent_1.default)({
                        methods: __assign(__assign({ sdkVersion: function () { return '0.3.0'; }, implementedHooks: function () {
                                return Object.fromEntries(Object.keys(rawConfiguration).map(function (hook) {
                                    return [hook, true];
                                }));
                            } }, Object.fromEntries(Object.entries(configuration).filter(function (_a) {
                            var key = _a[0];
                            return !key.startsWith('render');
                        }))), { onChange: function (newSettings) {
                                if (onChangeListener) {
                                    onChangeListener(newSettings);
                                }
                            }, callMethodMergingBootCtx: function (methodName, methodArgs, extraCtxProperties, extraCtxMethodKeys, methodCallId) {
                                if (!callMethodMergingBootCtxExecutor) {
                                    return null;
                                }
                                return callMethodMergingBootCtxExecutor(methodName, methodArgs, extraCtxProperties, extraCtxMethodKeys, methodCallId);
                            } }),
                    });
                    return [4 /*yield*/, penpalConnection.promise];
                case 1:
                    methods = _b.sent();
                    return [4 /*yield*/, methods.getSettings()];
                case 2:
                    initialProperties = _b.sent();
                    if (initialProperties.mode === 'onBoot') {
                        currentProperties_1 = initialProperties;
                        onChangeListener = function (newProperties) {
                            currentProperties_1 = newProperties;
                        };
                        callMethodMergingBootCtxExecutor = function (methodName, methodArgs, extraCtxProperties, extraCtxMethodKeys, methodCallId) {
                            var _a;
                            if (!(methodName in configuration)) {
                                return undefined;
                            }
                            return (_a = configuration)[methodName].apply(_a, __spreadArray(__spreadArray([], methodArgs, false), [__assign(__assign(__assign(__assign({}, (0, utils_1.omit)(methods, ['getSettings', 'setHeight'])), (0, utils_1.omit)(currentProperties_1, ['mode', 'bodyPadding'])), Object.fromEntries(extraCtxMethodKeys.map(function (methodName) { return [
                                    methodName,
                                    function createAdditionalMethodProxy() {
                                        var args = [];
                                        for (var _i = 0; _i < arguments.length; _i++) {
                                            args[_i] = arguments[_i];
                                        }
                                        return methods.callAdditionalCtxMethod(methodCallId, methodName, args);
                                    },
                                ]; }))), extraCtxProperties)], false));
                        };
                        if (configuration.onBoot) {
                            configuration.onBoot(__assign(__assign({}, methods), currentProperties_1));
                        }
                    }
                    availableBootstrappers = {
                        renderAssetSource: renderAssetSource_1.renderAssetSourceBootstrapper,
                        renderConfigScreen: renderConfigScreen_1.renderConfigScreenBootstrapper,
                        renderFieldExtension: renderFieldExtension_1.renderFieldExtensionBootstrapper,
                        renderItemCollectionOutlet: renderItemCollectionOutlet_1.renderItemCollectionOutletBootstrapper,
                        renderItemFormOutlet: renderItemFormOutlet_1.renderItemFormOutletBootstrapper,
                        renderItemFormSidebar: renderItemFormSidebar_1.renderItemFormSidebarBootstrapper,
                        renderItemFormSidebarPanel: renderItemFormSidebarPanel_1.renderItemFormSidebarPanelBootstrapper,
                        renderManualFieldExtensionConfigScreen: renderManualFieldExtensionConfigScreen_1.renderManualFieldExtensionConfigScreenBootstrapper,
                        renderModal: renderModal_1.renderModalBootstrapper,
                        renderPage: renderPage_1.renderPageBootstrapper,
                        renderUploadSidebar: renderUploadSidebar_1.renderUploadSidebarBootstrapper,
                        renderUploadSidebarPanel: renderUploadSidebarPanel_1.renderUploadSidebarPanelBootstrapper,
                    };
                    for (_i = 0, _a = Object.values(availableBootstrappers); _i < _a.length; _i++) {
                        bootstrapper = _a[_i];
                        result = bootstrapper(configuration, methods, initialProperties);
                        if (result) {
                            onChangeListener = result;
                            break;
                        }
                    }
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=connect.js.map